{
  "docs": [
    {
      "comment": "/**\r\n * This class defines the public API of the WebGME-Core\r\n *\r\n * @author kecso / https://github.com/kecso\r\n * @module Core\r\n */",
      "meta": {
        "filename": "core.js",
        "lineno": 4,
        "columnno": 0,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {}
      },
      "description": "This class defines the public API of the WebGME-Core",
      "author": [
        "kecso / https://github.com/kecso"
      ],
      "kind": "module",
      "name": "Core",
      "longname": "module:Core",
      "___id": "T000002R000002",
      "___s": true
    },
    {
      "comment": "/**\r\n * @typedef {object} Node - the object that represents the atomic element of the containment hierarchy.\r\n */",
      "meta": {
        "filename": "core.js",
        "lineno": 11,
        "columnno": 0,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {}
      },
      "kind": "typedef",
      "name": "Node",
      "type": {
        "names": [
          "object"
        ]
      },
      "description": "the object that represents the atomic element of the containment hierarchy.",
      "longname": "module:Core~Node",
      "scope": "inner",
      "memberof": "module:Core",
      "___id": "T000002R000003",
      "___s": true
    },
    {
      "comment": "/**\r\n * @typedef {object} DataObject - Inner data of {@link module:Core~Node} that can be serialized\r\n * and saved in the storage.\r\n */",
      "meta": {
        "filename": "core.js",
        "lineno": 15,
        "columnno": 0,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {}
      },
      "kind": "typedef",
      "name": "DataObject",
      "type": {
        "names": [
          "object"
        ]
      },
      "description": "Inner data of {@link module:Core~Node} that can be serialized\rand saved in the storage.",
      "longname": "module:Core~DataObject",
      "scope": "inner",
      "memberof": "module:Core",
      "___id": "T000002R000004",
      "___s": true
    },
    {
      "comment": "/**\r\n * @typedef {object} GmePersisted - the result object of a persist which contains information about the newly\r\n * created data objects.\r\n * @prop {module:Core~ObjectHash} rootHash - Hash of the root node.\r\n * @prop {object.<module:Core~ObjectHash, module:Core~DataObject>} objects - Hash of the root node.\r\n */",
      "meta": {
        "filename": "core.js",
        "lineno": 20,
        "columnno": 0,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {}
      },
      "kind": "typedef",
      "name": "GmePersisted",
      "type": {
        "names": [
          "object"
        ]
      },
      "description": "the result object of a persist which contains information about the newly\rcreated data objects.",
      "properties": [
        {
          "type": {
            "names": [
              "module:Core~ObjectHash"
            ]
          },
          "description": "Hash of the root node.",
          "name": "rootHash"
        },
        {
          "type": {
            "names": [
              "object.<module:Core~ObjectHash, module:Core~DataObject>"
            ]
          },
          "description": "Hash of the root node.",
          "name": "objects"
        }
      ],
      "longname": "module:Core~GmePersisted",
      "scope": "inner",
      "memberof": "module:Core",
      "___id": "T000002R000005",
      "___s": true
    },
    {
      "comment": "/**\r\n * @typedef {string} ObjectHash - Unique SHA-1 hash for the node object.\r\n * @example\r\n * '#5496cf226542fcceccf89056f0d27564abc88c99'\r\n */",
      "meta": {
        "filename": "core.js",
        "lineno": 27,
        "columnno": 0,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {}
      },
      "kind": "typedef",
      "name": "ObjectHash",
      "type": {
        "names": [
          "string"
        ]
      },
      "description": "Unique SHA-1 hash for the node object.",
      "examples": [
        "'#5496cf226542fcceccf89056f0d27564abc88c99'"
      ],
      "longname": "module:Core~ObjectHash",
      "scope": "inner",
      "memberof": "module:Core",
      "___id": "T000002R000006",
      "___s": true
    },
    {
      "comment": "/**\r\n * @typedef {string} GUID - Globally unique identifier. A formatted string containing hexadecimal characters. If some\r\n * projects share some GUIDs that can only be because the node with the given identification represents the same\r\n * concept.\r\n * @example\r\n * 'cd891e7b-e2ea-e929-f6cd-9faf4f1fc045'\r\n */",
      "meta": {
        "filename": "core.js",
        "lineno": 33,
        "columnno": 0,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {}
      },
      "kind": "typedef",
      "name": "GUID",
      "type": {
        "names": [
          "string"
        ]
      },
      "description": "Globally unique identifier. A formatted string containing hexadecimal characters. If some\rprojects share some GUIDs that can only be because the node with the given identification represents the same\rconcept.",
      "examples": [
        "'cd891e7b-e2ea-e929-f6cd-9faf4f1fc045'"
      ],
      "longname": "module:Core~GUID",
      "scope": "inner",
      "memberof": "module:Core",
      "___id": "T000002R000007",
      "___s": true
    },
    {
      "comment": "/**\r\n * @typedef {object} Constraint - An object that represents some additional rule regarding some node of the project.\r\n * @prop {string} script - The script which checks if the constraint is met.\r\n * @prop {string} info - Short description of the constraint.\r\n * @prop {string} priority - Gives instructions on how to deal with violations of the constraint.\r\n */",
      "meta": {
        "filename": "core.js",
        "lineno": 41,
        "columnno": 0,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {}
      },
      "kind": "typedef",
      "name": "Constraint",
      "type": {
        "names": [
          "object"
        ]
      },
      "description": "An object that represents some additional rule regarding some node of the project.",
      "properties": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The script which checks if the constraint is met.",
          "name": "script"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Short description of the constraint.",
          "name": "info"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Gives instructions on how to deal with violations of the constraint.",
          "name": "priority"
        }
      ],
      "longname": "module:Core~Constraint",
      "scope": "inner",
      "memberof": "module:Core",
      "___id": "T000002R000008",
      "___s": true
    },
    {
      "comment": "/**\r\n * @typedef {object} DefinitionInfo - Contains the owner and the target of the meta-rule that makes the\r\n * relationship between the given node and related node a valid one. There can be multiple meta-rules that make\r\n * the relationship valid, but this is the first one that answers the question isValidChildOf, isValidTargetOf etc.\r\n * @prop {Core~Node} ownerNode - The meta-node where the meta-rule is stored.\r\n * @prop {Core~Node} targetNode - The meta-node the meta-rule is targeting.\r\n */",
      "meta": {
        "filename": "core.js",
        "lineno": 48,
        "columnno": 0,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {}
      },
      "kind": "typedef",
      "name": "DefinitionInfo",
      "type": {
        "names": [
          "object"
        ]
      },
      "description": "Contains the owner and the target of the meta-rule that makes the\rrelationship between the given node and related node a valid one. There can be multiple meta-rules that make\rthe relationship valid, but this is the first one that answers the question isValidChildOf, isValidTargetOf etc.",
      "properties": [
        {
          "type": {
            "names": [
              "Core~Node"
            ]
          },
          "description": "The meta-node where the meta-rule is stored.",
          "name": "ownerNode"
        },
        {
          "type": {
            "names": [
              "Core~Node"
            ]
          },
          "description": "The meta-node the meta-rule is targeting.",
          "name": "targetNode"
        }
      ],
      "longname": "module:Core~DefinitionInfo",
      "scope": "inner",
      "memberof": "module:Core",
      "___id": "T000002R000009",
      "___s": true
    },
    {
      "comment": "/**\r\n * @typedef {object} RelationRule - An object that represents a relational type rule-set (pointer/set).\r\n * @prop {integer} [min] - The minimum amount of target necessary for the relationship (if not present or '-1'\r\n * then there is no minimum rule that applies)\r\n * @prop {integer} [max] - The minimum amount of target necessary for the relationship (if not present or '-1'\r\n * then there is no minimum rule that applies)\r\n * @prop {object} [absolutePathOfTarget] - special rules regarding the given type (if the object is empty, it still\r\n * represents that the type is a valid target of the relationship)\r\n * @prop {integer} [absolutePathOfTarget.min] - The minimum amount of target necessary for the relationship\r\n * from the given type (if not present or '-1' then there is no minimum rule that applies)\r\n * @prop {integer} [absolutePathOfTarget.max] - The minimum amount of target necessary for the relationship\r\n * from the given type (if not present or '-1' then there is no minimum rule that applies)\r\n * @example\r\n * '{\r\n *  'min': 1,\r\n *  'max': -1,\r\n *  'any/path/of/node':{\r\n *   'min':-1,\r\n *   'max':2\r\n *   },\r\n *   'any/other/valid/path':{\r\n *   }\r\n * }'\r\n */",
      "meta": {
        "filename": "core.js",
        "lineno": 56,
        "columnno": 0,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {}
      },
      "kind": "typedef",
      "name": "RelationRule",
      "type": {
        "names": [
          "object"
        ]
      },
      "description": "An object that represents a relational type rule-set (pointer/set).",
      "properties": [
        {
          "type": {
            "names": [
              "integer"
            ]
          },
          "optional": true,
          "description": "The minimum amount of target necessary for the relationship (if not present or '-1'\rthen there is no minimum rule that applies)",
          "name": "min"
        },
        {
          "type": {
            "names": [
              "integer"
            ]
          },
          "optional": true,
          "description": "The minimum amount of target necessary for the relationship (if not present or '-1'\rthen there is no minimum rule that applies)",
          "name": "max"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "optional": true,
          "description": "special rules regarding the given type (if the object is empty, it still\rrepresents that the type is a valid target of the relationship)",
          "name": "absolutePathOfTarget"
        },
        {
          "type": {
            "names": [
              "integer"
            ]
          },
          "optional": true,
          "description": "The minimum amount of target necessary for the relationship\rfrom the given type (if not present or '-1' then there is no minimum rule that applies)",
          "name": "absolutePathOfTarget.min"
        },
        {
          "type": {
            "names": [
              "integer"
            ]
          },
          "optional": true,
          "description": "The minimum amount of target necessary for the relationship\rfrom the given type (if not present or '-1' then there is no minimum rule that applies)",
          "name": "absolutePathOfTarget.max"
        }
      ],
      "examples": [
        "'{\r 'min': 1,\r 'max': -1,\r 'any/path/of/node':{\r  'min':-1,\r  'max':2\r  },\r  'any/other/valid/path':{\r  }\r}'"
      ],
      "longname": "module:Core~RelationRule",
      "scope": "inner",
      "memberof": "module:Core",
      "___id": "T000002R000010",
      "___s": true
    },
    {
      "comment": "/**\r\n * @typedef {object} MixinViolation - An object that has information about a mixin violation in the given node.\r\n * @prop {string} [severity] - The severity of the given error ('error','warning').\r\n * @prop {string} [type] - 'missing', 'attribute collision', 'set collision',\r\n * 'pointer collision', 'containment collision', 'aspect collision', 'constraint collision'\r\n * @prop {string|undefined} [ruleName] - The name of the affected rule definition  (if available).\r\n * @prop {string|undefined} [targetInfo] - The path of the target of the violation (if available).\r\n * @prop {module:Core~Node|undefined} [targetNode] - The target node of the violation (if available).\r\n * @prop {string[]} [collisionPaths] - The list of paths of colliding nodes (if any).\r\n * @prop {module:Core~Node[]} [collisionNodes] - The colliding mixin nodes (if any).\r\n * @prop {string} [message] - The description of the violation.\r\n * @prop {string} [hint] - Hint on how to resolve the issue.\r\n * @example\r\n * '{\r\n * 'severity': 'error',\r\n * 'type': 'missing',\r\n * 'targetInfo': '/E/b',\r\n * 'message': '[MyObject]: mixin node \"E/b\" is missing from the Meta',\r\n * 'hint': 'Remove mixin or add to the Meta'\r\n * }'\r\n * @example\r\n * '{\r\n * 'severity': 'warning',\r\n * 'type': 'attribute collision',\r\n * 'ruleName': 'value',\r\n * 'collisionPaths': ['/E/a','/E/Z'],\r\n * 'collisionNodes': [Object,Object],\r\n * 'message':'[MyObject]: inherits attribute definition \"value\" from [TypeA] and [TypeB]',\r\n * 'hint': 'Remove one of the mixin relations'\r\n * }'\r\n */",
      "meta": {
        "filename": "core.js",
        "lineno": 81,
        "columnno": 0,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {}
      },
      "kind": "typedef",
      "name": "MixinViolation",
      "type": {
        "names": [
          "object"
        ]
      },
      "description": "An object that has information about a mixin violation in the given node.",
      "properties": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "description": "The severity of the given error ('error','warning').",
          "name": "severity"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "description": "'missing', 'attribute collision', 'set collision',\r'pointer collision', 'containment collision', 'aspect collision', 'constraint collision'",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "string",
              "undefined"
            ]
          },
          "optional": true,
          "description": "The name of the affected rule definition  (if available).",
          "name": "ruleName"
        },
        {
          "type": {
            "names": [
              "string",
              "undefined"
            ]
          },
          "optional": true,
          "description": "The path of the target of the violation (if available).",
          "name": "targetInfo"
        },
        {
          "type": {
            "names": [
              "module:Core~Node",
              "undefined"
            ]
          },
          "optional": true,
          "description": "The target node of the violation (if available).",
          "name": "targetNode"
        },
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "optional": true,
          "description": "The list of paths of colliding nodes (if any).",
          "name": "collisionPaths"
        },
        {
          "type": {
            "names": [
              "Array.<module:Core~Node>"
            ]
          },
          "optional": true,
          "description": "The colliding mixin nodes (if any).",
          "name": "collisionNodes"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "description": "The description of the violation.",
          "name": "message"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "description": "Hint on how to resolve the issue.",
          "name": "hint"
        }
      ],
      "examples": [
        "'{\r'severity': 'error',\r'type': 'missing',\r'targetInfo': '/E/b',\r'message': '[MyObject]: mixin node \"E/b\" is missing from the Meta',\r'hint': 'Remove mixin or add to the Meta'\r}'",
        "'{\r'severity': 'warning',\r'type': 'attribute collision',\r'ruleName': 'value',\r'collisionPaths': ['/E/a','/E/Z'],\r'collisionNodes': [Object,Object],\r'message':'[MyObject]: inherits attribute definition \"value\" from [TypeA] and [TypeB]',\r'hint': 'Remove one of the mixin relations'\r}'"
      ],
      "longname": "module:Core~MixinViolation",
      "scope": "inner",
      "memberof": "module:Core",
      "___id": "T000002R000011",
      "___s": true
    },
    {
      "comment": "/**\r\n     * @param {ProjectInterface} project - project connected to storage\r\n     * @param {object} options - contains logging information\r\n     * @param {object} options.logger - gmeLogger\r\n     * @param {object} options.globConf - gmeConfig\r\n     * @alias Core\r\n     * @constructor\r\n     */",
      "meta": {
        "range": [
          11811,
          220184
        ],
        "filename": "core.js",
        "lineno": 349,
        "columnno": 4,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100000591",
          "name": "Core",
          "type": "FunctionDeclaration",
          "paramnames": [
            "project",
            "options"
          ]
        },
        "vars": {
          "core": "module:Core~core",
          "coreLayers": "Core~coreLayers",
          "": null,
          "isValidNode": "module:Core~isValidNode",
          "isValidPath": "module:Core~isValidPath",
          "this.getParent": "Core#getParent",
          "this.getCommonParent": "Core#getCommonParent",
          "this.getRelid": "Core#getRelid",
          "this.getRoot": "Core#getRoot",
          "this.getPath": "Core#getPath",
          "this.getChild": "Core#getChild",
          "this.isEmpty": "Core#isEmpty",
          "this.getHash": "Core#getHash",
          "this.persist": "Core#persist",
          "this.loadRoot": "Core#loadRoot",
          "this.loadChild": "Core#loadChild",
          "this.loadByPath": "Core#loadByPath",
          "this.loadChildren": "Core#loadChildren",
          "this.loadOwnChildren": "Core#loadOwnChildren",
          "this.loadPointer": "Core#loadPointer",
          "this.loadCollection": "Core#loadCollection",
          "this.loadSubTree": "Core#loadSubTree",
          "this.loadOwnSubTree": "Core#loadOwnSubTree",
          "this.loadTree": "Core#loadTree",
          "this.getChildrenRelids": "Core#getChildrenRelids",
          "this.getOwnChildrenRelids": "Core#getOwnChildrenRelids",
          "this.getChildrenPaths": "Core#getChildrenPaths",
          "this.getOwnChildrenPaths": "Core#getOwnChildrenPaths",
          "this.createNode": "Core#createNode",
          "this.createChild": "Core#createChild",
          "this.deleteNode": "Core#deleteNode",
          "this.copyNode": "Core#copyNode",
          "this.copyNodes": "Core#copyNodes",
          "this.isValidNewParent": "Core#isValidNewParent",
          "this.moveNode": "Core#moveNode",
          "this.getAttributeNames": "Core#getAttributeNames",
          "this.getAttribute": "Core#getAttribute",
          "this.setAttribute": "Core#setAttribute",
          "this.delAttribute": "Core#delAttribute",
          "this.getRegistryNames": "Core#getRegistryNames",
          "this.getRegistry": "Core#getRegistry",
          "this.setRegistry": "Core#setRegistry",
          "this.delRegistry": "Core#delRegistry",
          "this.getPointerNames": "Core#getPointerNames",
          "this.getPointerPath": "Core#getPointerPath",
          "this.delPointer": "Core#delPointer",
          "this.deletePointer": "Core#deletePointer",
          "this.setPointer": "Core#setPointer",
          "this.getCollectionNames": "Core#getCollectionNames",
          "this.getCollectionPaths": "Core#getCollectionPaths",
          "this.getChildrenHashes": "Core#getChildrenHashes",
          "this.getBase": "Core#getBase",
          "this.getCommonBase": "Core#getCommonBase",
          "this.getBaseRoot": "Core#getBaseRoot",
          "this.getOwnAttributeNames": "Core#getOwnAttributeNames",
          "this.getOwnRegistryNames": "Core#getOwnRegistryNames",
          "this.getOwnAttribute": "Core#getOwnAttribute",
          "this.getOwnRegistry": "Core#getOwnRegistry",
          "this.getOwnPointerNames": "Core#getOwnPointerNames",
          "this.getOwnPointerPath": "Core#getOwnPointerPath",
          "this.isValidNewBase": "Core#isValidNewBase",
          "this.setBase": "Core#setBase",
          "this.getTypeRoot": "Core#getTypeRoot",
          "this.getSetNames": "Core#getSetNames",
          "this.getOwnSetNames": "Core#getOwnSetNames",
          "this.createSet": "Core#createSet",
          "this.delSet": "Core#delSet",
          "this.deleteSet": "Core#deleteSet",
          "this.getSetAttributeNames": "Core#getSetAttributeNames",
          "this.getOwnSetAttributeNames": "Core#getOwnSetAttributeNames",
          "this.getSetAttribute": "Core#getSetAttribute",
          "this.getOwnSetAttribute": "Core#getOwnSetAttribute",
          "this.setSetAttribute": "Core#setSetAttribute",
          "this.delSetAttribute": "Core#delSetAttribute",
          "this.getSetRegistryNames": "Core#getSetRegistryNames",
          "this.getOwnSetRegistryNames": "Core#getOwnSetRegistryNames",
          "this.getSetRegistry": "Core#getSetRegistry",
          "this.getOwnSetRegistry": "Core#getOwnSetRegistry",
          "this.setSetRegistry": "Core#setSetRegistry",
          "this.delSetRegistry": "Core#delSetRegistry",
          "this.getMemberPaths": "Core#getMemberPaths",
          "this.getOwnMemberPaths": "Core#getOwnMemberPaths",
          "this.delMember": "Core#delMember",
          "this.addMember": "Core#addMember",
          "this.getMemberAttributeNames": "Core#getMemberAttributeNames",
          "this.getMemberOwnAttributeNames": "Core#getMemberOwnAttributeNames",
          "this.getMemberAttribute": "Core#getMemberAttribute",
          "this.getMemberOwnAttribute": "Core#getMemberOwnAttribute",
          "this.setMemberAttribute": "Core#setMemberAttribute",
          "this.delMemberAttribute": "Core#delMemberAttribute",
          "this.getMemberRegistryNames": "Core#getMemberRegistryNames",
          "this.getMemberOwnRegistryNames": "Core#getMemberOwnRegistryNames",
          "this.getMemberRegistry": "Core#getMemberRegistry",
          "this.getMemberOwnRegistry": "Core#getMemberOwnRegistry",
          "this.setMemberRegistry": "Core#setMemberRegistry",
          "this.delMemberRegistry": "Core#delMemberRegistry",
          "this.isMemberOf": "Core#isMemberOf",
          "this.getGuid": "Core#getGuid",
          "this.setGuid": "Core#setGuid",
          "this.getConstraint": "Core#getConstraint",
          "this.setConstraint": "Core#setConstraint",
          "this.delConstraint": "Core#delConstraint",
          "this.getConstraintNames": "Core#getConstraintNames",
          "this.getOwnConstraintNames": "Core#getOwnConstraintNames",
          "this.isTypeOf": "Core#isTypeOf",
          "this.isValidChildOf": "Core#isValidChildOf",
          "this.getValidPointerNames": "Core#getValidPointerNames",
          "this.getOwnValidPointerNames": "Core#getOwnValidPointerNames",
          "this.getValidSetNames": "Core#getValidSetNames",
          "this.getOwnValidSetNames": "Core#getOwnValidSetNames",
          "this.isValidTargetOf": "Core#isValidTargetOf",
          "this.getValidAttributeNames": "Core#getValidAttributeNames",
          "this.getOwnValidAttributeNames": "Core#getOwnValidAttributeNames",
          "this.isValidAttributeValueOf": "Core#isValidAttributeValueOf",
          "this.getValidAspectNames": "Core#getValidAspectNames",
          "this.getOwnValidAspectNames": "Core#getOwnValidAspectNames",
          "this.getAspectMeta": "Core#getAspectMeta",
          "this.getJsonMeta": "Core#getJsonMeta",
          "this.getOwnJsonMeta": "Core#getOwnJsonMeta",
          "this.clearMetaRules": "Core#clearMetaRules",
          "this.setAttributeMeta": "Core#setAttributeMeta",
          "this.delAttributeMeta": "Core#delAttributeMeta",
          "this.getAttributeMeta": "Core#getAttributeMeta",
          "this.getValidChildrenPaths": "Core#getValidChildrenPaths",
          "this.getChildrenMeta": "Core#getChildrenMeta",
          "this.setChildMeta": "Core#setChildMeta",
          "this.delChildMeta": "Core#delChildMeta",
          "this.setChildrenMetaLimits": "Core#setChildrenMetaLimits",
          "this.setPointerMetaTarget": "Core#setPointerMetaTarget",
          "this.delPointerMetaTarget": "Core#delPointerMetaTarget",
          "this.setPointerMetaLimits": "Core#setPointerMetaLimits",
          "this.delPointerMeta": "Core#delPointerMeta",
          "this.getPointerMeta": "Core#getPointerMeta",
          "this.setAspectMetaTarget": "Core#setAspectMetaTarget",
          "this.delAspectMetaTarget": "Core#delAspectMetaTarget",
          "this.delAspectMeta": "Core#delAspectMeta",
          "this.getMetaType": "Core#getMetaType",
          "this.getBaseType": "Core#getBaseType",
          "this.isInstanceOf": "Core#isInstanceOf",
          "this.generateTreeDiff": "Core#generateTreeDiff",
          "this.applyTreeDiff": "Core#applyTreeDiff",
          "this.tryToConcatChanges": "Core#tryToConcatChanges",
          "this.applyResolution": "Core#applyResolution",
          "this.isAbstract": "Core#isAbstract",
          "this.isConnection": "Core#isConnection",
          "this.getValidChildrenMetaNodes": "Core#getValidChildrenMetaNodes",
          "this.getValidSetElementsMetaNodes": "Core#getValidSetElementsMetaNodes",
          "this.getAllMetaNodes": "Core#getAllMetaNodes",
          "this.isMetaNode": "Core#isMetaNode",
          "this.isFullyOverriddenMember": "Core#isFullyOverriddenMember",
          "this.getMixinErrors": "Core#getMixinErrors",
          "this.getMixinPaths": "Core#getMixinPaths",
          "this.getMixinNodes": "Core#getMixinNodes",
          "this.delMixin": "Core#delMixin",
          "this.addMixin": "Core#addMixin",
          "this.clearMixins": "Core#clearMixins",
          "this.getBaseTypes": "Core#getBaseTypes",
          "this.canSetAsMixin": "Core#canSetAsMixin",
          "this.addLibrary": "Core#addLibrary",
          "this.updateLibrary": "Core#updateLibrary",
          "this.getLibraryNames": "Core#getLibraryNames",
          "this.getFCO": "Core#getFCO",
          "this.isLibraryRoot": "Core#isLibraryRoot",
          "this.isLibraryElement": "Core#isLibraryElement",
          "this.getNamespace": "Core#getNamespace",
          "this.getFullyQualifiedName": "Core#getFullyQualifiedName",
          "this.removeLibrary": "Core#removeLibrary",
          "this.getLibraryGuid": "Core#getLibraryGuid",
          "this.renameLibrary": "Core#renameLibrary",
          "this.getLibraryInfo": "Core#getLibraryInfo",
          "this.getLibraryRoot": "Core#getLibraryRoot",
          "this.getLibraryMetaNodes": "Core#getLibraryMetaNodes",
          "this.traverse": "Core#traverse",
          "this.getClosureInformation": "Core#getClosureInformation",
          "this.importClosure": "Core#importClosure",
          "this.getInstancePaths": "Core#getInstancePaths",
          "this.loadInstances": "Core#loadInstances",
          "this.loadMembers": "Core#loadMembers",
          "this.loadOwnMembers": "Core#loadOwnMembers",
          "this.renamePointer": "Core#renamePointer",
          "this.renameAttribute": "Core#renameAttribute",
          "this.renameRegistry": "Core#renameRegistry",
          "this.renameSet": "Core#renameSet",
          "this.getAttributeDefinitionOwner": "Core#getAttributeDefinitionOwner",
          "this.getPointerDefinitionInfo": "Core#getPointerDefinitionInfo",
          "this.getSetDefinitionInfo": "Core#getSetDefinitionInfo",
          "this.getChildDefinitionInfo": "Core#getChildDefinitionInfo",
          "this.getAspectDefinitionInfo": "Core#getAspectDefinitionInfo",
          "this.getValidAspectTargetPaths": "Core#getValidAspectTargetPaths",
          "this.getOwnValidAspectTargetPaths": "Core#getOwnValidAspectTargetPaths",
          "this.getAspectDefinitionOwner": "Core#getAspectDefinitionOwner",
          "this.moveMember": "Core#moveMember",
          "this.renameAttributeMeta": "Core#renameAttributeMeta",
          "this.movePointerMetaTarget": "Core#movePointerMetaTarget",
          "this.moveAspectMetaTarget": "Core#moveAspectMetaTarget",
          "this.isValidAspectMemberOf": "Core#isValidAspectMemberOf",
          "this.getOwnValidTargetPaths": "Core#getOwnValidTargetPaths",
          "this.getValidTargetPaths": "Core#getValidTargetPaths",
          "this.isValidNewChild": "Core#isValidNewChild",
          "this.CONSTANTS": "Core#CONSTANTS"
        }
      },
      "params": [
        {
          "type": {
            "names": [
              "ProjectInterface"
            ]
          },
          "description": "project connected to storage",
          "name": "project"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "contains logging information",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "gmeLogger",
          "name": "options.logger"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "gmeConfig",
          "name": "options.globConf"
        }
      ],
      "alias": "Core",
      "kind": "class",
      "name": "Core",
      "longname": "Core",
      "scope": "global",
      "___id": "T000002R000057",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the parent of the node.\r\n         * @param {module:Core~Node} node - the node in question\r\n         *\r\n         * @return {module:Core~Node|null} Returns the parent of the node or NULL if it has no parent.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          13333,
          13461
        ],
        "filename": "core.js",
        "lineno": 391,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100000725",
          "name": "this.getParent",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Returns the parent of the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "module:Core~Node",
              "null"
            ]
          },
          "description": "Returns the parent of the node or NULL if it has no parent."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getParent",
      "longname": "Core#getParent",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000063",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the common parent node of all supplied nodes.\r\n         * @param {...module:Core~Node} nodes - a variable number of nodes to compare\r\n         *\r\n         * @return {module:Core~Node|null} The common base or null if no nodes were passed.\r\n         * @example\r\n         * core.getCommonParent(node1, node2, node3);\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          14037,
          14594
        ],
        "filename": "core.js",
        "lineno": 407,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100000744",
          "name": "this.getCommonParent",
          "type": "FunctionExpression",
          "paramnames": []
        },
        "vars": {
          "nodesArr": "Core#getCommonParent~nodesArr",
          "result": "module:Core~result",
          "i": "module:Core~i",
          "": null
        }
      },
      "description": "Returns the common parent node of all supplied nodes.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "variable": true,
          "description": "a variable number of nodes to compare",
          "name": "nodes"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "module:Core~Node",
              "null"
            ]
          },
          "description": "The common base or null if no nodes were passed."
        }
      ],
      "examples": [
        "core.getCommonParent(node1, node2, node3);"
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getCommonParent",
      "longname": "Core#getCommonParent",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000064",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the parent-relative identifier of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string|null} Returns the last segment of the node path.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          15068,
          15194
        ],
        "filename": "core.js",
        "lineno": 434,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100000827",
          "name": "this.getRelid",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Returns the parent-relative identifier of the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string",
              "null"
            ]
          },
          "description": "Returns the last segment of the node path."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getRelid",
      "longname": "Core#getRelid",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000072",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the root node of the containment tree that node is part of.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {module:Core~Node} Returns the root of the containment hierarchy (it can be the node itself).\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          15721,
          15845
        ],
        "filename": "core.js",
        "lineno": 449,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100000846",
          "name": "this.getRoot",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Returns the root node of the containment tree that node is part of.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "Returns the root of the containment hierarchy (it can be the node itself)."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getRoot",
      "longname": "Core#getRoot",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000073",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the complete path of the node in the containment hierarchy.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string} Returns a path string where each portion is a relative id and they are separated by '/'.\r\n         * The path can be empty as well if the node in question is the  root itself, otherwise it should be a chain\r\n         * of relative ids from the root of the containment hierarchy.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          16566,
          16690
        ],
        "filename": "core.js",
        "lineno": 466,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100000865",
          "name": "this.getPath",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Returns the complete path of the node in the containment hierarchy.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns a path string where each portion is a relative id and they are separated by '/'.\rThe path can be empty as well if the node in question is the  root itself, otherwise it should be a chain\rof relative ids from the root of the containment hierarchy."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getPath",
      "longname": "Core#getPath",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000074",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Retrieves the child of the input node at the given relative id. It is not an asynchronous load\r\n         * and it automatically creates the child under the given relative id if no child was there beforehand.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} relativeId - the relative id which our child in question has.\r\n         *\r\n         * @return {module:Core~Node} Return an empty node if it was created as a result of the function or\r\n         * return the already existing and loaded node if it found.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          17511,
          17722
        ],
        "filename": "core.js",
        "lineno": 484,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100000884",
          "name": "this.getChild",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "relativeId"
          ]
        }
      },
      "description": "Retrieves the child of the input node at the given relative id. It is not an asynchronous load\rand it automatically creates the child under the given relative id if no child was there beforehand.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the relative id which our child in question has.",
          "name": "relativeId"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "Return an empty node if it was created as a result of the function or\rreturn the already existing and loaded node if it found."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getChild",
      "longname": "Core#getChild",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000075",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Checks if the node in question has some actual data.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {bool} Returns true if the node is 'empty' meaning that it is not reserved by real data.\r\n         * Returns false if the node is exists and have some meaningful value.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          18309,
          18433
        ],
        "filename": "core.js",
        "lineno": 501,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100000911",
          "name": "this.isEmpty",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Checks if the node in question has some actual data.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "bool"
            ]
          },
          "description": "Returns true if the node is 'empty' meaning that it is not reserved by real data.\rReturns false if the node is exists and have some meaningful value."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "isEmpty",
      "longname": "Core#isEmpty",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000076",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the calculated hash and database id of the data for the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {module:Core~ObjectHash} Returns the hash value of the data for the given node.\r\n         * An empty string is returned when the node was mutated and not persisted.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          19033,
          19157
        ],
        "filename": "core.js",
        "lineno": 517,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100000930",
          "name": "this.getHash",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Returns the calculated hash and database id of the data for the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "module:Core~ObjectHash"
            ]
          },
          "description": "Returns the hash value of the data for the given node.\rAn empty string is returned when the node was mutated and not persisted."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getHash",
      "longname": "Core#getHash",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000077",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Persists the changes made in memory and computed the data blobs that needs to be saved into the database\r\n         * to make the change and allow other users to see the new state of the project.\r\n         * @param {module:Core~Node} node - some node element of the modified containment hierarchy (usually the root).\r\n         *\r\n         * @return {module:Core~GmePersisted} The function returns an object which collects all the changes\r\n         * on data level and necessary to update the database on server side. Keys of the returned object are 'rootHash'\r\n         * and 'objects'. The values of these should be passed to project.makeCommit.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          20069,
          20193
        ],
        "filename": "core.js",
        "lineno": 535,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100000949",
          "name": "this.persist",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Persists the changes made in memory and computed the data blobs that needs to be saved into the database\rto make the change and allow other users to see the new state of the project.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "some node element of the modified containment hierarchy (usually the root).",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "module:Core~GmePersisted"
            ]
          },
          "description": "The function returns an object which collects all the changes\ron data level and necessary to update the database on server side. Keys of the returned object are 'rootHash'\rand 'objects'. The values of these should be passed to project.makeCommit."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "persist",
      "longname": "Core#persist",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000078",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Loads the data object with the given hash and makes it a root of a containment hierarchy.\r\n         * @param {module:Core~ObjectHash} hash - the hash of the data object we like to load as root.\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreInternalError|null} callback.error - the result of the execution\r\n         * @param {module:Core~Node} callback.node - the resulting root node\r\n         *\r\n         * @return {external:Promise} If no callback is given, the result will be provided in\r\n         * a promiselike manner.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */",
      "meta": {
        "range": [
          20935,
          21281
        ],
        "filename": "core.js",
        "lineno": 553,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100000968",
          "name": "this.loadRoot",
          "type": "FunctionExpression",
          "paramnames": [
            "hash",
            "callback"
          ]
        },
        "vars": {
          "error": "module:Core~error"
        }
      },
      "description": "Loads the data object with the given hash and makes it a root of a containment hierarchy.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~ObjectHash"
            ]
          },
          "description": "the hash of the data object we like to load as root.",
          "name": "hash"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "Error",
              "CoreIllegalArgumentError",
              "CoreInternalError",
              "null"
            ]
          },
          "description": "the result of the execution",
          "name": "callback.error"
        },
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the resulting root node",
          "name": "callback.node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "external:Promise"
            ]
          },
          "description": "If no callback is given, the result will be provided in\ra promiselike manner."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        }
      ],
      "name": "loadRoot",
      "longname": "Core#loadRoot",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000079",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Loads the child of the given parent pointed by the relative id. Behind the scenes, it means\r\n         * that it actually loads the data pointed by a hash stored inside the parent under the given id\r\n         * and wraps it in a node object which will be connected to the parent as a child in the containment\r\n         * hierarchy. If there is no such relative id reserved, the call will return with null.\r\n         * @param {module:Core~Node} parent - the container node in question.\r\n         * @param {string} relativeId - the relative id of the child in question.\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreInternalError|null} callback.error - the result of the execution\r\n         * @param {module:Core~Node} callback.node - the resulting child\r\n         *\r\n         * @return {external:Promise} If no callback is given, the result will be provided in a promise.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */",
      "meta": {
        "range": [
          22369,
          22825
        ],
        "filename": "core.js",
        "lineno": 581,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100001010",
          "name": "this.loadChild",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "relativeId",
            "callback"
          ]
        },
        "vars": {
          "error": "module:Core~error"
        }
      },
      "description": "Loads the child of the given parent pointed by the relative id. Behind the scenes, it means\rthat it actually loads the data pointed by a hash stored inside the parent under the given id\rand wraps it in a node object which will be connected to the parent as a child in the containment\rhierarchy. If there is no such relative id reserved, the call will return with null.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the container node in question.",
          "name": "parent"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the relative id of the child in question.",
          "name": "relativeId"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "Error",
              "CoreIllegalArgumentError",
              "CoreInternalError",
              "null"
            ]
          },
          "description": "the result of the execution",
          "name": "callback.error"
        },
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the resulting child",
          "name": "callback.node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "external:Promise"
            ]
          },
          "description": "If no callback is given, the result will be provided in a promise."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        }
      ],
      "name": "loadChild",
      "longname": "Core#loadChild",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000082",
      "___s": true
    },
    {
      "comment": "/**\r\n         * From the given starting node, it loads the path given as a series of relative ids (separated by '/')\r\n         * and returns the node it finds at the ends of the path. If there is no node, the function will return null.\r\n         * @param {module:Core~Node} node - the starting node of our search.\r\n         * @param {string} relativePath - the relative path - built by relative ids - of the node in question.\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreInternalError|null} callback.error - the result of the execution\r\n         * @param {module:Core~Node} callback.node - the resulting node\r\n         *\r\n         * @return {external:Promise} If no callback is given, the result will be provided in a promise.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */",
      "meta": {
        "range": [
          23755,
          24211
        ],
        "filename": "core.js",
        "lineno": 608,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100001065",
          "name": "this.loadByPath",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "relativePath",
            "callback"
          ]
        },
        "vars": {
          "error": "module:Core~error"
        }
      },
      "description": "From the given starting node, it loads the path given as a series of relative ids (separated by '/')\rand returns the node it finds at the ends of the path. If there is no node, the function will return null.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the starting node of our search.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the relative path - built by relative ids - of the node in question.",
          "name": "relativePath"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "Error",
              "CoreIllegalArgumentError",
              "CoreInternalError",
              "null"
            ]
          },
          "description": "the result of the execution",
          "name": "callback.error"
        },
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the resulting node",
          "name": "callback.node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "external:Promise"
            ]
          },
          "description": "If no callback is given, the result will be provided in a promise."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        }
      ],
      "name": "loadByPath",
      "longname": "Core#loadByPath",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000086",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Loads all the children of the given parent. As it first checks the already reserved relative ids of\r\n         * the parent, it only loads the already existing children (so no on-demand empty node creation).\r\n         * @param {module:Core~Node} node - the container node in question.\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreInternalError|null} callback.error - the result of the execution\r\n         * @param {module:Core~Node[]} callback.children - the resulting children\r\n         *\r\n         * @return {external:Promise} If no callback is given, the result will be provided in a promise.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */",
      "meta": {
        "range": [
          25025,
          25379
        ],
        "filename": "core.js",
        "lineno": 634,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100001119",
          "name": "this.loadChildren",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "callback"
          ]
        },
        "vars": {
          "error": "module:Core~error"
        }
      },
      "description": "Loads all the children of the given parent. As it first checks the already reserved relative ids of\rthe parent, it only loads the already existing children (so no on-demand empty node creation).",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the container node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "Error",
              "CoreIllegalArgumentError",
              "CoreInternalError",
              "null"
            ]
          },
          "description": "the result of the execution",
          "name": "callback.error"
        },
        {
          "type": {
            "names": [
              "Array.<module:Core~Node>"
            ]
          },
          "description": "the resulting children",
          "name": "callback.children"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "external:Promise"
            ]
          },
          "description": "If no callback is given, the result will be provided in a promise."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        }
      ],
      "name": "loadChildren",
      "longname": "Core#loadChildren",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000090",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Loads all the children of the given parent that has some data and not just inherited. As it first checks\r\n         * the already reserved relative ids of the parent, it only loads the already existing children\r\n         * (so no on-demand empty node creation).\r\n         * @param {module:Core~Node} node - the container node in question.\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreInternalError|null} callback.error - the result of the execution\r\n         * @param {module:Core~Node[]} callback.node - the resulting children\r\n         *\r\n         * @return {external:Promise} If no callback is given, the result will be provided in a promise.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */",
      "meta": {
        "range": [
          26243,
          26603
        ],
        "filename": "core.js",
        "lineno": 660,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100001161",
          "name": "this.loadOwnChildren",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "callback"
          ]
        },
        "vars": {
          "error": "module:Core~error"
        }
      },
      "description": "Loads all the children of the given parent that has some data and not just inherited. As it first checks\rthe already reserved relative ids of the parent, it only loads the already existing children\r(so no on-demand empty node creation).",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the container node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "Error",
              "CoreIllegalArgumentError",
              "CoreInternalError",
              "null"
            ]
          },
          "description": "the result of the execution",
          "name": "callback.error"
        },
        {
          "type": {
            "names": [
              "Array.<module:Core~Node>"
            ]
          },
          "description": "the resulting children",
          "name": "callback.node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "external:Promise"
            ]
          },
          "description": "If no callback is given, the result will be provided in a promise."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        }
      ],
      "name": "loadOwnChildren",
      "longname": "Core#loadOwnChildren",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000093",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Loads the target of the given pointer of the given node. In the callback the node can have three values:\r\n         * if the node is valid, then it is the defined target of a valid pointer,\r\n         * if the returned value is null, then it means that the pointer is defined, but has no real target,\r\n         * finally if the returned value is undefined than there is no such pointer defined for the given node.\r\n         * @param {module:Core~Node} node - the source node in question.\r\n         * @param {string} pointerName - the name of the pointer.\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreInternalError|null} callback.error - the result of the execution\r\n         * @param {module:Core~Node} callback.node - the resulting target\r\n         *\r\n         * @return {external:Promise} If no callback is given, the result will be provided in a promise.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */",
      "meta": {
        "range": [
          27678,
          28144
        ],
        "filename": "core.js",
        "lineno": 688,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100001203",
          "name": "this.loadPointer",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "pointerName",
            "callback"
          ]
        },
        "vars": {
          "error": "module:Core~error"
        }
      },
      "description": "Loads the target of the given pointer of the given node. In the callback the node can have three values:\rif the node is valid, then it is the defined target of a valid pointer,\rif the returned value is null, then it means that the pointer is defined, but has no real target,\rfinally if the returned value is undefined than there is no such pointer defined for the given node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the source node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the pointer.",
          "name": "pointerName"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "Error",
              "CoreIllegalArgumentError",
              "CoreInternalError",
              "null"
            ]
          },
          "description": "the result of the execution",
          "name": "callback.error"
        },
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the resulting target",
          "name": "callback.node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "external:Promise"
            ]
          },
          "description": "If no callback is given, the result will be provided in a promise."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        }
      ],
      "name": "loadPointer",
      "longname": "Core#loadPointer",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000096",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Loads all the source nodes that has such a pointer and its target is the given node.\r\n         * @param {module:Core~Node} node - the target node in question.\r\n         * @param {string} pointerName - the name of the pointer of the sources.\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreInternalError|null} callback.error - the result of the execution\r\n         * @param {module:Core~Node[]} callback.node - the resulting sources\r\n         *\r\n         * @return {external:Promise} If no callback is given, the result will be provided in a promise.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */",
      "meta": {
        "range": [
          28910,
          29380
        ],
        "filename": "core.js",
        "lineno": 715,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100001258",
          "name": "this.loadCollection",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "pointerName",
            "callback"
          ]
        },
        "vars": {
          "error": "module:Core~error"
        }
      },
      "description": "Loads all the source nodes that has such a pointer and its target is the given node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the target node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the pointer of the sources.",
          "name": "pointerName"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "Error",
              "CoreIllegalArgumentError",
              "CoreInternalError",
              "null"
            ]
          },
          "description": "the result of the execution",
          "name": "callback.error"
        },
        {
          "type": {
            "names": [
              "Array.<module:Core~Node>"
            ]
          },
          "description": "the resulting sources",
          "name": "callback.node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "external:Promise"
            ]
          },
          "description": "If no callback is given, the result will be provided in a promise."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        }
      ],
      "name": "loadCollection",
      "longname": "Core#loadCollection",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000100",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Loads a complete sub-tree of the containment hierarchy starting from the given node.\r\n         * @param {module:Core~Node} node - the node that is the root of the sub-tree in question.\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreInternalError|null} callback.error - the result of the execution\r\n         * @param {module:Core~Node[]} callback.nodes - the resulting sources\r\n         *\r\n         * @return {external:Promise} If no callback is given, the result will be provided in a promise.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */",
      "meta": {
        "range": [
          30091,
          30443
        ],
        "filename": "core.js",
        "lineno": 740,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100001313",
          "name": "this.loadSubTree",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "callback"
          ]
        },
        "vars": {
          "error": "module:Core~error"
        }
      },
      "description": "Loads a complete sub-tree of the containment hierarchy starting from the given node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node that is the root of the sub-tree in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "Error",
              "CoreIllegalArgumentError",
              "CoreInternalError",
              "null"
            ]
          },
          "description": "the result of the execution",
          "name": "callback.error"
        },
        {
          "type": {
            "names": [
              "Array.<module:Core~Node>"
            ]
          },
          "description": "the resulting sources",
          "name": "callback.nodes"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "external:Promise"
            ]
          },
          "description": "If no callback is given, the result will be provided in a promise."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        }
      ],
      "name": "loadSubTree",
      "longname": "Core#loadSubTree",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000104",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Loads a complete sub-tree of the containment hierarchy starting from the given node, but load only those\r\n         * children that has some additional data and not purely inherited.\r\n         * @param {module:Core~Node} node - the container node in question.\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreInternalError|null} callback.error - the result of the execution\r\n         * @param {module:Core~Node[]} callback.nodes - the resulting sources\r\n         *\r\n         * @return {external:Promise} If no callback is given, the result will be provided in a promise.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */",
      "meta": {
        "range": [
          31228,
          31586
        ],
        "filename": "core.js",
        "lineno": 765,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100001355",
          "name": "this.loadOwnSubTree",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "callback"
          ]
        },
        "vars": {
          "error": "module:Core~error"
        }
      },
      "description": "Loads a complete sub-tree of the containment hierarchy starting from the given node, but load only those\rchildren that has some additional data and not purely inherited.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the container node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "Error",
              "CoreIllegalArgumentError",
              "CoreInternalError",
              "null"
            ]
          },
          "description": "the result of the execution",
          "name": "callback.error"
        },
        {
          "type": {
            "names": [
              "Array.<module:Core~Node>"
            ]
          },
          "description": "the resulting sources",
          "name": "callback.nodes"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "external:Promise"
            ]
          },
          "description": "If no callback is given, the result will be provided in a promise."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        }
      ],
      "name": "loadOwnSubTree",
      "longname": "Core#loadOwnSubTree",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000107",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Loads a complete containment hierarchy using the data object - pointed by the given hash -\r\n         * as the root.\r\n         * @param {module:Core~ObjectHash} hash - hash of the root node.\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreInternalError|null} callback.error - the result of the execution.\r\n         * @param {module:Core~Node[]} callback.nodes - the resulting nodes.\r\n         *\r\n         * @return {external:Promise} If no callback is given, the result will be provided in a promise.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */",
      "meta": {
        "range": [
          32302,
          32648
        ],
        "filename": "core.js",
        "lineno": 790,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100001397",
          "name": "this.loadTree",
          "type": "FunctionExpression",
          "paramnames": [
            "hash",
            "callback"
          ]
        },
        "vars": {
          "error": "module:Core~error"
        }
      },
      "description": "Loads a complete containment hierarchy using the data object - pointed by the given hash -\ras the root.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~ObjectHash"
            ]
          },
          "description": "hash of the root node.",
          "name": "hash"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "Error",
              "CoreIllegalArgumentError",
              "CoreInternalError",
              "null"
            ]
          },
          "description": "the result of the execution.",
          "name": "callback.error"
        },
        {
          "type": {
            "names": [
              "Array.<module:Core~Node>"
            ]
          },
          "description": "the resulting nodes.",
          "name": "callback.nodes"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "external:Promise"
            ]
          },
          "description": "If no callback is given, the result will be provided in a promise."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        }
      ],
      "name": "loadTree",
      "longname": "Core#loadTree",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000110",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Collects the relative ids of all the children of the given node.\r\n         * @param {module:Core~Node} node - the container node in question.\r\n         *\r\n         * @return {string[]} The function returns an array of the relative ids.\r\n         */",
      "meta": {
        "range": [
          32935,
          33079
        ],
        "filename": "core.js",
        "lineno": 809,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100001439",
          "name": "this.getChildrenRelids",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Collects the relative ids of all the children of the given node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the container node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "The function returns an array of the relative ids."
        }
      ],
      "name": "getChildrenRelids",
      "longname": "Core#getChildrenRelids",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000113",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Collects the relative ids of all the children of the given node that has some data and not just inherited.\r\n         * N.B. Do not mutate the returned array!\r\n         * @param {module:Core~Node} node - the container node in question.\r\n         *\r\n         * @return {string[]} The function returns an array of the relative ids.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          33674,
          33824
        ],
        "filename": "core.js",
        "lineno": 825,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100001458",
          "name": "this.getOwnChildrenRelids",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Collects the relative ids of all the children of the given node that has some data and not just inherited.\rN.B. Do not mutate the returned array!",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the container node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "The function returns an array of the relative ids."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getOwnChildrenRelids",
      "longname": "Core#getOwnChildrenRelids",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000114",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Collects the paths of all the children of the given node.\r\n         * @param {module:Core~Node} node - the container node in question.\r\n         *\r\n         *@return {string[]} The function returns an array of the absolute paths of the children.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          34336,
          34478
        ],
        "filename": "core.js",
        "lineno": 840,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100001477",
          "name": "this.getChildrenPaths",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Collects the paths of all the children of the given node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the container node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "The function returns an array of the absolute paths of the children."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getChildrenPaths",
      "longname": "Core#getChildrenPaths",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000115",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Collects the paths of all the children of the given node that has some data as well and not just inherited.\r\n         * @param {module:Core~Node} parent - the container node in question.\r\n         *\r\n         *@return {string[]} The function returns an array of the absolute paths of the children.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          35042,
          35190
        ],
        "filename": "core.js",
        "lineno": 855,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100001496",
          "name": "this.getOwnChildrenPaths",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Collects the paths of all the children of the given node that has some data as well and not just inherited.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the container node in question.",
          "name": "parent"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "The function returns an array of the absolute paths of the children."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getOwnChildrenPaths",
      "longname": "Core#getOwnChildrenPaths",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000116",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Creates a node according to the given parameters.\r\n         * @param {object} [parameters] - the details of the creation.\r\n         * @param {module:Core~Node|null} [parameters.parent] - the parent of the node to be created.\r\n         * @param {module:Core~Node|null} [parameters.base] - the base of the node to be created.\r\n         * @param {string} [parameters.relid] - the relative id of the node to be created (if reserved, the function\r\n         * returns the node behind the relative id)\r\n         * @param {module:Core~GUID} [parameters.guid] - the GUID of the node to be created\r\n         *\r\n         *\r\n         * @return {module:Core~Node} The function returns the created node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          36242,
          37099
        ],
        "filename": "core.js",
        "lineno": 877,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100001515",
          "name": "this.createNode",
          "type": "FunctionExpression",
          "paramnames": [
            "parameters"
          ]
        }
      },
      "description": "Creates a node according to the given parameters.",
      "params": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "optional": true,
          "description": "the details of the creation.",
          "name": "parameters"
        },
        {
          "type": {
            "names": [
              "module:Core~Node",
              "null"
            ]
          },
          "optional": true,
          "description": "the parent of the node to be created.",
          "name": "parameters.parent"
        },
        {
          "type": {
            "names": [
              "module:Core~Node",
              "null"
            ]
          },
          "optional": true,
          "description": "the base of the node to be created.",
          "name": "parameters.base"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "description": "the relative id of the node to be created (if reserved, the function\rreturns the node behind the relative id)",
          "name": "parameters.relid"
        },
        {
          "type": {
            "names": [
              "module:Core~GUID"
            ]
          },
          "optional": true,
          "description": "the GUID of the node to be created",
          "name": "parameters.guid"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "The function returns the created node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "createNode",
      "longname": "Core#createNode",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000117",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Creates a child, with base as provided, inside the provided node.\r\n         * @param {module:Core~Node} node - the parent of the node to be created.\r\n         * @param {module:Core~Node} base - the base of the node to be created.\r\n         *\r\n         * @return {module:Core~Node} The function returns the created child node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          37789,
          37987
        ],
        "filename": "core.js",
        "lineno": 907,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100001610",
          "name": "this.createChild",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "base"
          ]
        }
      },
      "description": "Creates a child, with base as provided, inside the provided node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the parent of the node to be created.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the base of the node to be created.",
          "name": "base"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "The function returns the created child node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "createChild",
      "longname": "Core#createChild",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000118",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Removes a node from the containment hierarchy.\r\n         * @param {module:Core~Node} node - the node to be removed.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          38465,
          38769
        ],
        "filename": "core.js",
        "lineno": 922,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100001639",
          "name": "this.deleteNode",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Removes a node from the containment hierarchy.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node to be removed.",
          "name": "node"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "deleteNode",
      "longname": "Core#deleteNode",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000121",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Copies the given node into parent.\r\n         * @param {module:Core~Node} node - the node to be copied.\r\n         * @param {module:Core~Node} parent - the parent node of the copy.\r\n         *\r\n         * @return {module:Core~Node} The function returns the copied node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          39399,
          39584
        ],
        "filename": "core.js",
        "lineno": 942,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100001672",
          "name": "this.copyNode",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "parent"
          ]
        }
      },
      "description": "Copies the given node into parent.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node to be copied.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the parent node of the copy.",
          "name": "parent"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "The function returns the copied node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "copyNode",
      "longname": "Core#copyNode",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000122",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Copies the given nodes into parent.\r\n         * @param {module:Core~Node[]} nodes - the nodes to be copied.\r\n         * @param {module:Core~Node} parent - the parent node of the copy.\r\n         *\r\n         * @return {module:Core~Node[]} The function returns an array of the copied nodes. The order follows\r\n         * the order of originals.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          40288,
          40639
        ],
        "filename": "core.js",
        "lineno": 961,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100001698",
          "name": "this.copyNodes",
          "type": "FunctionExpression",
          "paramnames": [
            "nodes",
            "parent"
          ]
        },
        "vars": {
          "i": "module:Core~i"
        }
      },
      "description": "Copies the given nodes into parent.",
      "params": [
        {
          "type": {
            "names": [
              "Array.<module:Core~Node>"
            ]
          },
          "description": "the nodes to be copied.",
          "name": "nodes"
        },
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the parent node of the copy.",
          "name": "parent"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<module:Core~Node>"
            ]
          },
          "description": "The function returns an array of the copied nodes. The order follows\rthe order of originals."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "copyNodes",
      "longname": "Core#copyNodes",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000123",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Checks if parent can be the new parent of node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {module:Core~Node} parent - the new parent.\r\n         *\r\n         * @return {boolean} True if the supplied parent is a valid parent for the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          41185,
          41386
        ],
        "filename": "core.js",
        "lineno": 982,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100001752",
          "name": "this.isValidNewParent",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "parent"
          ]
        }
      },
      "description": "Checks if parent can be the new parent of node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the new parent.",
          "name": "parent"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "True if the supplied parent is a valid parent for the node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "isValidNewParent",
      "longname": "Core#isValidNewParent",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000127",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Moves the given node under the given parent.\r\n         * @param {module:Core~Node} node - the node to be moved.\r\n         * @param {module:Core~Node} parent - the parent node of the copy.\r\n         *\r\n         * @return {module:Core~Node} The function returns the node after the move.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          42033,
          42218
        ],
        "filename": "core.js",
        "lineno": 1000,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100001778",
          "name": "this.moveNode",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "parent"
          ]
        }
      },
      "description": "Moves the given node under the given parent.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node to be moved.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the parent node of the copy.",
          "name": "parent"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "The function returns the node after the move."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "moveNode",
      "longname": "Core#moveNode",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000128",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the names of the defined attributes of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} The function returns an array of the names of the attributes of the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          42725,
          42869
        ],
        "filename": "core.js",
        "lineno": 1016,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100001804",
          "name": "this.getAttributeNames",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Returns the names of the defined attributes of the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "The function returns an array of the names of the attributes of the node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getAttributeNames",
      "longname": "Core#getAttributeNames",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000129",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Retrieves the value of the given attribute of the given node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the attribute.\r\n         *\r\n         * @return {string|number|bool|object|undefined} The function returns the value of the attribute of the node.\r\n         * If the value is undefined that means the node do not have\r\n         * such attribute defined.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          43563,
          43777
        ],
        "filename": "core.js",
        "lineno": 1034,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100001823",
          "name": "this.getAttribute",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name"
          ]
        }
      },
      "description": "Retrieves the value of the given attribute of the given node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the attribute.",
          "name": "name"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string",
              "number",
              "bool",
              "object",
              "undefined"
            ]
          },
          "description": "The function returns the value of the attribute of the node.\rIf the value is undefined that means the node do not have\rsuch attribute defined."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getAttribute",
      "longname": "Core#getAttribute",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000130",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Sets the value of the given attribute of the given node. It defines the attribute on demand, means that it\r\n         * will set the given attribute even if was ot defined for the node beforehand.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the attribute.\r\n         * @param {string|number|bool|object} value - the new of the attribute, undefined is not allowed.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          44571,
          44881
        ],
        "filename": "core.js",
        "lineno": 1052,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100001854",
          "name": "this.setAttribute",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name",
            "value"
          ]
        }
      },
      "description": "Sets the value of the given attribute of the given node. It defines the attribute on demand, means that it\rwill set the given attribute even if was ot defined for the node beforehand.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the attribute.",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "string",
              "number",
              "bool",
              "object"
            ]
          },
          "description": "the new of the attribute, undefined is not allowed.",
          "name": "value"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "setAttribute",
      "longname": "Core#setAttribute",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000131",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Removes the given attributes from the given node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the attribute.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          45422,
          45617
        ],
        "filename": "core.js",
        "lineno": 1070,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100001894",
          "name": "this.delAttribute",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name"
          ]
        }
      },
      "description": "Removes the given attributes from the given node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the attribute.",
          "name": "name"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "delAttribute",
      "longname": "Core#delAttribute",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000132",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the names of the defined registry entries of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} The function returns an array of the names of the registry entries of the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          46136,
          46278
        ],
        "filename": "core.js",
        "lineno": 1086,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100001921",
          "name": "this.getRegistryNames",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Returns the names of the defined registry entries of the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "The function returns an array of the names of the registry entries of the node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getRegistryNames",
      "longname": "Core#getRegistryNames",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000133",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Retrieves the value of the given registry entry of the given node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the registry entry.\r\n         *\r\n         * @return {string|number|bool|object|undefined} The function returns the value of the registry entry\r\n         * of the node. The value can be an object or any primitive type. If the value is undefined that means\r\n         * the node do not have such attribute defined.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          47037,
          47249
        ],
        "filename": "core.js",
        "lineno": 1104,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100001940",
          "name": "this.getRegistry",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name"
          ]
        }
      },
      "description": "Retrieves the value of the given registry entry of the given node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the registry entry.",
          "name": "name"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string",
              "number",
              "bool",
              "object",
              "undefined"
            ]
          },
          "description": "The function returns the value of the registry entry\rof the node. The value can be an object or any primitive type. If the value is undefined that means\rthe node do not have such attribute defined."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getRegistry",
      "longname": "Core#getRegistry",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000134",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Sets the value of the given registry entry of the given node. It defines the registry entry on demand,\r\n         * means that it will set the given registry entry even if was ot defined for the node beforehand.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the registry entry.\r\n         * @param {string|number|bool|object} value - the new of the registry entry. Can be any primitive\r\n         * type or object. Undefined is not allowed.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          48117,
          48425
        ],
        "filename": "core.js",
        "lineno": 1123,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100001971",
          "name": "this.setRegistry",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name",
            "value"
          ]
        }
      },
      "description": "Sets the value of the given registry entry of the given node. It defines the registry entry on demand,\rmeans that it will set the given registry entry even if was ot defined for the node beforehand.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the registry entry.",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "string",
              "number",
              "bool",
              "object"
            ]
          },
          "description": "the new of the registry entry. Can be any primitive\rtype or object. Undefined is not allowed.",
          "name": "value"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "setRegistry",
      "longname": "Core#setRegistry",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000135",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Removes the given registry entry from the given node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the registry entry.\r\n         *\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          48987,
          49180
        ],
        "filename": "core.js",
        "lineno": 1142,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100002011",
          "name": "this.delRegistry",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name"
          ]
        }
      },
      "description": "Removes the given registry entry from the given node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the registry entry.",
          "name": "name"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "delRegistry",
      "longname": "Core#delRegistry",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000136",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Retrieves a list of the defined pointer names of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} The function returns an array of the names of the pointers of the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          49687,
          49827
        ],
        "filename": "core.js",
        "lineno": 1158,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100002038",
          "name": "this.getPointerNames",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Retrieves a list of the defined pointer names of the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "The function returns an array of the names of the pointers of the node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getPointerNames",
      "longname": "Core#getPointerNames",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000137",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Retrieves the path of the target of the given pointer of the given node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the pointer in question.\r\n         *\r\n         * @return {string|null|undefined} The function returns the absolute path of the target node\r\n         * if there is a valid target. It returns null if though the pointer is defined it does not have any\r\n         * valid target. Finally, it return undefined if there is no pointer defined for the node under the given name.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          50650,
          50849
        ],
        "filename": "core.js",
        "lineno": 1176,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100002057",
          "name": "this.getPointerPath",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name"
          ]
        }
      },
      "description": "Retrieves the path of the target of the given pointer of the given node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the pointer in question.",
          "name": "name"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string",
              "null",
              "undefined"
            ]
          },
          "description": "The function returns the absolute path of the target node\rif there is a valid target. It returns null if though the pointer is defined it does not have any\rvalid target. Finally, it return undefined if there is no pointer defined for the node under the given name."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getPointerPath",
      "longname": "Core#getPointerPath",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000138",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Removes the pointer from the node. (Aliased deletePointer.)\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the pointer in question.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          51410,
          51604
        ],
        "filename": "core.js",
        "lineno": 1192,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100002084",
          "name": "this.delPointer",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name"
          ]
        }
      },
      "description": "Removes the pointer from the node. (Aliased deletePointer.)",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the pointer in question.",
          "name": "name"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "delPointer",
      "longname": "Core#delPointer",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000139",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Removes the pointer from the node. (Aliased delPointer.)\r\n         * @function\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the pointer in question.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          52184,
          52220
        ],
        "filename": "core.js",
        "lineno": 1209,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100002111",
          "name": "this.deletePointer",
          "type": "MemberExpression",
          "value": "this.delPointer",
          "paramnames": []
        }
      },
      "description": "Removes the pointer from the node. (Aliased delPointer.)",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the pointer in question.",
          "name": "name"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "deletePointer",
      "longname": "Core#deletePointer",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000140",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Sets the target of the pointer of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the pointer in question.\r\n         * @param {module:Core~Node|null} target - the new target of the pointer.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          52848,
          53212
        ],
        "filename": "core.js",
        "lineno": 1221,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100002119",
          "name": "this.setPointer",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name",
            "target"
          ]
        }
      },
      "description": "Sets the target of the pointer of the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the pointer in question.",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "module:Core~Node",
              "null"
            ]
          },
          "description": "the new target of the pointer.",
          "name": "target"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "setPointer",
      "longname": "Core#setPointer",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000141",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Retrieves a list of the defined pointer names that has the node as target.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} The function returns an array of the names of the pointers pointing to the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          53744,
          53890
        ],
        "filename": "core.js",
        "lineno": 1241,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100002164",
          "name": "this.getCollectionNames",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Retrieves a list of the defined pointer names that has the node as target.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "The function returns an array of the names of the pointers pointing to the node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getCollectionNames",
      "longname": "Core#getCollectionNames",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000142",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Retrieves a list of absolute paths of nodes that has a given pointer which points to the given node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the pointer.\r\n         *\r\n         * @return {string[]} The function returns an array of absolute paths of nodes that\r\n         * has the pointer pointing to the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          54539,
          54746
        ],
        "filename": "core.js",
        "lineno": 1258,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100002183",
          "name": "this.getCollectionPaths",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name"
          ]
        }
      },
      "description": "Retrieves a list of absolute paths of nodes that has a given pointer which points to the given node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the pointer.",
          "name": "name"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "The function returns an array of absolute paths of nodes that\rhas the pointer pointing to the node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getCollectionPaths",
      "longname": "Core#getCollectionPaths",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000143",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Collects the data hash values of the children of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {Object<string, module:Core~ObjectHash>} The function returns a dictionary of\r\n         * {@link module:Core~ObjectHash} that stored in pair with the relative id of the corresponding\r\n         * child of the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          55384,
          55528
        ],
        "filename": "core.js",
        "lineno": 1276,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100002210",
          "name": "this.getChildrenHashes",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Collects the data hash values of the children of the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object.<string, module:Core~ObjectHash>"
            ]
          },
          "description": "The function returns a dictionary of\r{@link module:Core~ObjectHash} that stored in pair with the relative id of the corresponding\rchild of the node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getChildrenHashes",
      "longname": "Core#getChildrenHashes",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000144",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the base node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {module:Core~Node|null} Returns the base of the given node or null if there is no such node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          56009,
          56133
        ],
        "filename": "core.js",
        "lineno": 1291,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100002229",
          "name": "this.getBase",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Returns the base node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "module:Core~Node",
              "null"
            ]
          },
          "description": "Returns the base of the given node or null if there is no such node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getBase",
      "longname": "Core#getBase",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000145",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the common base node of all supplied nodes.\r\n         * @param {...module:Core~Node} nodes - a variable number of nodes to compare\r\n         *\r\n         * @return {module:Core~Node|null} The common base or null if e.g. the root node was passed.\r\n         * @example\r\n         * core.getCommonBase(node1, node2, node3);\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          56714,
          57267
        ],
        "filename": "core.js",
        "lineno": 1307,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100002248",
          "name": "this.getCommonBase",
          "type": "FunctionExpression",
          "paramnames": []
        },
        "vars": {
          "nodesArr": "Core#getCommonBase~nodesArr",
          "result": "module:Core~result",
          "i": "module:Core~i",
          "": null
        }
      },
      "description": "Returns the common base node of all supplied nodes.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "variable": true,
          "description": "a variable number of nodes to compare",
          "name": "nodes"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "module:Core~Node",
              "null"
            ]
          },
          "description": "The common base or null if e.g. the root node was passed."
        }
      ],
      "examples": [
        "core.getCommonBase(node1, node2, node3);"
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getCommonBase",
      "longname": "Core#getCommonBase",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000146",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the root of the inheritance chain of the given node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {module:Core~Node} Returns the root of the inheritance chain (usually the FCO).\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          57773,
          57905
        ],
        "filename": "core.js",
        "lineno": 1334,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100002331",
          "name": "this.getBaseRoot",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Returns the root of the inheritance chain of the given node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "Returns the root of the inheritance chain (usually the FCO)."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getBaseRoot",
      "longname": "Core#getBaseRoot",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000154",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the names of the attributes of the node that have been first defined for the node and not for its\r\n         * bases.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} The function returns an array of the names of the own attributes of the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          58484,
          58634
        ],
        "filename": "core.js",
        "lineno": 1350,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100002350",
          "name": "this.getOwnAttributeNames",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Returns the names of the attributes of the node that have been first defined for the node and not for its\rbases.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "The function returns an array of the names of the own attributes of the node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getOwnAttributeNames",
      "longname": "Core#getOwnAttributeNames",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000155",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the names of the registry enrties of the node that have been first defined for the node\r\n         * and not for its bases.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} The function returns an array of the names of the own registry entries of the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          59225,
          59373
        ],
        "filename": "core.js",
        "lineno": 1366,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100002369",
          "name": "this.getOwnRegistryNames",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Returns the names of the registry enrties of the node that have been first defined for the node\rand not for its bases.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "The function returns an array of the names of the own registry entries of the node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getOwnRegistryNames",
      "longname": "Core#getOwnRegistryNames",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000156",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the value of the attribute defined for the given node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the attribute.\r\n         *\r\n         * @return {string|number|bool|object|undefined} Returns the value of the attribute defined specifically for\r\n         * the node. If undefined then it means that there is no such attribute defined directly for the node, meaning\r\n         * that it either inherits some value or there is no such attribute at all.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          60166,
          60386
        ],
        "filename": "core.js",
        "lineno": 1384,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100002388",
          "name": "this.getOwnAttribute",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name"
          ]
        }
      },
      "description": "Returns the value of the attribute defined for the given node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the attribute.",
          "name": "name"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string",
              "number",
              "bool",
              "object",
              "undefined"
            ]
          },
          "description": "Returns the value of the attribute defined specifically for\rthe node. If undefined then it means that there is no such attribute defined directly for the node, meaning\rthat it either inherits some value or there is no such attribute at all."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getOwnAttribute",
      "longname": "Core#getOwnAttribute",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000157",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the value of the registry entry defined for the given node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the registry entry.\r\n         *\r\n         * @return {string|number|bool|object|undefined} Returns the value of the registry entry defined specifically\r\n         * for the node. If undefined then it means that there is no such registry entry defined directly for the node,\r\n         * meaning that it either inherits some value or there is no such registry entry at all.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          61204,
          61422
        ],
        "filename": "core.js",
        "lineno": 1403,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100002419",
          "name": "this.getOwnRegistry",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name"
          ]
        }
      },
      "description": "Returns the value of the registry entry defined for the given node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the registry entry.",
          "name": "name"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string",
              "number",
              "bool",
              "object",
              "undefined"
            ]
          },
          "description": "Returns the value of the registry entry defined specifically\rfor the node. If undefined then it means that there is no such registry entry defined directly for the node,\rmeaning that it either inherits some value or there is no such registry entry at all."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getOwnRegistry",
      "longname": "Core#getOwnRegistry",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000158",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the list of the names of the pointers that were defined specifically for the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} Returns an array of names of pointers defined specifically for the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          61962,
          62108
        ],
        "filename": "core.js",
        "lineno": 1419,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100002450",
          "name": "this.getOwnPointerNames",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Returns the list of the names of the pointers that were defined specifically for the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "Returns an array of names of pointers defined specifically for the node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getOwnPointerNames",
      "longname": "Core#getOwnPointerNames",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000159",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the absolute path of the target of the pointer specifically defined for the node.\r\n         * @param {module:Core~Node} node - the node in question\r\n         * @param {string} name - the name of the pointer\r\n         *\r\n         * @return {string|null|undefined} Returns the absolute path. If the path is null, then it means that\r\n         * 'no-target' was defined specifically for this node for the pointer. If undefined it means that the node\r\n         * either inherits the target of the pointer or there is no pointer defined at all.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          62921,
          63126
        ],
        "filename": "core.js",
        "lineno": 1437,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100002469",
          "name": "this.getOwnPointerPath",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name"
          ]
        }
      },
      "description": "Returns the absolute path of the target of the pointer specifically defined for the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the pointer",
          "name": "name"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string",
              "null",
              "undefined"
            ]
          },
          "description": "Returns the absolute path. If the path is null, then it means that\r'no-target' was defined specifically for this node for the pointer. If undefined it means that the node\reither inherits the target of the pointer or there is no pointer defined at all."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getOwnPointerPath",
      "longname": "Core#getOwnPointerPath",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000160",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Checks if base can be the new base of node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {module:Core~Node|null|undefined} base - the new base.\r\n         *\r\n         * @return {boolean} True if the supplied base is a valid base for the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          63675,
          63917
        ],
        "filename": "core.js",
        "lineno": 1454,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100002496",
          "name": "this.isValidNewBase",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "base"
          ]
        }
      },
      "description": "Checks if base can be the new base of node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "module:Core~Node",
              "null",
              "undefined"
            ]
          },
          "description": "the new base.",
          "name": "base"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "True if the supplied base is a valid base for the node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "isValidNewBase",
      "longname": "Core#isValidNewBase",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000161",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Sets the base node of the given node. The function doesn't touches the properties or the children of the node\r\n         * so it can cause META rule violations that needs to be corrected manually.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {module:Core~Node|null} base - the new base.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          64606,
          64827
        ],
        "filename": "core.js",
        "lineno": 1473,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100002527",
          "name": "this.setBase",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "base"
          ]
        }
      },
      "description": "Sets the base node of the given node. The function doesn't touches the properties or the children of the node\rso it can cause META rule violations that needs to be corrected manually.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "module:Core~Node",
              "null"
            ]
          },
          "description": "the new base.",
          "name": "base"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "setBase",
      "longname": "Core#setBase",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000162",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the root of the inheritance chain (cannot be the node itself).\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {module:Core~Node|null} Returns the root of the inheritance chain of the node. If returns null,\r\n         * that means the node in question is the root of the chain.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          65429,
          65561
        ],
        "filename": "core.js",
        "lineno": 1492,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100002558",
          "name": "this.getTypeRoot",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Returns the root of the inheritance chain (cannot be the node itself).",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "module:Core~Node",
              "null"
            ]
          },
          "description": "Returns the root of the inheritance chain of the node. If returns null,\rthat means the node in question is the root of the chain."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getTypeRoot",
      "longname": "Core#getTypeRoot",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000163",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the names of the sets of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} Returns an array of set names that the node has.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          66029,
          66161
        ],
        "filename": "core.js",
        "lineno": 1507,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100002577",
          "name": "this.getSetNames",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Returns the names of the sets of the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "Returns an array of set names that the node has."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getSetNames",
      "longname": "Core#getSetNames",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000164",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the names of the sets created specifically at the node.\r\n         * N.B. When adding a member to a set of a node, the set is automatically created at the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} Returns an array of set names that were specifically created at the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          66779,
          66917
        ],
        "filename": "core.js",
        "lineno": 1523,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100002596",
          "name": "this.getOwnSetNames",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Returns the names of the sets created specifically at the node.\rN.B. When adding a member to a set of a node, the set is automatically created at the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "Returns an array of set names that were specifically created at the node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getOwnSetNames",
      "longname": "Core#getOwnSetNames",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000165",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Creates a set for the node.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} name - the name of the set.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          67430,
          67668
        ],
        "filename": "core.js",
        "lineno": 1538,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100002615",
          "name": "this.createSet",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name"
          ]
        }
      },
      "description": "Creates a set for the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the owner of the set.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set.",
          "name": "name"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "createSet",
      "longname": "Core#createSet",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000166",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Removes a set from the node. (Aliased deleteSet.)\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} name - the name of the set.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          68203,
          68380
        ],
        "filename": "core.js",
        "lineno": 1554,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100002647",
          "name": "this.delSet",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name"
          ]
        }
      },
      "description": "Removes a set from the node. (Aliased deleteSet.)",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the owner of the set.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set.",
          "name": "name"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "delSet",
      "longname": "Core#delSet",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000167",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Removes a set from the node. (Aliased delSet.)\r\n         * @function\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} name - the name of the set.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          68934,
          68962
        ],
        "filename": "core.js",
        "lineno": 1571,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100002673",
          "name": "this.deleteSet",
          "type": "MemberExpression",
          "value": "this.delSet",
          "paramnames": []
        }
      },
      "description": "Removes a set from the node. (Aliased delSet.)",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the owner of the set.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set.",
          "name": "name"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "deleteSet",
      "longname": "Core#deleteSet",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000168",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Return the names of the attribute entries for the set.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} name - the name of the set.\r\n         *\r\n         * @return {string[]} Returns the array of names of attribute entries in the set.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          69605,
          70025
        ],
        "filename": "core.js",
        "lineno": 1584,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100002681",
          "name": "this.getSetAttributeNames",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name"
          ]
        },
        "vars": {
          "names": "Core#getSetAttributeNames~names"
        }
      },
      "description": "Return the names of the attribute entries for the set.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the owner of the set.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set.",
          "name": "name"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "Returns the array of names of attribute entries in the set."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getSetAttributeNames",
      "longname": "Core#getSetAttributeNames",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000169",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Return the names of the attribute entries specifically set for the set at the node.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} name - the name of the set.\r\n         *\r\n         * @return {string[]} Returns the array of names of attribute entries defined in the set at the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          70717,
          71143
        ],
        "filename": "core.js",
        "lineno": 1606,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100002730",
          "name": "this.getOwnSetAttributeNames",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name"
          ]
        },
        "vars": {
          "names": "Core#getOwnSetAttributeNames~names"
        }
      },
      "description": "Return the names of the attribute entries specifically set for the set at the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the owner of the set.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set.",
          "name": "name"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "Returns the array of names of attribute entries defined in the set at the node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getOwnSetAttributeNames",
      "longname": "Core#getOwnSetAttributeNames",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000171",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Get the value of the attribute entry in the set.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} setName - the name of the set.\r\n         * @param {string} attrName - the name of the attribute entry.\r\n         *\r\n         * @return {string|number|bool|object|undefined} Return the value of the attribute. If it is undefined,\r\n         * then there is no such attribute at the set.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          71933,
          72454
        ],
        "filename": "core.js",
        "lineno": 1630,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100002779",
          "name": "this.getSetAttribute",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "setName",
            "attrName"
          ]
        },
        "vars": {
          "names": "Core#getSetAttribute~names"
        }
      },
      "description": "Get the value of the attribute entry in the set.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the owner of the set.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set.",
          "name": "setName"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the attribute entry.",
          "name": "attrName"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string",
              "number",
              "bool",
              "object",
              "undefined"
            ]
          },
          "description": "Return the value of the attribute. If it is undefined,\rthen there is no such attribute at the set."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getSetAttribute",
      "longname": "Core#getSetAttribute",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000173",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Get the value of the attribute entry specifically set for the set at the node.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} setName - the name of the set.\r\n         * @param {string} attrName - the name of the attribute entry.\r\n         *\r\n         * @return {string|number|bool|object|undefined} Return the value of the attribute. If it is undefined,\r\n         * then there is no such attribute at the set.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          73274,
          73801
        ],
        "filename": "core.js",
        "lineno": 1655,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100002840",
          "name": "this.getOwnSetAttribute",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "setName",
            "attrName"
          ]
        },
        "vars": {
          "names": "Core#getOwnSetAttribute~names"
        }
      },
      "description": "Get the value of the attribute entry specifically set for the set at the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the owner of the set.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set.",
          "name": "setName"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the attribute entry.",
          "name": "attrName"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string",
              "number",
              "bool",
              "object",
              "undefined"
            ]
          },
          "description": "Return the value of the attribute. If it is undefined,\rthen there is no such attribute at the set."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getOwnSetAttribute",
      "longname": "Core#getOwnSetAttribute",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000175",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Sets the attribute entry value for the set at the node.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} setName - the name of the set.\r\n         * @param {string} attrName - the name of the attribute entry.\r\n         * @param {string|number|bool|object} value - the new value of the attribute.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          74504,
          75122
        ],
        "filename": "core.js",
        "lineno": 1678,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100002901",
          "name": "this.setSetAttribute",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "setName",
            "attrName",
            "value"
          ]
        },
        "vars": {
          "names": "Core#setSetAttribute~names"
        }
      },
      "description": "Sets the attribute entry value for the set at the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the owner of the set.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set.",
          "name": "setName"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the attribute entry.",
          "name": "attrName"
        },
        {
          "type": {
            "names": [
              "string",
              "number",
              "bool",
              "object"
            ]
          },
          "description": "the new value of the attribute.",
          "name": "value"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "setSetAttribute",
      "longname": "Core#setSetAttribute",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000177",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Removes the attribute entry for the set at the node.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} setName - the name of the set.\r\n         * @param {string} attrName - the name of the attribute entry.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          75735,
          76230
        ],
        "filename": "core.js",
        "lineno": 1702,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100002971",
          "name": "this.delSetAttribute",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "setName",
            "attrName"
          ]
        },
        "vars": {
          "names": "Core#delSetAttribute~names"
        }
      },
      "description": "Removes the attribute entry for the set at the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the owner of the set.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set.",
          "name": "setName"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the attribute entry.",
          "name": "attrName"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "delSetAttribute",
      "longname": "Core#delSetAttribute",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000179",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Return the names of the registry entries for the set.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} name - the name of the set.\r\n         *\r\n         * @return {string[]} Returns the array of names of registry entries in the set.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          76889,
          77307
        ],
        "filename": "core.js",
        "lineno": 1727,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100003028",
          "name": "this.getSetRegistryNames",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name"
          ]
        },
        "vars": {
          "names": "Core#getSetRegistryNames~names"
        }
      },
      "description": "Return the names of the registry entries for the set.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the owner of the set.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set.",
          "name": "name"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "Returns the array of names of registry entries in the set."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getSetRegistryNames",
      "longname": "Core#getSetRegistryNames",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000181",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Return the names of the registry entries specifically set for the set at the node.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} name - the name of the set.\r\n         *\r\n         * @return {string[]} Returns the array of names of registry entries defined in the set at the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          77997,
          78421
        ],
        "filename": "core.js",
        "lineno": 1749,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100003077",
          "name": "this.getOwnSetRegistryNames",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name"
          ]
        },
        "vars": {
          "names": "Core#getOwnSetRegistryNames~names"
        }
      },
      "description": "Return the names of the registry entries specifically set for the set at the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the owner of the set.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set.",
          "name": "name"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "Returns the array of names of registry entries defined in the set at the node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getOwnSetRegistryNames",
      "longname": "Core#getOwnSetRegistryNames",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000183",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Get the value of the registry entry in the set.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} setName - the name of the set.\r\n         * @param {string} regName - the name of the registry entry.\r\n         *\r\n         * @return {string|number|bool|object|undefined} Return the value of the registry. If it is undefined,\r\n         * then there is no such registry at the set.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          79206,
          79721
        ],
        "filename": "core.js",
        "lineno": 1773,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100003126",
          "name": "this.getSetRegistry",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "setName",
            "regName"
          ]
        },
        "vars": {
          "names": "Core#getSetRegistry~names"
        }
      },
      "description": "Get the value of the registry entry in the set.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the owner of the set.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set.",
          "name": "setName"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the registry entry.",
          "name": "regName"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string",
              "number",
              "bool",
              "object",
              "undefined"
            ]
          },
          "description": "Return the value of the registry. If it is undefined,\rthen there is no such registry at the set."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getSetRegistry",
      "longname": "Core#getSetRegistry",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000185",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Get the value of the registry entry specifically set for the set at the node.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} setName - the name of the set.\r\n         * @param {string} regName - the name of the registry entry.\r\n         *\r\n         * @return {string|number|bool|object|undefined} Return the value of the registry. If it is undefined,\r\n         * then there is no such registry at the set.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          80440,
          80961
        ],
        "filename": "core.js",
        "lineno": 1797,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100003187",
          "name": "this.getOwnSetRegistry",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "setName",
            "regName"
          ]
        },
        "vars": {
          "names": "Core#getOwnSetRegistry~names"
        }
      },
      "description": "Get the value of the registry entry specifically set for the set at the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the owner of the set.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set.",
          "name": "setName"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the registry entry.",
          "name": "regName"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string",
              "number",
              "bool",
              "object",
              "undefined"
            ]
          },
          "description": "Return the value of the registry. If it is undefined,\rthen there is no such registry at the set."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getOwnSetRegistry",
      "longname": "Core#getOwnSetRegistry",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000187",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Sets the registry entry value for the set at the node.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} setName - the name of the set.\r\n         * @param {string} regName - the name of the registry entry.\r\n         * @param {string|number|bool|object} value - the new value of the registry.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          81660,
          82270
        ],
        "filename": "core.js",
        "lineno": 1820,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100003248",
          "name": "this.setSetRegistry",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "setName",
            "regName",
            "value"
          ]
        },
        "vars": {
          "names": "Core#setSetRegistry~names"
        }
      },
      "description": "Sets the registry entry value for the set at the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the owner of the set.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set.",
          "name": "setName"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the registry entry.",
          "name": "regName"
        },
        {
          "type": {
            "names": [
              "string",
              "number",
              "bool",
              "object"
            ]
          },
          "description": "the new value of the registry.",
          "name": "value"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "setSetRegistry",
      "longname": "Core#setSetRegistry",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000189",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Removes the registry entry for the set at the node.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} setName - the name of the set.\r\n         * @param {string} regName - the name of the registry entry.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          82880,
          83369
        ],
        "filename": "core.js",
        "lineno": 1844,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100003318",
          "name": "this.delSetRegistry",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "setName",
            "regName"
          ]
        },
        "vars": {
          "names": "Core#delSetRegistry~names"
        }
      },
      "description": "Removes the registry entry for the set at the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the owner of the set.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set.",
          "name": "setName"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the registry entry.",
          "name": "regName"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "delSetRegistry",
      "longname": "Core#delSetRegistry",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000191",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the list of absolute paths of the members of the given set of the given node.\r\n         * @param {module:Core~Node} node - the set owner.\r\n         * @param {string} name - the name of the set.\r\n         *\r\n         * @return {string[]} Returns an array of absolute path strings of the member nodes of the set.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          84050,
          84502
        ],
        "filename": "core.js",
        "lineno": 1867,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100003375",
          "name": "this.getMemberPaths",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name"
          ]
        },
        "vars": {
          "names": "Core#getMemberPaths~names"
        }
      },
      "description": "Returns the list of absolute paths of the members of the given set of the given node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the set owner.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set.",
          "name": "name"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "Returns an array of absolute path strings of the member nodes of the set."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getMemberPaths",
      "longname": "Core#getMemberPaths",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000193",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the list of absolute paths of the members of the given set of the given node that not simply\r\n         * inherited.\r\n         * @param {module:Core~Node} node - the set owner.\r\n         * @param {string} name - the name of the set.\r\n         *\r\n         * @return {string[]} Returns an array of absolute path strings of the member nodes of the set that has\r\n         * information on the node's inheritance level.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          85286,
          85746
        ],
        "filename": "core.js",
        "lineno": 1891,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100003432",
          "name": "this.getOwnMemberPaths",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name"
          ]
        },
        "vars": {
          "names": "Core#getOwnMemberPaths~names"
        }
      },
      "description": "Returns the list of absolute paths of the members of the given set of the given node that not simply\rinherited.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the set owner.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set.",
          "name": "name"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "Returns an array of absolute path strings of the member nodes of the set that has\rinformation on the node's inheritance level."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getOwnMemberPaths",
      "longname": "Core#getOwnMemberPaths",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000195",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Removes a member from the set. The functions doesn't remove the node itself.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} name - the name of the set.\r\n         * @param {string} path - the absolute path of the member to be removed.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          86390,
          86840
        ],
        "filename": "core.js",
        "lineno": 1913,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100003489",
          "name": "this.delMember",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name",
            "path"
          ]
        },
        "vars": {
          "names": "Core#delMember~names"
        }
      },
      "description": "Removes a member from the set. The functions doesn't remove the node itself.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the owner of the set.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set.",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the absolute path of the member to be removed.",
          "name": "path"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "delMember",
      "longname": "Core#delMember",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000197",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Adds a member to the given set.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} name - the name of the set.\r\n         * @param {module:Core~Node} member - the new member of the set.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          87431,
          87779
        ],
        "filename": "core.js",
        "lineno": 1935,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100003545",
          "name": "this.addMember",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name",
            "member"
          ]
        }
      },
      "description": "Adds a member to the given set.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the owner of the set.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set.",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the new member of the set.",
          "name": "member"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "addMember",
      "longname": "Core#addMember",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000199",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Return the names of the attributes defined for the set membership to the member node.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} name - the name of the set.\r\n         * @param {string} path - the absolute path of the member.\r\n         *\r\n         * @return {string[]} Returns the array of names of attributes that represents some property of the membership.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          88551,
          89260
        ],
        "filename": "core.js",
        "lineno": 1957,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100003590",
          "name": "this.getMemberAttributeNames",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name",
            "path"
          ]
        },
        "vars": {
          "names": "Core#getMemberAttributeNames~names",
          "paths": "Core#getMemberAttributeNames~paths"
        }
      },
      "description": "Return the names of the attributes defined for the set membership to the member node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the owner of the set.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set.",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the absolute path of the member.",
          "name": "path"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "Returns the array of names of attributes that represents some property of the membership."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getMemberAttributeNames",
      "longname": "Core#getMemberAttributeNames",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000200",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Return the names of the attributes defined for the set membership specifically defined to the member node.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} name - the name of the set.\r\n         * @param {string} path - the absolute path of the member.\r\n         *\r\n         * @return {string[]} Returns the array of names of attributes that represents some property of the membership.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          90053,
          90768
        ],
        "filename": "core.js",
        "lineno": 1985,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100003669",
          "name": "this.getMemberOwnAttributeNames",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name",
            "path"
          ]
        },
        "vars": {
          "names": "Core#getMemberOwnAttributeNames~names",
          "paths": "Core#getMemberOwnAttributeNames~paths"
        }
      },
      "description": "Return the names of the attributes defined for the set membership specifically defined to the member node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the owner of the set.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set.",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the absolute path of the member.",
          "name": "path"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "Returns the array of names of attributes that represents some property of the membership."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getMemberOwnAttributeNames",
      "longname": "Core#getMemberOwnAttributeNames",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000203",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Get the value of the attribute in relation with the set membership.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} setName - the name of the set.\r\n         * @param {string} path - the absolute path of the member node.\r\n         * @param {string} attrName - the name of the attribute.\r\n         *\r\n         * @return {string|number|bool|object|undefined} Return the value of the attribute. If it is undefined,\r\n         * then there is no such attributed connected to the given set membership.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          91672,
          92485
        ],
        "filename": "core.js",
        "lineno": 2015,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100003748",
          "name": "this.getMemberAttribute",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "setName",
            "path",
            "attrName"
          ]
        },
        "vars": {
          "names": "Core#getMemberAttribute~names",
          "paths": "Core#getMemberAttribute~paths"
        }
      },
      "description": "Get the value of the attribute in relation with the set membership.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the owner of the set.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set.",
          "name": "setName"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the absolute path of the member node.",
          "name": "path"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the attribute.",
          "name": "attrName"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string",
              "number",
              "bool",
              "object",
              "undefined"
            ]
          },
          "description": "Return the value of the attribute. If it is undefined,\rthen there is no such attributed connected to the given set membership."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getMemberAttribute",
      "longname": "Core#getMemberAttribute",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000206",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Get the value of the attribute for the set membership specifically defined to the member node.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} setName - the name of the set.\r\n         * @param {string} path - the absolute path of the member node.\r\n         * @param {string} attrName - the name of the attribute.\r\n         *\r\n         * @return {string|number|bool|object|undefined} Return the value of the attribute. If it is undefined,\r\n         * then there is no such attributed connected to the given set membership.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          93416,
          94235
        ],
        "filename": "core.js",
        "lineno": 2046,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100003839",
          "name": "this.getMemberOwnAttribute",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "setName",
            "path",
            "attrName"
          ]
        },
        "vars": {
          "names": "Core#getMemberOwnAttribute~names",
          "paths": "Core#getMemberOwnAttribute~paths"
        }
      },
      "description": "Get the value of the attribute for the set membership specifically defined to the member node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the owner of the set.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set.",
          "name": "setName"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the absolute path of the member node.",
          "name": "path"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the attribute.",
          "name": "attrName"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string",
              "number",
              "bool",
              "object",
              "undefined"
            ]
          },
          "description": "Return the value of the attribute. If it is undefined,\rthen there is no such attributed connected to the given set membership."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getMemberOwnAttribute",
      "longname": "Core#getMemberOwnAttribute",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000209",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Sets the attribute value which represents a property of the membership.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} setName - the name of the set.\r\n         * @param {string} path - the absolute path of the member node.\r\n         * @param {string} attrName - the name of the attribute.\r\n         * @param {string|number|bool|object} value - the new value of the attribute.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          95021,
          95931
        ],
        "filename": "core.js",
        "lineno": 2075,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100003930",
          "name": "this.setMemberAttribute",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "setName",
            "path",
            "attrName",
            "value"
          ]
        },
        "vars": {
          "names": "Core#setMemberAttribute~names",
          "paths": "Core#setMemberAttribute~paths"
        }
      },
      "description": "Sets the attribute value which represents a property of the membership.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the owner of the set.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set.",
          "name": "setName"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the absolute path of the member node.",
          "name": "path"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the attribute.",
          "name": "attrName"
        },
        {
          "type": {
            "names": [
              "string",
              "number",
              "bool",
              "object"
            ]
          },
          "description": "the new value of the attribute.",
          "name": "value"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "setMemberAttribute",
      "longname": "Core#setMemberAttribute",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000212",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Removes an attribute which represented a property of the given set membership.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} setName - the name of the set.\r\n         * @param {string} memberPath - the absolute path of the member node.\r\n         * @param {string} attrName - the name of the attribute.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          96643,
          97460
        ],
        "filename": "core.js",
        "lineno": 2105,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100004030",
          "name": "this.delMemberAttribute",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "setName",
            "memberPath",
            "attrName"
          ]
        },
        "vars": {
          "names": "Core#delMemberAttribute~names",
          "paths": "Core#delMemberAttribute~paths"
        }
      },
      "description": "Removes an attribute which represented a property of the given set membership.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the owner of the set.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set.",
          "name": "setName"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the absolute path of the member node.",
          "name": "memberPath"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the attribute.",
          "name": "attrName"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "delMemberAttribute",
      "longname": "Core#delMemberAttribute",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000215",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Return the names of the registry entries defined for the set membership to the member node.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} name - the name of the set.\r\n         * @param {string} path - the absolute path of the member.\r\n         *\r\n         * @return {string[]} Returns the array of names of registry entries that represents some property of the\r\n         * membership.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          98256,
          98961
        ],
        "filename": "core.js",
        "lineno": 2135,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100004117",
          "name": "this.getMemberRegistryNames",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name",
            "path"
          ]
        },
        "vars": {
          "names": "Core#getMemberRegistryNames~names",
          "paths": "Core#getMemberRegistryNames~paths"
        }
      },
      "description": "Return the names of the registry entries defined for the set membership to the member node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the owner of the set.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set.",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the absolute path of the member.",
          "name": "path"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "Returns the array of names of registry entries that represents some property of the\rmembership."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getMemberRegistryNames",
      "longname": "Core#getMemberRegistryNames",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000218",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Return the names of the registry entries defined for the set membership specifically defined to\r\n         * the member node.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} name - the name of the set.\r\n         * @param {string} path - the absolute path of the member.\r\n         *\r\n         * @return {string[]} Returns the array of names of registry entries that represents some property of the\r\n         * membership.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          99790,
          100501
        ],
        "filename": "core.js",
        "lineno": 2165,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100004196",
          "name": "this.getMemberOwnRegistryNames",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name",
            "path"
          ]
        },
        "vars": {
          "names": "Core#getMemberOwnRegistryNames~names",
          "paths": "Core#getMemberOwnRegistryNames~paths"
        }
      },
      "description": "Return the names of the registry entries defined for the set membership specifically defined to\rthe member node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the owner of the set.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set.",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the absolute path of the member.",
          "name": "path"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "Returns the array of names of registry entries that represents some property of the\rmembership."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getMemberOwnRegistryNames",
      "longname": "Core#getMemberOwnRegistryNames",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000221",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Get the value of the registry entry in relation with the set membership.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} setName - the name of the set.\r\n         * @param {string} path - the absolute path of the member node.\r\n         * @param {string} regName - the name of the registry entry.\r\n         *\r\n         * @return {string|number|bool|object|undefined} Return the value of the registry. If it is undefined,\r\n         * then there is no such registry connected to the given set membership.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          101411,
          102216
        ],
        "filename": "core.js",
        "lineno": 2195,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100004275",
          "name": "this.getMemberRegistry",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "setName",
            "path",
            "regName"
          ]
        },
        "vars": {
          "names": "Core#getMemberRegistry~names",
          "paths": "Core#getMemberRegistry~paths"
        }
      },
      "description": "Get the value of the registry entry in relation with the set membership.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the owner of the set.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set.",
          "name": "setName"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the absolute path of the member node.",
          "name": "path"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the registry entry.",
          "name": "regName"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string",
              "number",
              "bool",
              "object",
              "undefined"
            ]
          },
          "description": "Return the value of the registry. If it is undefined,\rthen there is no such registry connected to the given set membership."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getMemberRegistry",
      "longname": "Core#getMemberRegistry",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000224",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Get the value of the registry entry for the set membership specifically defined to the member node.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} setName - the name of the set.\r\n         * @param {string} path - the absolute path of the member node.\r\n         * @param {string} regName - the name of the registry entry.\r\n         *\r\n         * @return {string|number|bool|object|undefined} Return the value of the registry. If it is undefined,\r\n         * then there is no such registry connected to the given set membership.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          103153,
          103964
        ],
        "filename": "core.js",
        "lineno": 2226,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100004366",
          "name": "this.getMemberOwnRegistry",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "setName",
            "path",
            "regName"
          ]
        },
        "vars": {
          "names": "Core#getMemberOwnRegistry~names",
          "paths": "Core#getMemberOwnRegistry~paths"
        }
      },
      "description": "Get the value of the registry entry for the set membership specifically defined to the member node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the owner of the set.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set.",
          "name": "setName"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the absolute path of the member node.",
          "name": "path"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the registry entry.",
          "name": "regName"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string",
              "number",
              "bool",
              "object",
              "undefined"
            ]
          },
          "description": "Return the value of the registry. If it is undefined,\rthen there is no such registry connected to the given set membership."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getMemberOwnRegistry",
      "longname": "Core#getMemberOwnRegistry",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000227",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Sets the registry entry value which represents a property of the membership.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} setName - the name of the set.\r\n         * @param {string} path - the absolute path of the member node.\r\n         * @param {string} regName - the name of the registry entry.\r\n         * @param {string|number|bool|object} value - the new value of the registry.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          104758,
          105658
        ],
        "filename": "core.js",
        "lineno": 2255,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100004457",
          "name": "this.setMemberRegistry",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "setName",
            "path",
            "regName",
            "value"
          ]
        },
        "vars": {
          "names": "Core#setMemberRegistry~names",
          "paths": "Core#setMemberRegistry~paths"
        }
      },
      "description": "Sets the registry entry value which represents a property of the membership.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the owner of the set.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set.",
          "name": "setName"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the absolute path of the member node.",
          "name": "path"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the registry entry.",
          "name": "regName"
        },
        {
          "type": {
            "names": [
              "string",
              "number",
              "bool",
              "object"
            ]
          },
          "description": "the new value of the registry.",
          "name": "value"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "setMemberRegistry",
      "longname": "Core#setMemberRegistry",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000230",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Removes a registry entry which represented a property of the given set membership.\r\n         * @param {module:Core~Node} node - the owner of the set.\r\n         * @param {string} setName - the name of the set.\r\n         * @param {string} path - the absolute path of the member node.\r\n         * @param {string} regName - the name of the registry entry.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          106372,
          107151
        ],
        "filename": "core.js",
        "lineno": 2285,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100004557",
          "name": "this.delMemberRegistry",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "setName",
            "path",
            "regName"
          ]
        },
        "vars": {
          "names": "Core#delMemberRegistry~names",
          "paths": "Core#delMemberRegistry~paths"
        }
      },
      "description": "Removes a registry entry which represented a property of the given set membership.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the owner of the set.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set.",
          "name": "setName"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the absolute path of the member node.",
          "name": "path"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the registry entry.",
          "name": "regName"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "delMemberRegistry",
      "longname": "Core#delMemberRegistry",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000233",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns all membership information of the given node.\r\n         * @param {module:Core~Node} node - the node in question\r\n         *\r\n         * @return {object} Returns a dictionary where every the key of every entry is an absolute path of a set owner\r\n         * node. The value of each entry is an array with the set names in which the node can be found as a member.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          107786,
          107916
        ],
        "filename": "core.js",
        "lineno": 2312,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100004644",
          "name": "this.isMemberOf",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Returns all membership information of the given node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "Returns a dictionary where every the key of every entry is an absolute path of a set owner\rnode. The value of each entry is an array with the set names in which the node can be found as a member."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "isMemberOf",
      "longname": "Core#isMemberOf",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000236",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Get the GUID of a node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {module:Core~GUID} Returns the globally unique identifier.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          108364,
          108488
        ],
        "filename": "core.js",
        "lineno": 2327,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100004663",
          "name": "this.getGuid",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Get the GUID of a node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "module:Core~GUID"
            ]
          },
          "description": "Returns the globally unique identifier."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getGuid",
      "longname": "Core#getGuid",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000237",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Set the GUID of a node. As the Core itself do not checks whether the GUID already exists. The use of\r\n         * this function is only advised during the creation of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {module:Core~GUID} guid - the new globally unique identifier.\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreIllegalOperationError|CoreInternalError|null} callback.error - the\r\n         * result of the execution.\r\n         *\r\n         * @return {external:Promise} If no callback is given, the result will be provided in a promise.\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */",
      "meta": {
        "range": [
          109379,
          109797
        ],
        "filename": "core.js",
        "lineno": 2346,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100004682",
          "name": "this.setGuid",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "guid",
            "callback"
          ]
        },
        "vars": {
          "error": "module:Core~error"
        }
      },
      "description": "Set the GUID of a node. As the Core itself do not checks whether the GUID already exists. The use of\rthis function is only advised during the creation of the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "module:Core~GUID"
            ]
          },
          "description": "the new globally unique identifier.",
          "name": "guid"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "Error",
              "CoreIllegalArgumentError",
              "CoreIllegalOperationError",
              "CoreInternalError",
              "null"
            ]
          },
          "description": "the\rresult of the execution.",
          "name": "callback.error"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "external:Promise"
            ]
          },
          "description": "If no callback is given, the result will be provided in a promise."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        }
      ],
      "name": "setGuid",
      "longname": "Core#setGuid",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000238",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Gets a constraint object of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the constraint.\r\n         *\r\n         * @return {module:Core~Constraint|null} Returns the defined constraint or null if it was not\r\n         * defined for the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         *\r\n         * @example\r\n         * {\r\n         *   script: \"function (core, node, callback) {callback(null, {hasViolation: false, message: ''});}\",\r\n         *   priority: 1,\r\n         *   info: \"Should check unique name\"\r\n         * }\r\n         */",
      "meta": {
        "range": [
          110722,
          110919
        ],
        "filename": "core.js",
        "lineno": 2379,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100004736",
          "name": "this.getConstraint",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name"
          ]
        }
      },
      "description": "Gets a constraint object of the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the constraint.",
          "name": "name"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "module:Core~Constraint",
              "null"
            ]
          },
          "description": "Returns the defined constraint or null if it was not\rdefined for the node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "examples": [
        "{\r  script: \"function (core, node, callback) {callback(null, {hasViolation: false, message: ''});}\",\r  priority: 1,\r  info: \"Should check unique name\"\r}"
      ],
      "name": "getConstraint",
      "longname": "Core#getConstraint",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000242",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Sets a constraint object of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the constraint.\r\n         * @param {module:Core~Constraint} constraint  - the constraint to be set.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          111533,
          111868
        ],
        "filename": "core.js",
        "lineno": 2396,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100004763",
          "name": "this.setConstraint",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name",
            "constraint"
          ]
        }
      },
      "description": "Sets a constraint object of the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the constraint.",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "module:Core~Constraint"
            ]
          },
          "description": "the constraint to be set.",
          "name": "constraint"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "setConstraint",
      "longname": "Core#setConstraint",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000243",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Removes a constraint from the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the constraint.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          112396,
          112586
        ],
        "filename": "core.js",
        "lineno": 2414,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100004804",
          "name": "this.delConstraint",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name"
          ]
        }
      },
      "description": "Removes a constraint from the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the constraint.",
          "name": "name"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "delConstraint",
      "longname": "Core#delConstraint",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000244",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Retrieves the list of constraint names defined for the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} Returns the array of names of constraints available for the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          113089,
          113235
        ],
        "filename": "core.js",
        "lineno": 2430,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100004831",
          "name": "this.getConstraintNames",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Retrieves the list of constraint names defined for the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "Returns the array of names of constraints available for the node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getConstraintNames",
      "longname": "Core#getConstraintNames",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000245",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Retrieves the list of constraint names defined specifically for the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} Returns the array of names of constraints for the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          113741,
          113893
        ],
        "filename": "core.js",
        "lineno": 2445,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100004850",
          "name": "this.getOwnConstraintNames",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Retrieves the list of constraint names defined specifically for the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "Returns the array of names of constraints for the node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getOwnConstraintNames",
      "longname": "Core#getOwnConstraintNames",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000246",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Checks if the given node in any way inherits from the typeNode. In addition to checking if the node\r\n         * \"isInstanceOf\" of typeNode, this methods also takes mixins into account.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {module:Core~Node|string} typeNodeOrPath - the type node we want to check or its path.\r\n         *\r\n         * @return {bool} The function returns true if the typeNodeOrPath represents a base node,\r\n         * or a mixin of any of the base nodes, of the node.\r\n         * Every node is considered to be a type of itself.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          114751,
          115127
        ],
        "filename": "core.js",
        "lineno": 2464,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100004869",
          "name": "this.isTypeOf",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "typeNodeOrPath"
          ]
        }
      },
      "description": "Checks if the given node in any way inherits from the typeNode. In addition to checking if the node\r\"isInstanceOf\" of typeNode, this methods also takes mixins into account.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "module:Core~Node",
              "string"
            ]
          },
          "description": "the type node we want to check or its path.",
          "name": "typeNodeOrPath"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "bool"
            ]
          },
          "description": "The function returns true if the typeNodeOrPath represents a base node,\ror a mixin of any of the base nodes, of the node.\rEvery node is considered to be a type of itself."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "isTypeOf",
      "longname": "Core#isTypeOf",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000247",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Checks if according to the META rules the given node can be a child of the parent.\r\n         * @param {module:Core~Node} node - the node in question\r\n         * @param {module:Core~Node} parent - the parent we like to test.\r\n         *\r\n         * @return {bool} The function returns true if according to the META rules the node can be a child of the\r\n         * parent. The check does not cover multiplicity (so if the parent can only have twi children and it already\r\n         * has them, this function will still returns true).\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          115924,
          116121
        ],
        "filename": "core.js",
        "lineno": 2487,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100004907",
          "name": "this.isValidChildOf",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "parent"
          ]
        }
      },
      "description": "Checks if according to the META rules the given node can be a child of the parent.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the parent we like to test.",
          "name": "parent"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "bool"
            ]
          },
          "description": "The function returns true if according to the META rules the node can be a child of the\rparent. The check does not cover multiplicity (so if the parent can only have twi children and it already\rhas them, this function will still returns true)."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "isValidChildOf",
      "longname": "Core#isValidChildOf",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000248",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the list of the META defined pointer names of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} The function returns all the pointer names that are defined among the META rules\r\n         * of the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          116667,
          116817
        ],
        "filename": "core.js",
        "lineno": 2504,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100004933",
          "name": "this.getValidPointerNames",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Returns the list of the META defined pointer names of the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "The function returns all the pointer names that are defined among the META rules\rof the node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getValidPointerNames",
      "longname": "Core#getValidPointerNames",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000249",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the list of the META defined pointer names of the node that were specifically defined for the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} The function returns all the pointer names that are defined among the META\r\n         * rules of the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          117407,
          117563
        ],
        "filename": "core.js",
        "lineno": 2520,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100004952",
          "name": "this.getOwnValidPointerNames",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Returns the list of the META defined pointer names of the node that were specifically defined for the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "The function returns all the pointer names that are defined among the META\rrules of the node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getOwnValidPointerNames",
      "longname": "Core#getOwnValidPointerNames",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000250",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the list of the META defined set names of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} The function returns all the set names that are defined among the META rules of the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          118089,
          118231
        ],
        "filename": "core.js",
        "lineno": 2535,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100004971",
          "name": "this.getValidSetNames",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Returns the list of the META defined set names of the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "The function returns all the set names that are defined among the META rules of the node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getValidSetNames",
      "longname": "Core#getValidSetNames",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000251",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the list of the META defined set names of the node that were specifically defined for the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} The function returns all the set names that are defined among the META rules of the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          118801,
          118949
        ],
        "filename": "core.js",
        "lineno": 2550,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100004990",
          "name": "this.getOwnValidSetNames",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Returns the list of the META defined set names of the node that were specifically defined for the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "The function returns all the set names that are defined among the META rules of the node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getOwnValidSetNames",
      "longname": "Core#getOwnValidSetNames",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000252",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Checks if the node can be a target of a pointer of the source node in accordance with the META rules.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {module:Core~Node} source - the source to test.\r\n         * @param {string} name - the name of the pointer.\r\n         *\r\n         * @return {bool} The function returns true if according to the META rules, the given node is a valid\r\n         * target of the given pointer of the source.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          119689,
          119949
        ],
        "filename": "core.js",
        "lineno": 2568,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100005009",
          "name": "this.isValidTargetOf",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "source",
            "name"
          ]
        }
      },
      "description": "Checks if the node can be a target of a pointer of the source node in accordance with the META rules.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the source to test.",
          "name": "source"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the pointer.",
          "name": "name"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "bool"
            ]
          },
          "description": "The function returns true if according to the META rules, the given node is a valid\rtarget of the given pointer of the source."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "isValidTargetOf",
      "longname": "Core#isValidTargetOf",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000253",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the list of the META defined attribute names of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} The function returns all the attribute names that are defined among the META rules of the\r\n         * node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          120499,
          120653
        ],
        "filename": "core.js",
        "lineno": 2586,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100005043",
          "name": "this.getValidAttributeNames",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Returns the list of the META defined attribute names of the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "The function returns all the attribute names that are defined among the META rules of the\rnode."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getValidAttributeNames",
      "longname": "Core#getValidAttributeNames",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000254",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the list of the META defined attribute names of the node that were specifically defined for the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} The function returns the attribute names that are defined specifically for the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          121224,
          121384
        ],
        "filename": "core.js",
        "lineno": 2601,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100005062",
          "name": "this.getOwnValidAttributeNames",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Returns the list of the META defined attribute names of the node that were specifically defined for the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "The function returns the attribute names that are defined specifically for the node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getOwnValidAttributeNames",
      "longname": "Core#getOwnValidAttributeNames",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000255",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Checks if the given value is of the necessary type, according to the META rules.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the attribute.\r\n         * @param {string|number|bool|object} value - the value to test.\r\n         *\r\n         * @return {bool} Returns true if the value matches the META definitions.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          122029,
          122506
        ],
        "filename": "core.js",
        "lineno": 2618,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100005081",
          "name": "this.isValidAttributeValueOf",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name",
            "value"
          ]
        }
      },
      "description": "Checks if the given value is of the necessary type, according to the META rules.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the attribute.",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "string",
              "number",
              "bool",
              "object"
            ]
          },
          "description": "the value to test.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "bool"
            ]
          },
          "description": "Returns true if the value matches the META definitions."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "isValidAttributeValueOf",
      "longname": "Core#isValidAttributeValueOf",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000256",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the list of the META defined aspect names of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} The function returns all the aspect names that are defined among the META rules of the\r\n         * node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          123050,
          123198
        ],
        "filename": "core.js",
        "lineno": 2640,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100005137",
          "name": "this.getValidAspectNames",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Returns the list of the META defined aspect names of the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "The function returns all the aspect names that are defined among the META rules of the\rnode."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getValidAspectNames",
      "longname": "Core#getValidAspectNames",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000257",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the list of the META defined aspect names of the node that were specifically defined for the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} The function returns the aspect names that are specifically defined for the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          123763,
          123917
        ],
        "filename": "core.js",
        "lineno": 2655,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100005156",
          "name": "this.getOwnValidAspectNames",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Returns the list of the META defined aspect names of the node that were specifically defined for the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "The function returns the aspect names that are specifically defined for the node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getOwnValidAspectNames",
      "longname": "Core#getOwnValidAspectNames",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000258",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the list of valid children types of the given aspect.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the aspect.\r\n         *\r\n         * @return {string[]} The function returns a list of absolute paths of nodes that are valid children of the node\r\n         * and fits to the META rules defined for the aspect. Any children, visible under the given aspect of the node\r\n         * must be an instance of at least one node represented by the absolute paths.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          124713,
          124910
        ],
        "filename": "core.js",
        "lineno": 2673,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100005175",
          "name": "this.getAspectMeta",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name"
          ]
        }
      },
      "description": "Returns the list of valid children types of the given aspect.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the aspect.",
          "name": "name"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "The function returns a list of absolute paths of nodes that are valid children of the node\rand fits to the META rules defined for the aspect. Any children, visible under the given aspect of the node\rmust be an instance of at least one node represented by the absolute paths."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getAspectMeta",
      "longname": "Core#getAspectMeta",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000259",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Gives a JSON representation of the META rules of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {object} Returns an object that represents all the META rules of the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         *\r\n         * @example\r\n         * {\r\n         *   children: {\r\n         *     items: [ \"/1\", \"/c\" ],\r\n         *     minItems: [ -1, -1 ],\r\n         *     maxItems: [ -1, -1 ]\r\n         *   },\r\n         *   attributes: {\r\n         *     name: { type: \"string\" },\r\n         *     level: { type: \"integer\"}\r\n         *   },\r\n         *   pointers: {\r\n         *     ptr: {\r\n         *       min: 1,\r\n         *       max: 1,\r\n         *       items: [ \"/1\" ],\r\n         *       minItems: [ -1 ],\r\n         *       maxItems: [ 1 ]\r\n         *     },\r\n         *     set: {\r\n         *       min: -1,\r\n         *       max: -1,\r\n         *       items: [ \"/c\" ],\r\n         *       minItems: [ -1 ],\r\n         *       maxItems: [ -1 ]\r\n         *     }\r\n         *   },\r\n         *   aspects: {\r\n         *     filter: [ \"/8\", \"/c\" ]\r\n         *   },\r\n         *   constraints: {\r\n         *     myConstraint: {\r\n         *       script: \"function (core, node, callback) {callback(null, {hasViolation: false, message: ''});}\",\r\n         *       priority: 1,\r\n         *       info: \"Should check unique name\"\r\n         *     }\r\n         *   }\r\n         * }\r\n         * @example\r\n         * {\r\n         *   children: {},\r\n         *   attributes: {\r\n         *      name: { type: \"string\" },\r\n         *   },\r\n         *   pointers: {},\r\n         *   aspects: {},\r\n         *   constraints: {}\r\n         */",
      "meta": {
        "range": [
          126808,
          126940
        ],
        "filename": "core.js",
        "lineno": 2737,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100005202",
          "name": "this.getJsonMeta",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Gives a JSON representation of the META rules of the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "Returns an object that represents all the META rules of the node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "examples": [
        "{\r  children: {\r    items: [ \"/1\", \"/c\" ],\r    minItems: [ -1, -1 ],\r    maxItems: [ -1, -1 ]\r  },\r  attributes: {\r    name: { type: \"string\" },\r    level: { type: \"integer\"}\r  },\r  pointers: {\r    ptr: {\r      min: 1,\r      max: 1,\r      items: [ \"/1\" ],\r      minItems: [ -1 ],\r      maxItems: [ 1 ]\r    },\r    set: {\r      min: -1,\r      max: -1,\r      items: [ \"/c\" ],\r      minItems: [ -1 ],\r      maxItems: [ -1 ]\r    }\r  },\r  aspects: {\r    filter: [ \"/8\", \"/c\" ]\r  },\r  constraints: {\r    myConstraint: {\r      script: \"function (core, node, callback) {callback(null, {hasViolation: false, message: ''});}\",\r      priority: 1,\r      info: \"Should check unique name\"\r    }\r  }\r}",
        "{\r  children: {},\r  attributes: {\r     name: { type: \"string\" },\r  },\r  pointers: {},\r  aspects: {},\r  constraints: {}"
      ],
      "name": "getJsonMeta",
      "longname": "Core#getJsonMeta",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000260",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the META rules specifically defined for the given node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {object} The function returns an object that represent the META rules that were defined\r\n         * specifically for the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          127496,
          127634
        ],
        "filename": "core.js",
        "lineno": 2753,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100005221",
          "name": "this.getOwnJsonMeta",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Returns the META rules specifically defined for the given node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "The function returns an object that represent the META rules that were defined\rspecifically for the node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getOwnJsonMeta",
      "longname": "Core#getOwnJsonMeta",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000261",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Removes all META rules defined at the node. Note that it does not clear any rules from other meta-nodes\r\n         * where the node if referenced.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          128209,
          128340
        ],
        "filename": "core.js",
        "lineno": 2768,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100005240",
          "name": "this.clearMetaRules",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Removes all META rules defined at the node. Note that it does not clear any rules from other meta-nodes\rwhere the node if referenced.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "clearMetaRules",
      "longname": "Core#clearMetaRules",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000262",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Sets the META rules of the attribute of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the attribute.\r\n         * @param {object} rule - the rules that defines the attribute\r\n         * @param {'string'|'integer'|'float'|'boolean'|'asset'} rule.type - the type of the attribute (valid types see\r\n         * CONSTANTS.ATTRIBUTE_TYPES).\r\n         * @param {string[]} [rule.enum] - if the attribute is an enumeration, this array contains the possible values\r\n         * @param {string|number|boolean} [rule.default] - The value the attribute should have at the node. If not given\r\n         * it should be set at some point.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          129400,
          129776
        ],
        "filename": "core.js",
        "lineno": 2789,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100005259",
          "name": "this.setAttributeMeta",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name",
            "rule"
          ]
        }
      },
      "description": "Sets the META rules of the attribute of the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the attribute.",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "the rules that defines the attribute",
          "name": "rule"
        },
        {
          "type": {
            "names": [
              "'string'",
              "'integer'",
              "'float'",
              "'boolean'",
              "'asset'"
            ]
          },
          "description": "the type of the attribute (valid types see\rCONSTANTS.ATTRIBUTE_TYPES).",
          "name": "rule.type"
        },
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "optional": true,
          "description": "if the attribute is an enumeration, this array contains the possible values",
          "name": "rule.enum"
        },
        {
          "type": {
            "names": [
              "string",
              "number",
              "boolean"
            ]
          },
          "optional": true,
          "description": "The value the attribute should have at the node. If not given\rit should be set at some point.",
          "name": "rule.default"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "setAttributeMeta",
      "longname": "Core#setAttributeMeta",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000263",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Removes an attribute definition from the META rules of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the attribute.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          130332,
          130528
        ],
        "filename": "core.js",
        "lineno": 2808,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100005308",
          "name": "this.delAttributeMeta",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name"
          ]
        }
      },
      "description": "Removes an attribute definition from the META rules of the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the attribute.",
          "name": "name"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "delAttributeMeta",
      "longname": "Core#delAttributeMeta",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000264",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the definition object of an attribute from the META rules of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the attribute.\r\n         *\r\n         * @return {object} The function returns the definition object, where type is always defined.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         *\r\n         * @example\r\n         * {\r\n         *    type: \"string\"\r\n         * }\r\n         * @example\r\n         * {\r\n         *    type: \"string\",\r\n         *    regexp: \"^win\"\r\n         * }\r\n         * @example\r\n         * {\r\n         *    type: \"string\",\r\n         *    enum: [ \"value1\", \"value2\" ]\r\n         * }\r\n         * @example\r\n         * {\r\n         *    type: \"boolean\"\r\n         * }\r\n         * @example\r\n         * {\r\n         *    type: \"integer\"\r\n         * }\r\n         * @example\r\n         * {\r\n         *    type: \"integer\",\r\n         *    min: 0,\r\n         *    max: 10\r\n         * }\r\n         * @example\r\n         * {\r\n         *    type: \"integer\",\r\n         *    enum: [ 3, 8 ]\r\n         * }\r\n         * @example\r\n         * {\r\n         *    type: \"float\",\r\n         *    min: 0,\r\n         *    max: 9.9\r\n         * }\r\n         * @example\r\n         * {\r\n         *    type: \"asset\"\r\n         * }\r\n         */",
      "meta": {
        "range": [
          132140,
          132362
        ],
        "filename": "core.js",
        "lineno": 2870,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100005335",
          "name": "this.getAttributeMeta",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name"
          ]
        }
      },
      "description": "Returns the definition object of an attribute from the META rules of the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the attribute.",
          "name": "name"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "The function returns the definition object, where type is always defined."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "examples": [
        "{\r   type: \"string\"\r}",
        "{\r   type: \"string\",\r   regexp: \"^win\"\r}",
        "{\r   type: \"string\",\r   enum: [ \"value1\", \"value2\" ]\r}",
        "{\r   type: \"boolean\"\r}",
        "{\r   type: \"integer\"\r}",
        "{\r   type: \"integer\",\r   min: 0,\r   max: 10\r}",
        "{\r   type: \"integer\",\r   enum: [ 3, 8 ]\r}",
        "{\r   type: \"float\",\r   min: 0,\r   max: 9.9\r}",
        "{\r   type: \"asset\"\r}"
      ],
      "name": "getAttributeMeta",
      "longname": "Core#getAttributeMeta",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000265",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the list of absolute path of the valid children types of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} The function returns an array of absolute paths of the nodes that was defined as valid\r\n         * children for the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          132935,
          133087
        ],
        "filename": "core.js",
        "lineno": 2887,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100005366",
          "name": "this.getValidChildrenPaths",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Returns the list of absolute path of the valid children types of the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "The function returns an array of absolute paths of the nodes that was defined as valid\rchildren for the node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getValidChildrenPaths",
      "longname": "Core#getValidChildrenPaths",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000266",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Return a JSON representation of the META rules regarding the valid children of the given node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {module:Core~RelationRule} The function returns a detailed JSON structure that represents the META\r\n         * rules regarding the possible children of the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         *\r\n         * @example\r\n         * {\r\n         *   '/5': { max: 1, min: -1 },\r\n         *   '/c': { max: -1, min: 2 },\r\n         *   max: 10,\r\n         *   min: undefined\r\n         * }\r\n         * @func\r\n         */",
      "meta": {
        "range": [
          133922,
          134062
        ],
        "filename": "core.js",
        "lineno": 2912,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100005385",
          "name": "this.getChildrenMeta",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Return a JSON representation of the META rules regarding the valid children of the given node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "module:Core~RelationRule"
            ]
          },
          "description": "The function returns a detailed JSON structure that represents the META\rrules regarding the possible children of the node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "examples": [
        "{\r  '/5': { max: 1, min: -1 },\r  '/c': { max: -1, min: 2 },\r  max: 10,\r  min: undefined\r}"
      ],
      "kind": "function",
      "name": "getChildrenMeta",
      "longname": "Core#getChildrenMeta",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000267",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Sets the given child as a valid children type for the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {module:Core~Node} child - the valid child node.\r\n         * @param {integer} [min] - the allowed minimum number of children from this given node type (if not given or\r\n         * -1 is set, then there will be no minimum rule according this child type)\r\n         * @param {integer} [max] - the allowed maximum number of children from this given node type (if not given or\r\n         * -1 is set, then there will be no minimum rule according this child type)\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          135027,
          135307
        ],
        "filename": "core.js",
        "lineno": 2931,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100005404",
          "name": "this.setChildMeta",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "child",
            "min",
            "max"
          ]
        }
      },
      "description": "Sets the given child as a valid children type for the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the valid child node.",
          "name": "child"
        },
        {
          "type": {
            "names": [
              "integer"
            ]
          },
          "optional": true,
          "description": "the allowed minimum number of children from this given node type (if not given or\r-1 is set, then there will be no minimum rule according this child type)",
          "name": "min"
        },
        {
          "type": {
            "names": [
              "integer"
            ]
          },
          "optional": true,
          "description": "the allowed maximum number of children from this given node type (if not given or\r-1 is set, then there will be no minimum rule according this child type)",
          "name": "max"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "setChildMeta",
      "longname": "Core#setChildMeta",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000268",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Removes the given child rule from the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} path - the absolute path of the child which rule is to be removed from the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          135889,
          136067
        ],
        "filename": "core.js",
        "lineno": 2949,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100005444",
          "name": "this.delChildMeta",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "path"
          ]
        }
      },
      "description": "Removes the given child rule from the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the absolute path of the child which rule is to be removed from the node.",
          "name": "path"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "delChildMeta",
      "longname": "Core#delChildMeta",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000269",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Sets the global containment limits for the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {integer} [min] - the allowed minimum number of children (if not given or\r\n         * -1 is set, then there will be no minimum rule according children)\r\n         * @param {integer} [max] - the allowed maximum number of children (if not given or\r\n         * -1 is set, then there will be no maximum rule according children)\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          136887,
          137130
        ],
        "filename": "core.js",
        "lineno": 2968,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100005470",
          "name": "this.setChildrenMetaLimits",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "min",
            "max"
          ]
        }
      },
      "description": "Sets the global containment limits for the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "integer"
            ]
          },
          "optional": true,
          "description": "the allowed minimum number of children (if not given or\r-1 is set, then there will be no minimum rule according children)",
          "name": "min"
        },
        {
          "type": {
            "names": [
              "integer"
            ]
          },
          "optional": true,
          "description": "the allowed maximum number of children (if not given or\r-1 is set, then there will be no maximum rule according children)",
          "name": "max"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "setChildrenMetaLimits",
      "longname": "Core#setChildrenMetaLimits",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000270",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Sets the given target as a valid target type for the pointer/set of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the pointer/set.\r\n         * @param {module:Core~Node} target - the valid target/member node.\r\n         * @param {integer} [min] - the allowed minimum number of target/member from this given node type (if not\r\n         * given or -1 is set, then there will be no minimum rule according this target type)\r\n         * @param {integer} [max] - the allowed maximum number of target/member from this given node type (if not\r\n         * given or -1 is set, then there will be no minimum rule according this target type)\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          138198,
          138617
        ],
        "filename": "core.js",
        "lineno": 2990,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100005503",
          "name": "this.setPointerMetaTarget",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name",
            "target",
            "min",
            "max"
          ]
        }
      },
      "description": "Sets the given target as a valid target type for the pointer/set of the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the pointer/set.",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the valid target/member node.",
          "name": "target"
        },
        {
          "type": {
            "names": [
              "integer"
            ]
          },
          "optional": true,
          "description": "the allowed minimum number of target/member from this given node type (if not\rgiven or -1 is set, then there will be no minimum rule according this target type)",
          "name": "min"
        },
        {
          "type": {
            "names": [
              "integer"
            ]
          },
          "optional": true,
          "description": "the allowed maximum number of target/member from this given node type (if not\rgiven or -1 is set, then there will be no minimum rule according this target type)",
          "name": "max"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "setPointerMetaTarget",
      "longname": "Core#setPointerMetaTarget",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000271",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Removes a possible target type from the pointer/set of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the pointer/set\r\n         * @param {string} path - the absolute path of the possible target type.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If node is read-only, or definition does not exist.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          139260,
          139773
        ],
        "filename": "core.js",
        "lineno": 3011,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100005556",
          "name": "this.delPointerMetaTarget",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name",
            "path"
          ]
        },
        "vars": {
          "names": "Core#delPointerMetaTarget~names"
        }
      },
      "description": "Removes a possible target type from the pointer/set of the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the pointer/set",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the absolute path of the possible target type.",
          "name": "path"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If node is read-only, or definition does not exist."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "delPointerMetaTarget",
      "longname": "Core#delPointerMetaTarget",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000272",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Sets the global target limits for pointer/set of the node. On META level the only distinction between\r\n         * pointer and sets is the global multiplicity which has to maximize the number of possible targets to 1 in\r\n         * case of 'pure' pointer definitions.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the pointer/set.\r\n         * @param {integer} [min] - the allowed minimum number of children (if not given or\r\n         * -1 is set, then there will be no minimum rule according targets)\r\n         * @param {integer} [max] - the allowed maximum number of children (if not given or\r\n         * -1 is set, then there will be no maximum rule according targets)\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          140873,
          141173
        ],
        "filename": "core.js",
        "lineno": 3038,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100005620",
          "name": "this.setPointerMetaLimits",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name",
            "min",
            "max"
          ]
        }
      },
      "description": "Sets the global target limits for pointer/set of the node. On META level the only distinction between\rpointer and sets is the global multiplicity which has to maximize the number of possible targets to 1 in\rcase of 'pure' pointer definitions.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the pointer/set.",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "integer"
            ]
          },
          "optional": true,
          "description": "the allowed minimum number of children (if not given or\r-1 is set, then there will be no minimum rule according targets)",
          "name": "min"
        },
        {
          "type": {
            "names": [
              "integer"
            ]
          },
          "optional": true,
          "description": "the allowed maximum number of children (if not given or\r-1 is set, then there will be no maximum rule according targets)",
          "name": "max"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "setPointerMetaLimits",
      "longname": "Core#setPointerMetaLimits",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000274",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Removes the complete META rule regarding the given pointer/set of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the pointer/set.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          141742,
          141934
        ],
        "filename": "core.js",
        "lineno": 3056,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100005660",
          "name": "this.delPointerMeta",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name"
          ]
        }
      },
      "description": "Removes the complete META rule regarding the given pointer/set of the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the pointer/set.",
          "name": "name"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "delPointerMeta",
      "longname": "Core#delPointerMeta",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000275",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Return a JSON representation of the META rules regarding the given pointer/set of the given node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the pointer/set.\r\n         *\r\n         * @return {module:Core~RelationRule|undefined} The function returns a detailed JSON structure that\r\n         * represents the META rules regarding the given pointer/set of the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         *\r\n         * @example\r\n         * pointer\r\n         * {\r\n         *   '/a': { max: 1, min: -1 },\r\n         *   max: 1,\r\n         *   min: 1\r\n         * }\r\n         * @example\r\n         * set\r\n         * {\r\n         *   '/G': { max: -1, min: -1},\r\n         *   '/i': { max: -1, min: -1},\r\n         *   max: -1\r\n         *   min: -1\r\n         * }\r\n         */",
      "meta": {
        "range": [
          142989,
          143188
        ],
        "filename": "core.js",
        "lineno": 3090,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100005687",
          "name": "this.getPointerMeta",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name"
          ]
        }
      },
      "description": "Return a JSON representation of the META rules regarding the given pointer/set of the given node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the pointer/set.",
          "name": "name"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "module:Core~RelationRule",
              "undefined"
            ]
          },
          "description": "The function returns a detailed JSON structure that\rrepresents the META rules regarding the given pointer/set of the node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "examples": [
        "pointer\r{\r  '/a': { max: 1, min: -1 },\r  max: 1,\r  min: 1\r}",
        "set\r{\r  '/G': { max: -1, min: -1},\r  '/i': { max: -1, min: -1},\r  max: -1\r  min: -1\r}"
      ],
      "name": "getPointerMeta",
      "longname": "Core#getPointerMeta",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000276",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Sets a valid type for the given aspect of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the aspect.\r\n         * @param {module:Core~Node} target - the valid type for the aspect.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          143806,
          144125
        ],
        "filename": "core.js",
        "lineno": 3107,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100005714",
          "name": "this.setAspectMetaTarget",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name",
            "target"
          ]
        }
      },
      "description": "Sets a valid type for the given aspect of the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the aspect.",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the valid type for the aspect.",
          "name": "target"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "setAspectMetaTarget",
      "longname": "Core#setAspectMetaTarget",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000277",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Removes a valid type from the given aspect of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the aspect.\r\n         * @param {string} path - the absolute path of the valid type of the aspect.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          144755,
          145228
        ],
        "filename": "core.js",
        "lineno": 3126,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100005753",
          "name": "this.delAspectMetaTarget",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name",
            "path"
          ]
        },
        "vars": {
          "names": "Core#delAspectMetaTarget~names"
        }
      },
      "description": "Removes a valid type from the given aspect of the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the aspect.",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the absolute path of the valid type of the aspect.",
          "name": "path"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "delAspectMetaTarget",
      "longname": "Core#delAspectMetaTarget",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000278",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Removes the given aspect rule of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the aspect.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          145759,
          145949
        ],
        "filename": "core.js",
        "lineno": 3147,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100005809",
          "name": "this.delAspectMeta",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name"
          ]
        }
      },
      "description": "Removes the given aspect rule of the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the aspect.",
          "name": "name"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "delAspectMeta",
      "longname": "Core#delAspectMeta",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000280",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the meta-node of the node in question, that is the first base node that is part of the meta.\r\n         * (Aliased getBaseType).\r\n         * @param {module:Core~Node} node - the node in question\r\n         *\r\n         * @return {module:Core~Node|null} Returns the first node (including itself) among the inheritance chain\r\n         * that is a META node. It returns null if it does not find such node (ideally the only node with this result\r\n         * is the ROOT).\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If node is not a Node\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          146652,
          146784
        ],
        "filename": "core.js",
        "lineno": 3166,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100005836",
          "name": "this.getMetaType",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Returns the meta-node of the node in question, that is the first base node that is part of the meta.\r(Aliased getBaseType).",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "module:Core~Node",
              "null"
            ]
          },
          "description": "Returns the first node (including itself) among the inheritance chain\rthat is a META node. It returns null if it does not find such node (ideally the only node with this result\ris the ROOT)."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If node is not a Node"
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getMetaType",
      "longname": "Core#getMetaType",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000281",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the meta-node of the node in question, that is the first base node that is part of the meta.\r\n         * (Aliased getMetaType).\r\n         * @function\r\n         * @param {module:Core~Node} node - the node in question\r\n         *\r\n         * @return {module:Core~Node|null} Returns the first node (including itself) among the inheritance chain\r\n         * that is a META node. It returns null if it does not find such node (ideally the only node with this result\r\n         * is the ROOT).\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If node is not a Node\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          147509,
          147544
        ],
        "filename": "core.js",
        "lineno": 3185,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100005855",
          "name": "this.getBaseType",
          "type": "MemberExpression",
          "value": "this.getMetaType",
          "paramnames": []
        }
      },
      "description": "Returns the meta-node of the node in question, that is the first base node that is part of the meta.\r(Aliased getMetaType).",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "module:Core~Node",
              "null"
            ]
          },
          "description": "Returns the first node (including itself) among the inheritance chain\rthat is a META node. It returns null if it does not find such node (ideally the only node with this result\ris the ROOT)."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If node is not a Node"
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getBaseType",
      "longname": "Core#getBaseType",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000282",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Checks if the node is an instance of base.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {module:Core~Node|string} baseNodeOrPath - a potential base node (or its path) of the node\r\n         *\r\n         * @return {bool} Returns true if the base is on the inheritance chain of node.\r\n         * A node is considered to be an instance of itself here.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          148198,
          148751
        ],
        "filename": "core.js",
        "lineno": 3198,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100005863",
          "name": "this.isInstanceOf",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "baseNodeOrPath"
          ]
        },
        "vars": {
          "noPath": "module:Core~noPath"
        }
      },
      "description": "Checks if the node is an instance of base.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "module:Core~Node",
              "string"
            ]
          },
          "description": "a potential base node (or its path) of the node",
          "name": "baseNodeOrPath"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "bool"
            ]
          },
          "description": "Returns true if the base is on the inheritance chain of node.\rA node is considered to be an instance of itself here."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "isInstanceOf",
      "longname": "Core#isInstanceOf",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000283",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Generates a differential tree among the two states of the project that contains the necessary changes\r\n         * that can modify the source to be identical to the target. The result is in form of a json object.\r\n         * @param {module:Core~Node} sourceRoot - the root node of the source state.\r\n         * @param {module:Core~Node} targetRoot - the root node of the target state.\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreInternalError|null} callback.error - the status of the exectuion.\r\n         * @param {object} callback.treeDiff - the difference between the two containment hierarchies in\r\n         * a special JSON object\r\n         *\r\n         * @return {external:Promise} if the callback is not defined, the result is provided in a promise\r\n         * like manner.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */",
      "meta": {
        "range": [
          149749,
          150224
        ],
        "filename": "core.js",
        "lineno": 3228,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100005917",
          "name": "this.generateTreeDiff",
          "type": "FunctionExpression",
          "paramnames": [
            "sourceRoot",
            "targetRoot",
            "callback"
          ]
        },
        "vars": {
          "error": "module:Core~error"
        }
      },
      "description": "Generates a differential tree among the two states of the project that contains the necessary changes\rthat can modify the source to be identical to the target. The result is in form of a json object.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the root node of the source state.",
          "name": "sourceRoot"
        },
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the root node of the target state.",
          "name": "targetRoot"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "Error",
              "CoreIllegalArgumentError",
              "CoreInternalError",
              "null"
            ]
          },
          "description": "the status of the exectuion.",
          "name": "callback.error"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "the difference between the two containment hierarchies in\ra special JSON object",
          "name": "callback.treeDiff"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "external:Promise"
            ]
          },
          "description": "if the callback is not defined, the result is provided in a promise\rlike manner."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        }
      ],
      "name": "generateTreeDiff",
      "longname": "Core#generateTreeDiff",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000286",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Apply changes to the current project.\r\n         * @param {module:Core~Node} node - the root of the containment hierarchy where we wish to apply the changes\r\n         * @param {object} patch - the tree structured collection of changes represented with a special JSON object\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreInternalError|null} callback.error - the result of the execution.\r\n         *\r\n         * @return {external:Promise} If no callback is given, the result will be provided in a promise.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */",
      "meta": {
        "range": [
          150945,
          151380
        ],
        "filename": "core.js",
        "lineno": 3252,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100005970",
          "name": "this.applyTreeDiff",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "patch",
            "callback"
          ]
        },
        "vars": {
          "error": "module:Core~error"
        }
      },
      "description": "Apply changes to the current project.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the root of the containment hierarchy where we wish to apply the changes",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "the tree structured collection of changes represented with a special JSON object",
          "name": "patch"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "Error",
              "CoreIllegalArgumentError",
              "CoreInternalError",
              "null"
            ]
          },
          "description": "the result of the execution.",
          "name": "callback.error"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "external:Promise"
            ]
          },
          "description": "If no callback is given, the result will be provided in a promise."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        }
      ],
      "name": "applyTreeDiff",
      "longname": "Core#applyTreeDiff",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000290",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Tries to merge two patch object. The patches ideally represents changes made by two parties. They represents\r\n         * changes from the same source ending in different states. Our aim is to generate a single patch that could\r\n         * cover the changes of both party.\r\n         * @param {object} mine - the tree structured JSON patch that represents my changes.\r\n         * @param {object} theirs - the tree structured JSON patch that represents the changes of the other party.\r\n         *\r\n         * @return {object} The function returns with an object that contains the conflicts (if any) and the merged\r\n         * patch.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          152276,
          152501
        ],
        "filename": "core.js",
        "lineno": 3278,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100006024",
          "name": "this.tryToConcatChanges",
          "type": "FunctionExpression",
          "paramnames": [
            "mine",
            "theirs"
          ]
        }
      },
      "description": "Tries to merge two patch object. The patches ideally represents changes made by two parties. They represents\rchanges from the same source ending in different states. Our aim is to generate a single patch that could\rcover the changes of both party.",
      "params": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "the tree structured JSON patch that represents my changes.",
          "name": "mine"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "the tree structured JSON patch that represents the changes of the other party.",
          "name": "theirs"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "The function returns with an object that contains the conflicts (if any) and the merged\rpatch."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "tryToConcatChanges",
      "longname": "Core#tryToConcatChanges",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000294",
      "___s": true
    },
    {
      "comment": "/**\r\n         * When our attempt to merge two patches ended in some conflict, then we can modify that result highlighting\r\n         * that in case of every conflict, which side we prefer (mine vs. theirs). If we give that object as an input\r\n         * to this function, it will finish the merge resolving the conflict according our settings and present a final\r\n         * patch.\r\n         * @param {object} conflict - the object that represents our settings for every conflict and the so-far-merged\r\n         * patch.\r\n         *\r\n         * @return {object} The function results in a tree structured patch object that contains the changesthat cover\r\n         * both parties modifications (and the conflicts are resolved according the input settings).\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          153505,
          153671
        ],
        "filename": "core.js",
        "lineno": 3299,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100006052",
          "name": "this.applyResolution",
          "type": "FunctionExpression",
          "paramnames": [
            "conflict"
          ]
        }
      },
      "description": "When our attempt to merge two patches ended in some conflict, then we can modify that result highlighting\rthat in case of every conflict, which side we prefer (mine vs. theirs). If we give that object as an input\rto this function, it will finish the merge resolving the conflict according our settings and present a final\rpatch.",
      "params": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "the object that represents our settings for every conflict and the so-far-merged\rpatch.",
          "name": "conflict"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "The function results in a tree structured patch object that contains the changesthat cover\rboth parties modifications (and the conflicts are resolved according the input settings)."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "applyResolution",
      "longname": "Core#applyResolution",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000295",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Checks if the node is abstract.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {bool} The function returns true if the registry entry 'isAbstract' of the node if true hence\r\n         * the node is abstract.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          154196,
          154326
        ],
        "filename": "core.js",
        "lineno": 3315,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100006072",
          "name": "this.isAbstract",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Checks if the node is abstract.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "bool"
            ]
          },
          "description": "The function returns true if the registry entry 'isAbstract' of the node if true hence\rthe node is abstract."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "isAbstract",
      "longname": "Core#isAbstract",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000296",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Check is the node is a connection-like node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {bool} Returns true if both the 'src' and 'dst' pointer are defined as valid for the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          154827,
          154961
        ],
        "filename": "core.js",
        "lineno": 3330,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100006091",
          "name": "this.isConnection",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Check is the node is a connection-like node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "bool"
            ]
          },
          "description": "Returns true if both the 'src' and 'dst' pointer are defined as valid for the node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "isConnection",
      "longname": "Core#isConnection",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000297",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Retrieves the valid META nodes that can be base of a child of the node.\r\n         * @param {object} parameters - the input parameters of the query.\r\n         * @param {module:Core~Node} parameters.node - the node in question.\r\n         * @param {module:Core~Node[]} [parameters.children] - the current children of the node in question.\r\n         * @param {bool} [parameters.sensitive=false] - if true, the query filters out the abstract and connection-like\r\n         * nodes.\r\n         * @param {bool} [parameters.multiplicity=false] - if true, the query tries to filter out even more\r\n         * nodes according to the multiplicity rules (the check is only meaningful if all the children were passed)\r\n         * @param {string|null} [parameters.aspect=undefined] - if given, the query filters to contain only types that\r\n         * are visible in the given aspect.\r\n         * @return {module:Core~Node[]} The function returns a list of valid nodes that can be instantiated as a\r\n         * child of the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          156239,
          157449
        ],
        "filename": "core.js",
        "lineno": 3353,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100006110",
          "name": "this.getValidChildrenMetaNodes",
          "type": "FunctionExpression",
          "paramnames": [
            "parameters"
          ]
        },
        "vars": {
          "i": "module:Core~i"
        }
      },
      "description": "Retrieves the valid META nodes that can be base of a child of the node.",
      "params": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "the input parameters of the query.",
          "name": "parameters"
        },
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "parameters.node"
        },
        {
          "type": {
            "names": [
              "Array.<module:Core~Node>"
            ]
          },
          "optional": true,
          "description": "the current children of the node in question.",
          "name": "parameters.children"
        },
        {
          "type": {
            "names": [
              "bool"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "if true, the query filters out the abstract and connection-like\rnodes.",
          "name": "parameters.sensitive"
        },
        {
          "type": {
            "names": [
              "bool"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "if true, the query tries to filter out even more\rnodes according to the multiplicity rules (the check is only meaningful if all the children were passed)",
          "name": "parameters.multiplicity"
        },
        {
          "type": {
            "names": [
              "string",
              "null"
            ]
          },
          "optional": true,
          "description": "if given, the query filters to contain only types that\rare visible in the given aspect.",
          "name": "parameters.aspect"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<module:Core~Node>"
            ]
          },
          "description": "The function returns a list of valid nodes that can be instantiated as a\rchild of the node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getValidChildrenMetaNodes",
      "longname": "Core#getValidChildrenMetaNodes",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000298",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Retrieves the valid META nodes that can be base of a member of the set of the node.\r\n         * @param {object} parameters - the input parameters of the query.\r\n         * @param {module:Core~Node} parameters.node - the node in question.\r\n         * @param {string} parameters.name - the name of the set.\r\n         * @param {module:Core~Node[]} [parameters.members] - the current members of the set of the node in question.\r\n         * @param {bool} [parameters.sensitive=false] - if true, the query filters out the abstract and connection-like\r\n         * nodes.\r\n         * @param {bool} [parameters.multiplicity=false] - if true, the query tries to filter out even more nodes\r\n         * according to the multiplicity rules (the check is only meaningful if all the members were passed)\r\n         *\r\n         * @return {module:Core~Node[]} The function returns a list of valid nodes that can be instantiated as a\r\n         * member of the set of the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          158673,
          159664
        ],
        "filename": "core.js",
        "lineno": 3392,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100006246",
          "name": "this.getValidSetElementsMetaNodes",
          "type": "FunctionExpression",
          "paramnames": [
            "parameters"
          ]
        },
        "vars": {
          "i": "module:Core~i"
        }
      },
      "description": "Retrieves the valid META nodes that can be base of a member of the set of the node.",
      "params": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "the input parameters of the query.",
          "name": "parameters"
        },
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "parameters.node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set.",
          "name": "parameters.name"
        },
        {
          "type": {
            "names": [
              "Array.<module:Core~Node>"
            ]
          },
          "optional": true,
          "description": "the current members of the set of the node in question.",
          "name": "parameters.members"
        },
        {
          "type": {
            "names": [
              "bool"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "if true, the query filters out the abstract and connection-like\rnodes.",
          "name": "parameters.sensitive"
        },
        {
          "type": {
            "names": [
              "bool"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "if true, the query tries to filter out even more nodes\raccording to the multiplicity rules (the check is only meaningful if all the members were passed)",
          "name": "parameters.multiplicity"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<module:Core~Node>"
            ]
          },
          "description": "The function returns a list of valid nodes that can be instantiated as a\rmember of the set of the node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getValidSetElementsMetaNodes",
      "longname": "Core#getValidSetElementsMetaNodes",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000301",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns all META nodes.\r\n         * @param {module:Core~Node} node - any node of the containment hierarchy.\r\n         *\r\n         * @return {Object<string, module:Core~Node>} The function returns a dictionary. The keys of the dictionary\r\n         * are the absolute paths of the META nodes of the project. Every value of the dictionary\r\n         * is a {@link module:Core~Node}.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          160309,
          160449
        ],
        "filename": "core.js",
        "lineno": 3423,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100006351",
          "name": "this.getAllMetaNodes",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Returns all META nodes.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "any node of the containment hierarchy.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object.<string, module:Core~Node>"
            ]
          },
          "description": "The function returns a dictionary. The keys of the dictionary\rare the absolute paths of the META nodes of the project. Every value of the dictionary\ris a {@link module:Core~Node}."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getAllMetaNodes",
      "longname": "Core#getAllMetaNodes",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000304",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Checks if the node is a META node.\r\n         * @param {module:Core~Node} node - the node to test.\r\n         *\r\n         * @return {bool} Returns true if the node is a member of the METAAspectSet of the ROOT node hence can be\r\n         * seen as a META node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          160973,
          161103
        ],
        "filename": "core.js",
        "lineno": 3439,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100006370",
          "name": "this.isMetaNode",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Checks if the node is a META node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node to test.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "bool"
            ]
          },
          "description": "Returns true if the node is a member of the METAAspectSet of the ROOT node hence can be\rseen as a META node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "isMetaNode",
      "longname": "Core#isMetaNode",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000305",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Checks if the member is completely overridden in the set of the node.\r\n         * @param {module:Core~Node} node - the node to test.\r\n         * @param {string} name - the name of the set of the node.\r\n         * @param {string} path - the path of the member in question.\r\n         *\r\n         * @return {bool} Returns true if the member exists in the base of the set, but was\r\n         * added to the given set as well, which means a complete override. If the set does not exist\r\n         * or the member do not have a 'base' member or just some property was overridden, the function returns\r\n         * false.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          162077,
          162562
        ],
        "filename": "core.js",
        "lineno": 3460,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100006389",
          "name": "this.isFullyOverriddenMember",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name",
            "path"
          ]
        },
        "vars": {
          "names": "Core#isFullyOverriddenMember~names"
        }
      },
      "description": "Checks if the member is completely overridden in the set of the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node to test.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set of the node.",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the path of the member in question.",
          "name": "path"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "bool"
            ]
          },
          "description": "Returns true if the member exists in the base of the set, but was\radded to the given set as well, which means a complete override. If the set does not exist\ror the member do not have a 'base' member or just some property was overridden, the function returns\rfalse."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "isFullyOverriddenMember",
      "longname": "Core#isFullyOverriddenMember",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000306",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Checks if the mixins allocated with the node can be used.\r\n         * Every mixin node should be on the Meta.\r\n         * Every rule (attribute/pointer/set/aspect/containment/constraint) should be defined only in one mixin.\r\n         *\r\n         * @param {module:Core~Node} node - the node to test.\r\n         *\r\n         * @return {module:Core~MixinViolation[]} Returns the array of violations. If the array is empty,\r\n         * there is no violation.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          163281,
          163419
        ],
        "filename": "core.js",
        "lineno": 3485,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100006445",
          "name": "this.getMixinErrors",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Checks if the mixins allocated with the node can be used.\rEvery mixin node should be on the Meta.\rEvery rule (attribute/pointer/set/aspect/containment/constraint) should be defined only in one mixin.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node to test.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<module:Core~MixinViolation>"
            ]
          },
          "description": "Returns the array of violations. If the array is empty,\rthere is no violation."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getMixinErrors",
      "longname": "Core#getMixinErrors",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000308",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Gathers the paths of the mixin nodes defined directly at the node.\r\n         *\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string[]} The paths of the mixins in an array ordered by their order of use (which is important\r\n         * in case of some collision among definitions would arise).\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          164030,
          164166
        ],
        "filename": "core.js",
        "lineno": 3502,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100006464",
          "name": "this.getMixinPaths",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Gathers the paths of the mixin nodes defined directly at the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "The paths of the mixins in an array ordered by their order of use (which is important\rin case of some collision among definitions would arise)."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getMixinPaths",
      "longname": "Core#getMixinPaths",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000309",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Gathers the mixin nodes defined directly at the node.\r\n         *\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {Object<string, module:Core~Node>} The dictionary of the mixin nodes keyed by their paths.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          164688,
          164824
        ],
        "filename": "core.js",
        "lineno": 3518,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100006483",
          "name": "this.getMixinNodes",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Gathers the mixin nodes defined directly at the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object.<string, module:Core~Node>"
            ]
          },
          "description": "The dictionary of the mixin nodes keyed by their paths."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getMixinNodes",
      "longname": "Core#getMixinNodes",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000310",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Removes a mixin from the mixin set of the node.\r\n         *\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} path - the path of the mixin node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          165376,
          165553
        ],
        "filename": "core.js",
        "lineno": 3534,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100006502",
          "name": "this.delMixin",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "path"
          ]
        }
      },
      "description": "Removes a mixin from the mixin set of the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the path of the mixin node.",
          "name": "path"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "delMixin",
      "longname": "Core#delMixin",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000311",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Adds a mixin to the mixin set of the node.\r\n         *\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} path - the path of the mixin node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          166100,
          166277
        ],
        "filename": "core.js",
        "lineno": 3551,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100006528",
          "name": "this.addMixin",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "path"
          ]
        }
      },
      "description": "Adds a mixin to the mixin set of the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the path of the mixin node.",
          "name": "path"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "addMixin",
      "longname": "Core#addMixin",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000312",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Removes all mixins for a given node.\r\n         *\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          166659,
          166791
        ],
        "filename": "core.js",
        "lineno": 3566,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100006554",
          "name": "this.clearMixins",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Removes all mixins for a given node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "clearMixins",
      "longname": "Core#clearMixins",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000313",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Searches for the closest META node of the node in question and the direct mixins of that node.\r\n         * @param {module:Core~Node} node - the node in question\r\n         *\r\n         * @return {module:Core~Node[]} Returns the closest Meta node that is a base of the given node\r\n         * plus it returns all the mixin nodes associated with the base.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          167408,
          167542
        ],
        "filename": "core.js",
        "lineno": 3582,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100006573",
          "name": "this.getBaseTypes",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Searches for the closest META node of the node in question and the direct mixins of that node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<module:Core~Node>"
            ]
          },
          "description": "Returns the closest Meta node that is a base of the given node\rplus it returns all the mixin nodes associated with the base."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getBaseTypes",
      "longname": "Core#getBaseTypes",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000314",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Checks if the given path can be added as a mixin to the given node.\r\n         *\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} path - the path of the mixin node.\r\n         * @return {object} Returns an object with isOk set to true if the given path can be added as a\r\n         * mixin to the given node. If it cannot, the reason will be reported under reason.\r\n         *\r\n         * @example\r\n         * result = core.canSetAsMixin(node, core.getPath(aValidMixinNode));\r\n         * // result = { isOk: true, reason: '' }\r\n         * result = core.canSetAsMixin(node, core.getPath(node));\r\n         * // result = { isOk: false, reason: 'Node cannot be mixin of itself!' }\r\n         * result = core.canSetAsMixin(node, core.getPath(nonMetaNode));\r\n         * // result = { isOk: false, reason: 'Mixin must be on the Meta!!' }\r\n         * result = core.canSetAsMixin(node, core.getPath(FCO));\r\n         * // result = { isOk: false, reason: 'Base of node cannot be its mixin as well!' }\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          168840,
          169027
        ],
        "filename": "core.js",
        "lineno": 3609,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100006592",
          "name": "this.canSetAsMixin",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "path"
          ]
        }
      },
      "description": "Checks if the given path can be added as a mixin to the given node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the path of the mixin node.",
          "name": "path"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "Returns an object with isOk set to true if the given path can be added as a\rmixin to the given node. If it cannot, the reason will be reported under reason."
        }
      ],
      "examples": [
        "result = core.canSetAsMixin(node, core.getPath(aValidMixinNode));\r// result = { isOk: true, reason: '' }\rresult = core.canSetAsMixin(node, core.getPath(node));\r// result = { isOk: false, reason: 'Node cannot be mixin of itself!' }\rresult = core.canSetAsMixin(node, core.getPath(nonMetaNode));\r// result = { isOk: false, reason: 'Mixin must be on the Meta!!' }\rresult = core.canSetAsMixin(node, core.getPath(FCO));\r// result = { isOk: false, reason: 'Base of node cannot be its mixin as well!' }"
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "canSetAsMixin",
      "longname": "Core#canSetAsMixin",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000315",
      "___s": true
    },
    {
      "comment": "/**\r\n         * It adds a project as library to your project by copying it over. The library will be a node\r\n         * with the given name directly under your project's ROOT. It becomes a read-only portion of your project.\r\n         * You will only be able to manipulate it with library functions, but cannot edit the individual nodes inside.\r\n         * However you will be able to instantiate or copy the nodes into other places of your project. Every node\r\n         * that was part of the META in the originating project becomes part of your project's meta.\r\n         * @param {module:Core~Node} node - any regular node in your project.\r\n         * @param {string} name - the name of the library you wish to use as a namespace in your project.\r\n         * @param {string} libraryRootHash - the hash of your library's root\r\n         * (must exist in the project's collection at the time of call).\r\n         * @param {object} [libraryInfo] - information about your project.\r\n         * @param {string} [libraryInfo.projectId] - the projectId of your library.\r\n         * @param {string} [libraryInfo.branchName] - the branch that your library follows in the origin project.\r\n         * @param {string} [libraryInfo.commitHash] - the version of your library.\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreIllegalOperationError|CoreInternalError|null} callback.error - the\r\n         * result of the execution.\r\n         *\r\n         * @return {external:Promise} If no callback is given, the result is provided in a promise like manner.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */",
      "meta": {
        "range": [
          170848,
          172238
        ],
        "filename": "core.js",
        "lineno": 3640,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100006618",
          "name": "this.addLibrary",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name",
            "libraryRootHash",
            "libraryInfo",
            "callback"
          ]
        },
        "vars": {
          "error": "module:Core~error"
        }
      },
      "description": "It adds a project as library to your project by copying it over. The library will be a node\rwith the given name directly under your project's ROOT. It becomes a read-only portion of your project.\rYou will only be able to manipulate it with library functions, but cannot edit the individual nodes inside.\rHowever you will be able to instantiate or copy the nodes into other places of your project. Every node\rthat was part of the META in the originating project becomes part of your project's meta.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "any regular node in your project.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the library you wish to use as a namespace in your project.",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the hash of your library's root\r(must exist in the project's collection at the time of call).",
          "name": "libraryRootHash"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "optional": true,
          "description": "information about your project.",
          "name": "libraryInfo"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "description": "the projectId of your library.",
          "name": "libraryInfo.projectId"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "description": "the branch that your library follows in the origin project.",
          "name": "libraryInfo.branchName"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "description": "the version of your library.",
          "name": "libraryInfo.commitHash"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "Error",
              "CoreIllegalArgumentError",
              "CoreIllegalOperationError",
              "CoreInternalError",
              "null"
            ]
          },
          "description": "the\rresult of the execution.",
          "name": "callback.error"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "external:Promise"
            ]
          },
          "description": "If no callback is given, the result is provided in a promise like manner."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        }
      ],
      "name": "addLibrary",
      "longname": "Core#addLibrary",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000316",
      "___s": true
    },
    {
      "comment": "/**\r\n         * It updates a library in your project based on the input information. It will 'reaplace' the old\r\n         * version, keeping as much information as possible regarding the instances.\r\n         * @param {module:Core~Node} node - any regular node in your project.\r\n         * @param {string} name - the name of the library you want to update.\r\n         * @param {string} libraryRootHash - the hash of your library's new root\r\n         * (must exist in the project's collection at the time of call).\r\n         * @param {object} [libraryInfo] - information about your project.\r\n         * @param {string} [libraryInfo.projectId] - the projectId of your library.\r\n         * @param {string} [libraryInfo.branchName] - the branch that your library follows in the origin project.\r\n         * @param {string} [libraryInfo.commitHash] - the version of your library.\r\n         * @param updateInstructions - not yet used parameter.\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreIllegalOperationError|CoreInternalError|null} callback.error - the\r\n         * status of the execution.\r\n         *\r\n         * @return {external:Promise} If no callback is given, the result is presented in a promise like manner.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */",
      "meta": {
        "range": [
          173652,
          175070
        ],
        "filename": "core.js",
        "lineno": 3684,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100006774",
          "name": "this.updateLibrary",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name",
            "libraryRootHash",
            "libraryInfo",
            "updateInstructions",
            "callback"
          ]
        },
        "vars": {
          "error": "module:Core~error"
        }
      },
      "description": "It updates a library in your project based on the input information. It will 'reaplace' the old\rversion, keeping as much information as possible regarding the instances.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "any regular node in your project.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the library you want to update.",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the hash of your library's new root\r(must exist in the project's collection at the time of call).",
          "name": "libraryRootHash"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "optional": true,
          "description": "information about your project.",
          "name": "libraryInfo"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "description": "the projectId of your library.",
          "name": "libraryInfo.projectId"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "description": "the branch that your library follows in the origin project.",
          "name": "libraryInfo.branchName"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "description": "the version of your library.",
          "name": "libraryInfo.commitHash"
        },
        {
          "description": "not yet used parameter.",
          "name": "updateInstructions"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "Error",
              "CoreIllegalArgumentError",
              "CoreIllegalOperationError",
              "CoreInternalError",
              "null"
            ]
          },
          "description": "the\rstatus of the execution.",
          "name": "callback.error"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "external:Promise"
            ]
          },
          "description": "If no callback is given, the result is presented in a promise like manner."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        }
      ],
      "name": "updateLibrary",
      "longname": "Core#updateLibrary",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000324",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Gives back the list of libraries in your project.\r\n         *\r\n         * @param {module:Core~Node} node - any node in your project.\r\n         *\r\n         * @return {string[]} Returns the fully qualified names of all the libraries in your project\r\n         * (even embedded ones).\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          175617,
          175757
        ],
        "filename": "core.js",
        "lineno": 3720,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100006931",
          "name": "this.getLibraryNames",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Gives back the list of libraries in your project.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "any node in your project.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "Returns the fully qualified names of all the libraries in your project\r(even embedded ones)."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getLibraryNames",
      "longname": "Core#getLibraryNames",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000332",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Return the root of the inheritance chain of your Meta nodes.\r\n         *\r\n         * @param {module:Core~Node} node - any node in your project.\r\n         *\r\n         * @return {module:Core~Node} Returns the acting FCO of your project.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          176258,
          176380
        ],
        "filename": "core.js",
        "lineno": 3736,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100006950",
          "name": "this.getFCO",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Return the root of the inheritance chain of your Meta nodes.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "any node in your project.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "Returns the acting FCO of your project."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getFCO",
      "longname": "Core#getFCO",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000333",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns true if the node in question is a library root..\r\n         *\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {bool} Returns true if your node is a library root (even if it is embedded in other library),\r\n         * false otherwise.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          176937,
          177073
        ],
        "filename": "core.js",
        "lineno": 3753,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100006969",
          "name": "this.isLibraryRoot",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Returns true if the node in question is a library root..",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "bool"
            ]
          },
          "description": "Returns true if your node is a library root (even if it is embedded in other library),\rfalse otherwise."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "isLibraryRoot",
      "longname": "Core#isLibraryRoot",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000334",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns true if the node in question is a library element..\r\n         *\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {bool} Returns true if your node is a library element, false otherwise.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          177582,
          177724
        ],
        "filename": "core.js",
        "lineno": 3769,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100006988",
          "name": "this.isLibraryElement",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Returns true if the node in question is a library element..",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "bool"
            ]
          },
          "description": "Returns true if your node is a library element, false otherwise."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "isLibraryElement",
      "longname": "Core#isLibraryElement",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000335",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the resolved namespace for the node. If node is not in a library it returns the\r\n         * empty string. If the node is in a library of a library -\r\n         * the full name space is the library names joined together by dots.\r\n         *\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string} Returns the name space of the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         *\r\n         * @example NS1.NS2\r\n         */",
      "meta": {
        "range": [
          178422,
          178556
        ],
        "filename": "core.js",
        "lineno": 3789,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100007007",
          "name": "this.getNamespace",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Returns the resolved namespace for the node. If node is not in a library it returns the\rempty string. If the node is in a library of a library -\rthe full name space is the library names joined together by dots.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the name space of the node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "examples": [
        "NS1.NS2"
      ],
      "name": "getNamespace",
      "longname": "Core#getNamespace",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000336",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the fully qualified name of the node, which is the list of its namespaces separated\r\n         * by dot and followed by the name of the node.\r\n         *\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         * @return {string} Returns the fully qualified name of the node,\r\n         * i.e. its namespaces and name join together by dots.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         *\r\n         * @example NS1.NS2.name\r\n         */",
      "meta": {
        "range": [
          179247,
          179399
        ],
        "filename": "core.js",
        "lineno": 3809,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100007026",
          "name": "this.getFullyQualifiedName",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Returns the fully qualified name of the node, which is the list of its namespaces separated\rby dot and followed by the name of the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the fully qualified name of the node,\ri.e. its namespaces and name join together by dots."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "examples": [
        "NS1.NS2.name"
      ],
      "name": "getFullyQualifiedName",
      "longname": "Core#getFullyQualifiedName",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000337",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Removes a library from your project. It will also remove any remaining instances of the specific library.\r\n         *\r\n         * @param {module:Core~Node} node - any node in your project.\r\n         * @param {string} name - the name of your library.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          180011,
          180410
        ],
        "filename": "core.js",
        "lineno": 3825,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100007045",
          "name": "this.removeLibrary",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name"
          ]
        },
        "vars": {
          "names": "Core#removeLibrary~names"
        }
      },
      "description": "Removes a library from your project. It will also remove any remaining instances of the specific library.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "any node in your project.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of your library.",
          "name": "name"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "removeLibrary",
      "longname": "Core#removeLibrary",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000338",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the origin GUID of any library node. (If name is not provided the returned GUID will be the same\r\n         * across all projects where the library node is contained - regardless of library hierarchy.)\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {undefined|string} [name] - name of the library where we want to compute the GUID from.\r\n         * If not given, then the GUID is computed from the direct library root of the node.\r\n         *\r\n         * @return {module:Core~GUID} Returns the origin GUID of the node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          181337,
          181611
        ],
        "filename": "core.js",
        "lineno": 3849,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100007094",
          "name": "this.getLibraryGuid",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name"
          ]
        }
      },
      "description": "Returns the origin GUID of any library node. (If name is not provided the returned GUID will be the same\racross all projects where the library node is contained - regardless of library hierarchy.)",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "undefined",
              "string"
            ]
          },
          "optional": true,
          "description": "name of the library where we want to compute the GUID from.\rIf not given, then the GUID is computed from the direct library root of the node.",
          "name": "name"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "module:Core~GUID"
            ]
          },
          "description": "Returns the origin GUID of the node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getLibraryGuid",
      "longname": "Core#getLibraryGuid",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000340",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Rename a library in your project.\r\n         *\r\n         * @param {module:Core~Node} node - any node in your project.\r\n         * @param {string} oldName - the current name of the library.\r\n         * @param {string} newName - the new name of the project.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          182228,
          182503
        ],
        "filename": "core.js",
        "lineno": 3869,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100007130",
          "name": "this.renameLibrary",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "oldName",
            "newName"
          ]
        }
      },
      "description": "Rename a library in your project.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "any node in your project.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the current name of the library.",
          "name": "oldName"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the new name of the project.",
          "name": "newName"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "renameLibrary",
      "longname": "Core#renameLibrary",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000341",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the info associated with the library.\r\n         *\r\n         * @param {module:Core~Node} node - any node in the project.\r\n         * @param {string} name - the name of the library.\r\n         *\r\n         * @return {object} Returns the information object, stored alongside the library (that basically\r\n         * carries metaData about the library).\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          183220,
          183438
        ],
        "filename": "core.js",
        "lineno": 3890,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100007165",
          "name": "this.getLibraryInfo",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name"
          ]
        }
      },
      "description": "Returns the info associated with the library.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "any node in the project.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the library.",
          "name": "name"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "Returns the information object, stored alongside the library (that basically\rcarries metaData about the library)."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getLibraryInfo",
      "longname": "Core#getLibraryInfo",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000342",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the root node of the given library.\r\n         *\r\n         * @param {module:Core~Node} node - any node in the project.\r\n         * @param {string} name - the name of the library.\r\n         *\r\n         * @return {module:Core~Node|null} Returns the library root node or null, if the library is unknown.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          184012,
          184211
        ],
        "filename": "core.js",
        "lineno": 3908,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100007196",
          "name": "this.getLibraryRoot",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name"
          ]
        }
      },
      "description": "Returns the root node of the given library.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "any node in the project.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the library.",
          "name": "name"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "module:Core~Node",
              "null"
            ]
          },
          "description": "Returns the library root node or null, if the library is unknown."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getLibraryRoot",
      "longname": "Core#getLibraryRoot",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000343",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns all the Meta nodes within the given library.\r\n         * By default it will include nodes defined in any library within the given library.\r\n         *\r\n         * @param {module:Core~Node} node - any node of your project.\r\n         * @param {string} name - name of your library.\r\n         * @param {bool} [onlyOwn=false] - if true only returns with Meta nodes defined in the library itself.\r\n         *\r\n         * @return {module:Core~Node[]} Returns an array of core nodes that are part of your meta from\r\n         * the given library.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          185023,
          185387
        ],
        "filename": "core.js",
        "lineno": 3929,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100007223",
          "name": "this.getLibraryMetaNodes",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name",
            "onlyOwn"
          ]
        }
      },
      "description": "Returns all the Meta nodes within the given library.\rBy default it will include nodes defined in any library within the given library.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "any node of your project.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "name of your library.",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "bool"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "if true only returns with Meta nodes defined in the library itself.",
          "name": "onlyOwn"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<module:Core~Node>"
            ]
          },
          "description": "Returns an array of core nodes that are part of your meta from\rthe given library."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getLibraryMetaNodes",
      "longname": "Core#getLibraryMetaNodes",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000344",
      "___s": true
    },
    {
      "comment": "/**\r\n         * The function traverses the sub-tree of the project starting with the given root and calls the\r\n         * visit function for every node.\r\n         *\r\n         * @param {module:Core~Node} root - the root node of the sub-tree that needs to be traversed.\r\n         * @param {object} options - parameters to control the traversing.\r\n         * @param {bool} [options.excludeRoot=false] - controls whether the root should be excluded from visit.\r\n         * @param {'BFS'|'DFS'} [options.order='BFS'] - controls if the traversal order should be breadth first\r\n         * or depth first.\r\n         * @param {integer} [options.maxParallelLoad=100]- the maximum number of parallel loads allowed.\r\n         * @param {bool} [options.stopOnError=true]- controls if the traverse should stop in case of error.\r\n         * @param {function} visitFn - the visitation function that will be called for\r\n         * every node in the sub-tree, the second parameter of the function is a callback that should be called to\r\n         * note to the traversal function that the visitation for a given node finished.\r\n         * @param {module:Core~Node} visitFn.node - the node that is being visited.\r\n         * @param {function} visitFn.next - the callback function of the visit function that marks the end\r\n         * of visitation.\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreInternalError|null} callback.error - the status of the execution.\r\n         *\r\n         * @return {external:Promise} If no callback is given, the end of traverse is marked in a promise like\r\n         * manner.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */",
      "meta": {
        "range": [
          187172,
          188540
        ],
        "filename": "core.js",
        "lineno": 3964,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100007267",
          "name": "this.traverse",
          "type": "FunctionExpression",
          "paramnames": [
            "root",
            "options",
            "visitFn",
            "callback"
          ]
        },
        "vars": {
          "error": "module:Core~error"
        }
      },
      "description": "The function traverses the sub-tree of the project starting with the given root and calls the\rvisit function for every node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the root node of the sub-tree that needs to be traversed.",
          "name": "root"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "parameters to control the traversing.",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "bool"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "controls whether the root should be excluded from visit.",
          "name": "options.excludeRoot"
        },
        {
          "type": {
            "names": [
              "'BFS'",
              "'DFS'"
            ]
          },
          "optional": true,
          "defaultvalue": "'BFS'",
          "description": "controls if the traversal order should be breadth first\ror depth first.",
          "name": "options.order"
        },
        {
          "type": {
            "names": [
              "integer"
            ]
          },
          "optional": true,
          "defaultvalue": 100,
          "description": "the maximum number of parallel loads allowed.",
          "name": "options.maxParallelLoad"
        },
        {
          "type": {
            "names": [
              "bool"
            ]
          },
          "optional": true,
          "defaultvalue": true,
          "description": "controls if the traverse should stop in case of error.",
          "name": "options.stopOnError"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "the visitation function that will be called for\revery node in the sub-tree, the second parameter of the function is a callback that should be called to\rnote to the traversal function that the visitation for a given node finished.",
          "name": "visitFn"
        },
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node that is being visited.",
          "name": "visitFn.node"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "the callback function of the visit function that marks the end\rof visitation.",
          "name": "visitFn.next"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "Error",
              "CoreIllegalArgumentError",
              "CoreInternalError",
              "null"
            ]
          },
          "description": "the status of the execution.",
          "name": "callback.error"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "external:Promise"
            ]
          },
          "description": "If no callback is given, the end of traverse is marked in a promise like\rmanner."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        }
      ],
      "name": "traverse",
      "longname": "Core#traverse",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000345",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Collects the necessary information to export the set of input nodes and use it in other\r\n         * - compatible - projects.\r\n         * @private\r\n         *\r\n         * @param {module:Core~Node[]} nodes - the set of nodes that we want to export\r\n         *\r\n         * @return {object} If the closure is available for export, the returned special JSON object\r\n         * will contain information about the necessary data that needs to be exported as well as relations\r\n         * that will need to be recreated in the destination project to preserve the structure of nodes.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          189477,
          189769
        ],
        "filename": "core.js",
        "lineno": 4007,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100007413",
          "name": "this.getClosureInformation",
          "type": "FunctionExpression",
          "paramnames": [
            "nodes"
          ]
        },
        "vars": {
          "i": "module:Core~i"
        }
      },
      "description": "Collects the necessary information to export the set of input nodes and use it in other\r- compatible - projects.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array.<module:Core~Node>"
            ]
          },
          "description": "the set of nodes that we want to export",
          "name": "nodes"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "If the closure is available for export, the returned special JSON object\rwill contain information about the necessary data that needs to be exported as well as relations\rthat will need to be recreated in the destination project to preserve the structure of nodes."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getClosureInformation",
      "longname": "Core#getClosureInformation",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000353",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Imports the set of nodes in the closureInformation - that has the format created by\r\n         * [getClosureInformation]{@link Core#getClosureInformation} - as direct children of the parent node.\r\n         * All data necessary for importing the closure has to be imported beforehand!\r\n         * @private\r\n         *\r\n         * @param {module:Core~Node} node - the parent node where the closure will be imported.\r\n         * @param {object} closureInformation - the information about the closure.\r\n         *\r\n         * @return {object} If the closure cannot be imported the resulting error highlights the causes,\r\n         * otherwise a specific object will be returned that holds information about the closure.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          190749,
          191002
        ],
        "filename": "core.js",
        "lineno": 4031,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100007454",
          "name": "this.importClosure",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "closureInformation"
          ]
        }
      },
      "description": "Imports the set of nodes in the closureInformation - that has the format created by\r[getClosureInformation]{@link Core#getClosureInformation} - as direct children of the parent node.\rAll data necessary for importing the closure has to be imported beforehand!",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the parent node where the closure will be imported.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "the information about the closure.",
          "name": "closureInformation"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "If the closure cannot be imported the resulting error highlights the causes,\rotherwise a specific object will be returned that holds information about the closure."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "importClosure",
      "longname": "Core#importClosure",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000356",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Collects the paths of all the instances of the given node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         *\r\n         *@return {string[]} The function returns an array of the absolute paths of the instances.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          191506,
          191648
        ],
        "filename": "core.js",
        "lineno": 4047,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100007481",
          "name": "this.getInstancePaths",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Collects the paths of all the instances of the given node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "The function returns an array of the absolute paths of the instances."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getInstancePaths",
      "longname": "Core#getInstancePaths",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000357",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Loads all the instances of the given node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreInternalError|null} callback.error - the status of the execution.\r\n         * @param {module:Core~Node[]} callback.nodes - the found instances of the node.\r\n         *\r\n         * @return {external:Promise} If no callback is given, the result will be provided in a promise\r\n         * like manner.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */",
      "meta": {
        "range": [
          192320,
          192645
        ],
        "filename": "core.js",
        "lineno": 4065,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100007500",
          "name": "this.loadInstances",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "callback"
          ]
        },
        "vars": {
          "error": "Core#loadInstances~error"
        }
      },
      "description": "Loads all the instances of the given node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "Error",
              "CoreIllegalArgumentError",
              "CoreInternalError",
              "null"
            ]
          },
          "description": "the status of the execution.",
          "name": "callback.error"
        },
        {
          "type": {
            "names": [
              "Array.<module:Core~Node>"
            ]
          },
          "description": "the found instances of the node.",
          "name": "callback.nodes"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "external:Promise"
            ]
          },
          "description": "If no callback is given, the result will be provided in a promise\rlike manner."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        }
      ],
      "name": "loadInstances",
      "longname": "Core#loadInstances",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000358",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Loads all the members of the given set of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} setName - the name of the set in question.\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreInternalError|null} callback.error - the status of the execution.\r\n         * @param {module:Core~Node[]} callback.nodes - the found members of the set of the node.\r\n         *\r\n         * @return {external:Promise} If no callback is given, the result will be provided in a promise\r\n         * like manner.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */",
      "meta": {
        "range": [
          193406,
          193800
        ],
        "filename": "core.js",
        "lineno": 4088,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100007538",
          "name": "this.loadMembers",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "setName",
            "callback"
          ]
        },
        "vars": {
          "error": "Core#loadMembers~error"
        }
      },
      "description": "Loads all the members of the given set of the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set in question.",
          "name": "setName"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "Error",
              "CoreIllegalArgumentError",
              "CoreInternalError",
              "null"
            ]
          },
          "description": "the status of the execution.",
          "name": "callback.error"
        },
        {
          "type": {
            "names": [
              "Array.<module:Core~Node>"
            ]
          },
          "description": "the found members of the set of the node.",
          "name": "callback.nodes"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "external:Promise"
            ]
          },
          "description": "If no callback is given, the result will be provided in a promise\rlike manner."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        }
      ],
      "name": "loadMembers",
      "longname": "Core#loadMembers",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000360",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Loads all the own members of the given set of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} setName - the name of the set in question.\r\n         * @param {function} [callback]\r\n         * @param {Error|CoreIllegalArgumentError|CoreInternalError|null} callback.error - the status of the execution.\r\n         * @param {module:Core~Node[]} callback.nodes - the found own members of the set of the node.\r\n         *\r\n         * @return {external:Promise} If no callback is given, the result will be provided in a promise\r\n         * like manner.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         */",
      "meta": {
        "range": [
          194569,
          194969
        ],
        "filename": "core.js",
        "lineno": 4112,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100007584",
          "name": "this.loadOwnMembers",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "setName",
            "callback"
          ]
        },
        "vars": {
          "error": "Core#loadOwnMembers~error"
        }
      },
      "description": "Loads all the own members of the given set of the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set in question.",
          "name": "setName"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "Error",
              "CoreIllegalArgumentError",
              "CoreInternalError",
              "null"
            ]
          },
          "description": "the status of the execution.",
          "name": "callback.error"
        },
        {
          "type": {
            "names": [
              "Array.<module:Core~Node>"
            ]
          },
          "description": "the found own members of the set of the node.",
          "name": "callback.nodes"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "external:Promise"
            ]
          },
          "description": "If no callback is given, the result will be provided in a promise\rlike manner."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        }
      ],
      "name": "loadOwnMembers",
      "longname": "Core#loadOwnMembers",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000362",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Renames the given pointer of the node if its target is not inherited.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} oldName - the current name of the pointer in question.\r\n         * @param {string} newName - the new name of the pointer.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          195618,
          196146
        ],
        "filename": "core.js",
        "lineno": 4133,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100007630",
          "name": "this.renamePointer",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "oldName",
            "newName"
          ]
        }
      },
      "description": "Renames the given pointer of the node if its target is not inherited.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the current name of the pointer in question.",
          "name": "oldName"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the new name of the pointer.",
          "name": "newName"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "renamePointer",
      "longname": "Core#renamePointer",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000364",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Renames the given attribute of the node if its value is not inherited.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} oldName - the current name of the attribute in question.\r\n         * @param {string} newName - the new name of the attribute.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          196800,
          197336
        ],
        "filename": "core.js",
        "lineno": 4156,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100007685",
          "name": "this.renameAttribute",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "oldName",
            "newName"
          ]
        }
      },
      "description": "Renames the given attribute of the node if its value is not inherited.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the current name of the attribute in question.",
          "name": "oldName"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the new name of the attribute.",
          "name": "newName"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "renameAttribute",
      "longname": "Core#renameAttribute",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000365",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Renames the given registry of the node if its value is not inherited.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} oldName - the current name of the registry in question.\r\n         * @param {string} newName - the new name of the registry.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          197987,
          198526
        ],
        "filename": "core.js",
        "lineno": 4179,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100007740",
          "name": "this.renameRegistry",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "oldName",
            "newName"
          ]
        }
      },
      "description": "Renames the given registry of the node if its value is not inherited.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the current name of the registry in question.",
          "name": "oldName"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the new name of the registry.",
          "name": "newName"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "renameRegistry",
      "longname": "Core#renameRegistry",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000366",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Renames the given set of the node if its is not inherited.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} oldName - the current name of the set in question.\r\n         * @param {string} newName - the new name of the set.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          199156,
          199690
        ],
        "filename": "core.js",
        "lineno": 4202,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100007795",
          "name": "this.renameSet",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "oldName",
            "newName"
          ]
        }
      },
      "description": "Renames the given set of the node if its is not inherited.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the current name of the set in question.",
          "name": "oldName"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the new name of the set.",
          "name": "newName"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "renameSet",
      "longname": "Core#renameSet",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000367",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the meta node that introduces the given attribute.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the attribute in question.\r\n         *\r\n         * @return {module:Core~Node} The meta-node that defines the attribute and makes it valid attribute for the\r\n         * given node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          200405,
          200834
        ],
        "filename": "core.js",
        "lineno": 4227,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100007858",
          "name": "this.getAttributeDefinitionOwner",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name"
          ]
        }
      },
      "description": "Returns the meta node that introduces the given attribute.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the attribute in question.",
          "name": "name"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "The meta-node that defines the attribute and makes it valid attribute for the\rgiven node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getAttributeDefinitionOwner",
      "longname": "Core#getAttributeDefinitionOwner",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000368",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the meta nodes that introduce the given pointer relationship.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the pointer in question.\r\n         * @param {module:Core~Node} target - the target node.\r\n         *\r\n         * @return {module:Core~DefinitionInfo} The owner and the target of the pointer meta-rule that makes target a\r\n         * valid target of the named pointer of node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          201655,
          202326
        ],
        "filename": "core.js",
        "lineno": 4251,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100007907",
          "name": "this.getPointerDefinitionInfo",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name",
            "target"
          ]
        }
      },
      "description": "Returns the meta nodes that introduce the given pointer relationship.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the pointer in question.",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the target node.",
          "name": "target"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "module:Core~DefinitionInfo"
            ]
          },
          "description": "The owner and the target of the pointer meta-rule that makes target a\rvalid target of the named pointer of node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getPointerDefinitionInfo",
      "longname": "Core#getPointerDefinitionInfo",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000369",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the meta nodes that introduce the given set relationship.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the set in question.\r\n         * @param {module:Core~Node} member - the member.\r\n         *\r\n         * @return {module:Core~DefinitionInfo} The owner and the target of the set meta-rule that makes member a\r\n         * valid member of the named set of node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          203126,
          203772
        ],
        "filename": "core.js",
        "lineno": 4280,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100007982",
          "name": "this.getSetDefinitionInfo",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name",
            "member"
          ]
        }
      },
      "description": "Returns the meta nodes that introduce the given set relationship.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set in question.",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the member.",
          "name": "member"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "module:Core~DefinitionInfo"
            ]
          },
          "description": "The owner and the target of the set meta-rule that makes member a\rvalid member of the named set of node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getSetDefinitionInfo",
      "longname": "Core#getSetDefinitionInfo",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000370",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the meta nodes that introduce the given containment relationship.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {module:Core~Node} child - the child.\r\n         *\r\n         * @return {module:Core~DefinitionInfo} The owner and the target of the containment meta-rule that makes child a\r\n         * valid child of node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          204499,
          204863
        ],
        "filename": "core.js",
        "lineno": 4308,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100008057",
          "name": "this.getChildDefinitionInfo",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "child"
          ]
        }
      },
      "description": "Returns the meta nodes that introduce the given containment relationship.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the child.",
          "name": "child"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "module:Core~DefinitionInfo"
            ]
          },
          "description": "The owner and the target of the containment meta-rule that makes child a\rvalid child of node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getChildDefinitionInfo",
      "longname": "Core#getChildDefinitionInfo",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000371",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the meta nodes that introduce the given aspect relationship.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the set in question.\r\n         * @param {module:Core~Node} member - the child.\r\n         *\r\n         * @return {module:Core~DefinitionInfo} The owner and the target of the aspect meta-rule that makes member a\r\n         * valid member of the named aspect of node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          205671,
          206338
        ],
        "filename": "core.js",
        "lineno": 4332,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100008097",
          "name": "this.getAspectDefinitionInfo",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name",
            "member"
          ]
        }
      },
      "description": "Returns the meta nodes that introduce the given aspect relationship.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set in question.",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the child.",
          "name": "member"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "module:Core~DefinitionInfo"
            ]
          },
          "description": "The owner and the target of the aspect meta-rule that makes member a\rvalid member of the named aspect of node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getAspectDefinitionInfo",
      "longname": "Core#getAspectDefinitionInfo",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000372",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the paths of the meta nodes that are valid target members of the given aspect.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the aspec in question.\r\n         *\r\n         * @return {string[]} The paths of the meta nodes whose instances could be members of the aspect.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          207043,
          207457
        ],
        "filename": "core.js",
        "lineno": 4359,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100008172",
          "name": "this.getValidAspectTargetPaths",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name"
          ]
        }
      },
      "description": "Returns the paths of the meta nodes that are valid target members of the given aspect.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the aspec in question.",
          "name": "name"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "The paths of the meta nodes whose instances could be members of the aspect."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getValidAspectTargetPaths",
      "longname": "Core#getValidAspectTargetPaths",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000373",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the paths of the meta nodes that are valid target members of the given aspect\r\n         * specifically defined for the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the aspec in question.\r\n         *\r\n         * @return {string[]} The paths of the meta nodes whose instances could be members of the aspect.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          208208,
          208628
        ],
        "filename": "core.js",
        "lineno": 4382,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100008221",
          "name": "this.getOwnValidAspectTargetPaths",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name"
          ]
        }
      },
      "description": "Returns the paths of the meta nodes that are valid target members of the given aspect\rspecifically defined for the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the aspec in question.",
          "name": "name"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "The paths of the meta nodes whose instances could be members of the aspect."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getOwnValidAspectTargetPaths",
      "longname": "Core#getOwnValidAspectTargetPaths",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000374",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the meta node that introduces the given aspect.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of the set in question.\r\n         *\r\n         * @return {module:Core~Node} The meta-node that defines the aspect and makes a valid aspect for the given node.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          209315,
          209730
        ],
        "filename": "core.js",
        "lineno": 4404,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100008270",
          "name": "this.getAspectDefinitionOwner",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name"
          ]
        }
      },
      "description": "Returns the meta node that introduces the given aspect.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set in question.",
          "name": "name"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "The meta-node that defines the aspect and makes a valid aspect for the given node."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getAspectDefinitionOwner",
      "longname": "Core#getAspectDefinitionOwner",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000375",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Moves an own member of the set over to another set of the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} memberPath - the path of the memberNode that should be moved.\r\n         * @param {string} oldSetName - the name of the set where the member is currently reside.\r\n         * @param {string} newSetName - the name of the target set where the member should be moved to.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          210517,
          211425
        ],
        "filename": "core.js",
        "lineno": 4426,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100008319",
          "name": "this.moveMember",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "memberPath",
            "oldSetName",
            "newSetName"
          ]
        }
      },
      "description": "Moves an own member of the set over to another set of the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the path of the memberNode that should be moved.",
          "name": "memberPath"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the set where the member is currently reside.",
          "name": "oldSetName"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of the target set where the member should be moved to.",
          "name": "newSetName"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "moveMember",
      "longname": "Core#moveMember",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000376",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Renames the given attribute definition of the node. It also renames the default value of the definition!\r\n         * As a result of this operation, all instances of node will have the new attribute, but if they have\r\n         * overriden the old attribute it will remain under that name (and become meta invalid).\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} oldName - the current name of the attribute definition in question.\r\n         * @param {string} newName - the new name of the attribute.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          212333,
          212893
        ],
        "filename": "core.js",
        "lineno": 4457,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100008414",
          "name": "this.renameAttributeMeta",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "oldName",
            "newName"
          ]
        }
      },
      "description": "Renames the given attribute definition of the node. It also renames the default value of the definition!\rAs a result of this operation, all instances of node will have the new attribute, but if they have\roverriden the old attribute it will remain under that name (and become meta invalid).",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the current name of the attribute definition in question.",
          "name": "oldName"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the new name of the attribute.",
          "name": "newName"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "renameAttributeMeta",
      "longname": "Core#renameAttributeMeta",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000377",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Moves the given target definition over to a new pointer or set.\r\n         * Note this does not alter the actual pointer target or set members.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {module:Core~Node} target - the target that should be moved among definitions.\r\n         * @param {string} oldName - the current name of the pointer/set definition in question.\r\n         * @param {string} newName - the new name of the relation towards the target.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          213748,
          214686
        ],
        "filename": "core.js",
        "lineno": 4482,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100008477",
          "name": "this.movePointerMetaTarget",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "target",
            "oldName",
            "newName"
          ]
        }
      },
      "description": "Moves the given target definition over to a new pointer or set.\rNote this does not alter the actual pointer target or set members.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the target that should be moved among definitions.",
          "name": "target"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the current name of the pointer/set definition in question.",
          "name": "oldName"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the new name of the relation towards the target.",
          "name": "newName"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "movePointerMetaTarget",
      "longname": "Core#movePointerMetaTarget",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000378",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Moves the given target definition over to a new aspect. As actual values in case of\r\n         * relation definitions vary quite a bit from the meta-targets, this function does not deals with\r\n         * the actual pointer/set target/members.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {module:Core~Node} target - the target that should be moved among definitions.\r\n         * @param {string} oldName - the current name of the aspect that has the target.\r\n         * @param {string} newName - the new aspect name where the target should be moved over.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreIllegalOperationError} If the context of the operation is not allowed.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          215642,
          216504
        ],
        "filename": "core.js",
        "lineno": 4514,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100008587",
          "name": "this.moveAspectMetaTarget",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "target",
            "oldName",
            "newName"
          ]
        }
      },
      "description": "Moves the given target definition over to a new aspect. As actual values in case of\rrelation definitions vary quite a bit from the meta-targets, this function does not deals with\rthe actual pointer/set target/members.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the target that should be moved among definitions.",
          "name": "target"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the current name of the aspect that has the target.",
          "name": "oldName"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the new aspect name where the target should be moved over.",
          "name": "newName"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreIllegalOperationError"
            ]
          },
          "description": "If the context of the operation is not allowed."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "moveAspectMetaTarget",
      "longname": "Core#moveAspectMetaTarget",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000379",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns if a node could be contained in the given container's aspect.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {module:Core~Node} parent - the container node in question.\r\n         * @param {string} name - the name of aspect.\r\n         *\r\n         * @return {bool} The function returns true if the given container could contain the node in the asked aspect.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          217173,
          217445
        ],
        "filename": "core.js",
        "lineno": 4543,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100008684",
          "name": "this.isValidAspectMemberOf",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "parent",
            "name"
          ]
        }
      },
      "description": "Returns if a node could be contained in the given container's aspect.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the container node in question.",
          "name": "parent"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of aspect.",
          "name": "name"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "bool"
            ]
          },
          "description": "The function returns true if the given container could contain the node in the asked aspect."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "isValidAspectMemberOf",
      "longname": "Core#isValidAspectMemberOf",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000380",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the paths of Meta nodes that are possible targets of the given pointer/set introduced by the node.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of pointer/set.\r\n         *\r\n         * @return {string[]} The function returns the paths of valid nodes.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          218035,
          218248
        ],
        "filename": "core.js",
        "lineno": 4561,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100008718",
          "name": "this.getOwnValidTargetPaths",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name"
          ]
        }
      },
      "description": "Returns the paths of Meta nodes that are possible targets of the given pointer/set introduced by the node.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of pointer/set.",
          "name": "name"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "The function returns the paths of valid nodes."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getOwnValidTargetPaths",
      "longname": "Core#getOwnValidTargetPaths",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000381",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Returns the paths of Meta nodes that are possible targets of the given pointer/set.\r\n         * @param {module:Core~Node} node - the node in question.\r\n         * @param {string} name - the name of pointer/set.\r\n         *\r\n         * @return {string[]} The function returns the paths of valid nodes.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          218815,
          219022
        ],
        "filename": "core.js",
        "lineno": 4578,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100008744",
          "name": "this.getValidTargetPaths",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "name"
          ]
        }
      },
      "description": "Returns the paths of Meta nodes that are possible targets of the given pointer/set.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node"
            ]
          },
          "description": "the node in question.",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the name of pointer/set.",
          "name": "name"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "The function returns the paths of valid nodes."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "getValidTargetPaths",
      "longname": "Core#getValidTargetPaths",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000382",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Checks if an instance of the given base can be created under the parent. It does not check for\r\n         * meta consistency. It only validates if the proposed creation would cause any loops in the\r\n         * combined containment inheritance trees.\r\n         * @param {module:Core~Node|null} parentNode - the parent in question.\r\n         * @param {module:Core~Node|null} baseNode - the intended type of the node.\r\n         *\r\n         * @return {boolean} True if a child of the type can be created.\r\n         *\r\n         * @throws {CoreIllegalArgumentError} If some of the parameters don't match the input criteria.\r\n         * @throws {CoreInternalError} If some internal error took place inside the core layers.\r\n         */",
      "meta": {
        "range": [
          219788,
          220137
        ],
        "filename": "core.js",
        "lineno": 4597,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core",
        "code": {
          "id": "astnode100008770",
          "name": "this.isValidNewChild",
          "type": "FunctionExpression",
          "paramnames": [
            "parentNode",
            "baseNode"
          ]
        }
      },
      "description": "Checks if an instance of the given base can be created under the parent. It does not check for\rmeta consistency. It only validates if the proposed creation would cause any loops in the\rcombined containment inheritance trees.",
      "params": [
        {
          "type": {
            "names": [
              "module:Core~Node",
              "null"
            ]
          },
          "description": "the parent in question.",
          "name": "parentNode"
        },
        {
          "type": {
            "names": [
              "module:Core~Node",
              "null"
            ]
          },
          "description": "the intended type of the node.",
          "name": "baseNode"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "True if a child of the type can be created."
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "CoreIllegalArgumentError"
            ]
          },
          "description": "If some of the parameters don't match the input criteria."
        },
        {
          "type": {
            "names": [
              "CoreInternalError"
            ]
          },
          "description": "If some internal error took place inside the core layers."
        }
      ],
      "name": "isValidNewChild",
      "longname": "Core#isValidNewChild",
      "kind": "function",
      "memberof": "Core",
      "scope": "instance",
      "___id": "T000002R000383",
      "___s": true
    },
    {
      "comment": "/**\r\n     *\r\n     * @param {string} projectId - Id of project to be opened.\r\n     * @param {object} storageObjectsAccessor - Exposes loadObject towards the database.\r\n     * @param {GmeLogger} mainLogger - Logger instance from instantiator.\r\n     * @param {GmeConfig} gmeConfig\r\n     * @alias ProjectInterface\r\n     * @constructor\r\n     */",
      "meta": {
        "range": [
          782,
          21830
        ],
        "filename": "interface.js",
        "lineno": 29,
        "columnno": 4,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\storage\\project",
        "code": {
          "id": "astnode100008833",
          "name": "ProjectInterface",
          "type": "FunctionDeclaration",
          "paramnames": [
            "projectId",
            "storageObjectsAccessor",
            "mainLogger",
            "gmeConfig"
          ]
        },
        "vars": {
          "this.projectId": "ProjectInterface#projectId",
          "this.projectName": "ProjectInterface#projectName",
          "this.CONSTANTS": "ProjectInterface#CONSTANTS",
          "this.ID_NAME": "ProjectInterface#ID_NAME",
          "this.gmeConfig": "ProjectInterface#gmeConfig",
          "this.logger": "ProjectInterface#logger",
          "this.projectCache": "ProjectInterface#projectCache",
          "this.insertObject": "ProjectInterface#insertObject",
          "this.insertPatchObject": "ProjectInterface#insertPatchObject",
          "this.loadObject": "ProjectInterface#loadObject",
          "this.loadPaths": "ProjectInterface#loadPaths",
          "this.makeCommit": "ProjectInterface#makeCommit",
          "": null,
          "this.getProjectInfo": "ProjectInterface#getProjectInfo",
          "this.setBranchHash": "ProjectInterface#setBranchHash",
          "this.getBranchHash": "ProjectInterface#getBranchHash",
          "this.getRootHash": "ProjectInterface#getRootHash",
          "this.createBranch": "ProjectInterface#createBranch",
          "this.deleteBranch": "ProjectInterface#deleteBranch",
          "this.getBranches": "ProjectInterface#getBranches",
          "this.getCommitObject": "ProjectInterface#getCommitObject",
          "this.getHistory": "ProjectInterface#getHistory",
          "this.getCommits": "ProjectInterface#getCommits",
          "this.createTag": "ProjectInterface#createTag",
          "this.deleteTag": "ProjectInterface#deleteTag",
          "this.getTags": "ProjectInterface#getTags",
          "this.getCommonAncestorCommit": "ProjectInterface#getCommonAncestorCommit",
          "this.getUserId": "ProjectInterface#getUserId"
        }
      },
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Id of project to be opened.",
          "name": "projectId"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "Exposes loadObject towards the database.",
          "name": "storageObjectsAccessor"
        },
        {
          "type": {
            "names": [
              "GmeLogger"
            ]
          },
          "description": "Logger instance from instantiator.",
          "name": "mainLogger"
        },
        {
          "type": {
            "names": [
              "GmeConfig"
            ]
          },
          "name": "gmeConfig"
        }
      ],
      "alias": "ProjectInterface",
      "kind": "class",
      "name": "ProjectInterface",
      "longname": "ProjectInterface",
      "scope": "global",
      "___id": "T000002R000385",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Unique ID of project, built up by the ownerId and projectName.\r\n         *\r\n         * @example\r\n         * 'guest+TestProject', 'organization+TestProject2'\r\n         * @type {string}\r\n         */",
      "meta": {
        "range": [
          1101,
          1127
        ],
        "filename": "interface.js",
        "lineno": 38,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\storage\\project",
        "code": {
          "id": "astnode100008841",
          "name": "this.projectId",
          "type": "Identifier",
          "value": "projectId",
          "paramnames": []
        }
      },
      "description": "Unique ID of project, built up by the ownerId and projectName.",
      "examples": [
        "'guest+TestProject', 'organization+TestProject2'"
      ],
      "type": {
        "names": [
          "string"
        ]
      },
      "name": "projectId",
      "longname": "ProjectInterface#projectId",
      "kind": "member",
      "memberof": "ProjectInterface",
      "scope": "instance",
      "___id": "T000002R000386",
      "___s": true
    },
    {
      "comment": "/**\r\n         * @type {GmeConfig}\r\n         */",
      "meta": {
        "range": [
          1354,
          1380
        ],
        "filename": "interface.js",
        "lineno": 48,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\storage\\project",
        "code": {
          "id": "astnode100008871",
          "name": "this.gmeConfig",
          "type": "Identifier",
          "value": "gmeConfig",
          "paramnames": []
        }
      },
      "type": {
        "names": [
          "GmeConfig"
        ]
      },
      "name": "gmeConfig",
      "longname": "ProjectInterface#gmeConfig",
      "kind": "member",
      "memberof": "ProjectInterface",
      "scope": "instance",
      "___id": "T000002R000390",
      "___s": true
    },
    {
      "comment": "/**\r\n         * @type {GmeLogger}\r\n         */",
      "meta": {
        "range": [
          1449,
          1507
        ],
        "filename": "interface.js",
        "lineno": 53,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\storage\\project",
        "code": {
          "id": "astnode100008877",
          "name": "this.logger",
          "type": "CallExpression",
          "value": "",
          "paramnames": []
        }
      },
      "type": {
        "names": [
          "GmeLogger"
        ]
      },
      "name": "logger",
      "longname": "ProjectInterface#logger",
      "kind": "member",
      "memberof": "ProjectInterface",
      "scope": "instance",
      "___id": "T000002R000391",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Inserts the given object to project-cache.\r\n         *\r\n         * @param {module:Storage~CommitObject|module:Core~ObjectData} obj - Object to be inserted in database.\r\n         * @param {Object.<module:Core~ObjectHash, module:Core~ObjectData>} [stackedObjects] - When used by the core,\r\n         * inserts between persists are stored here.\r\n         * @func\r\n         * @private\r\n         */",
      "meta": {
        "range": [
          2148,
          2198
        ],
        "filename": "interface.js",
        "lineno": 68,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\storage\\project",
        "code": {
          "id": "astnode100008915",
          "name": "this.insertObject",
          "type": "MemberExpression",
          "value": "this.projectCache.insertObject",
          "paramnames": []
        }
      },
      "description": "Inserts the given object to project-cache.",
      "params": [
        {
          "type": {
            "names": [
              "module:Storage~CommitObject",
              "module:Core~ObjectData"
            ]
          },
          "description": "Object to be inserted in database.",
          "name": "obj"
        },
        {
          "type": {
            "names": [
              "Object.<module:Core~ObjectHash, module:Core~ObjectData>"
            ]
          },
          "optional": true,
          "description": "When used by the core,\rinserts between persists are stored here.",
          "name": "stackedObjects"
        }
      ],
      "kind": "function",
      "access": "private",
      "name": "insertObject",
      "longname": "ProjectInterface#insertObject",
      "memberof": "ProjectInterface",
      "scope": "instance",
      "___id": "T000002R000393",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Try to create the full object from the patch object by looking for the base object in the cache.\r\n         * If the base has been found it applies the patch and inserts the result. If any step fails it simply\r\n         * ignores the insert.\r\n         *\r\n         * @param {module:Storage~CommitObject|module:Core~ObjectData} obj - Object to be inserted in database.\r\n         * @func\r\n         * @private\r\n         */",
      "meta": {
        "range": [
          2654,
          2714
        ],
        "filename": "interface.js",
        "lineno": 79,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\storage\\project",
        "code": {
          "id": "astnode100008925",
          "name": "this.insertPatchObject",
          "type": "MemberExpression",
          "value": "this.projectCache.insertPatchObject",
          "paramnames": []
        }
      },
      "description": "Try to create the full object from the patch object by looking for the base object in the cache.\rIf the base has been found it applies the patch and inserts the result. If any step fails it simply\rignores the insert.",
      "params": [
        {
          "type": {
            "names": [
              "module:Storage~CommitObject",
              "module:Core~ObjectData"
            ]
          },
          "description": "Object to be inserted in database.",
          "name": "obj"
        }
      ],
      "kind": "function",
      "access": "private",
      "name": "insertPatchObject",
      "longname": "ProjectInterface#insertPatchObject",
      "memberof": "ProjectInterface",
      "scope": "instance",
      "___id": "T000002R000394",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Callback for loadObject.\r\n         *\r\n         * @callback ProjectInterface~loadObjectCallback\r\n         * @param {Error} err - If error occurred.\r\n         * @param {module:Storage~CommitObject|module:Core~ObjectData} object - Object loaded from database,\r\n         * commit-object or model data-blob.\r\n         */",
      "meta": {
        "filename": "interface.js",
        "lineno": 81,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\storage\\project",
        "code": {}
      },
      "description": "Callback for loadObject.",
      "kind": "typedef",
      "name": "loadObjectCallback",
      "type": {
        "names": [
          "function"
        ]
      },
      "params": [
        {
          "type": {
            "names": [
              "Error"
            ]
          },
          "description": "If error occurred.",
          "name": "err"
        },
        {
          "type": {
            "names": [
              "module:Storage~CommitObject",
              "module:Core~ObjectData"
            ]
          },
          "description": "Object loaded from database,\rcommit-object or model data-blob.",
          "name": "object"
        }
      ],
      "memberof": "ProjectInterface",
      "longname": "ProjectInterface~loadObjectCallback",
      "scope": "inner",
      "___id": "T000002R000395",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Loads the object with hash key from the database or\r\n         * directly from the cache if recently loaded.\r\n         * @param {string} key - Hash of object to load.\r\n         * @param {ProjectInterface~loadObjectCallback} callback - Invoked when object is loaded.\r\n         * @func\r\n         * @private\r\n         */",
      "meta": {
        "range": [
          3412,
          3458
        ],
        "filename": "interface.js",
        "lineno": 98,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\storage\\project",
        "code": {
          "id": "astnode100008935",
          "name": "this.loadObject",
          "type": "MemberExpression",
          "value": "this.projectCache.loadObject",
          "paramnames": []
        }
      },
      "description": "Loads the object with hash key from the database or\rdirectly from the cache if recently loaded.",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Hash of object to load.",
          "name": "key"
        },
        {
          "type": {
            "names": [
              "ProjectInterface~loadObjectCallback"
            ]
          },
          "description": "Invoked when object is loaded.",
          "name": "callback"
        }
      ],
      "kind": "function",
      "access": "private",
      "name": "loadObject",
      "longname": "ProjectInterface#loadObject",
      "memberof": "ProjectInterface",
      "scope": "instance",
      "___id": "T000002R000396",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Collects the objects from the server and pre-loads them into the cache\r\n         * making the load of multiple objects faster.\r\n         * @private\r\n         * @param {string} rootKey - Hash of the object at the entry point of the paths.\r\n         * @param {string[]} paths - List of paths that needs to be pre-loaded.\r\n         * @param {function} callback - Invoked when objects have been collected.\r\n         * @func\r\n         * @private\r\n         */",
      "meta": {
        "range": [
          3950,
          3994
        ],
        "filename": "interface.js",
        "lineno": 110,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\storage\\project",
        "code": {
          "id": "astnode100008945",
          "name": "this.loadPaths",
          "type": "MemberExpression",
          "value": "this.projectCache.loadPaths",
          "paramnames": []
        }
      },
      "description": "Collects the objects from the server and pre-loads them into the cache\rmaking the load of multiple objects faster.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Hash of the object at the entry point of the paths.",
          "name": "rootKey"
        },
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "List of paths that needs to be pre-loaded.",
          "name": "paths"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Invoked when objects have been collected.",
          "name": "callback"
        }
      ],
      "kind": "function",
      "name": "loadPaths",
      "longname": "ProjectInterface#loadPaths",
      "memberof": "ProjectInterface",
      "scope": "instance",
      "___id": "T000002R000397",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Makes a commit to data base. Based on the root hash and commit message a new\r\n         * {@link module:Storage.CommitObject} (with returned hash)\r\n         * is generated and insert together with the core objects to the database on the server.\r\n         *\r\n         * @example\r\n         * var persisted = core.persist(rootNode);\r\n         *\r\n         * project.makeCommit('master', ['#thePreviousCommitHash'], persisted.rootHash, persisted.objects, 'new commit')\r\n         *   .then(function (result) {\r\n         *     // result = {\r\n         *     //   status: 'SYNCED',\r\n         *     //   hash: '#thisCommitHash'\r\n         *     // }\r\n         *   })\r\n         *   .catch(function (error) {\r\n         *     // error.message = 'Not authorized to read project: guest+project'\r\n         *   });\r\n         * @example\r\n         * project.makeCommit('master', ['#notPreviousCommitHash'], persisted.rootHash, persisted.objects, 'new commit')\r\n         *   .then(function (result) {\r\n         *     // result = {\r\n         *     //   status: 'FORKED',\r\n         *     //   hash: '#thisCommitHash'\r\n         *     // }\r\n         *   })...\r\n         * @example\r\n         * project.makeCommit(null, ['#anExistingCommitHash'], persisted.rootHash, persisted.objects, 'new commit')\r\n         *   .then(function (result) {\r\n         *     // result = {\r\n         *     //   hash: '#thisCommitHash'\r\n         *     // }\r\n         *   })...\r\n         * @example\r\n         * project.makeCommit('master', ['#aPreviousCommitHash'], previousRootHash, {}, 'adding a commit to master')\r\n         *   .then(function (result) {\r\n         *     // result = {\r\n         *     //   status: 'SYNCED',\r\n         *     //   hash: '#thisCommitHash'\r\n         *     // }\r\n         *   })...\r\n         * @param {string} branchName - Name of branch to update (none if null).\r\n         * @param {module:Storage~CommitHash[]} parents - Parent commit hashes.\r\n         * @param {module:Core~ObjectHash} rootHash - Hash of root object.\r\n         * @param {module:Core~DataObject} coreObjects - Core objects associated with the commit.\r\n         * @param {string} msg='n/a' - Commit message.\r\n         * @param {function} [callback] - If provided no promise will be returned.\r\n         * @param {null|Error} callback.error - The result of the execution.\r\n         * @param {module:Storage~CommitResult} callback.result - Status about the commit and branch update.\r\n         *\r\n         * @return {external:Promise}  On success the promise will be resolved with\r\n         * {@link module:Storage~CommitResult} <b>result</b>.<br>\r\n         * On error the promise will be rejected with {Error} <b>error</b>.\r\n         */",
      "meta": {
        "range": [
          6739,
          6918
        ],
        "filename": "interface.js",
        "lineno": 168,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\storage\\project",
        "code": {
          "id": "astnode100008955",
          "name": "this.makeCommit",
          "type": "FunctionExpression",
          "paramnames": [
            "branchName",
            "parents",
            "rootHash",
            "coreObjects",
            "msg",
            "callback"
          ]
        }
      },
      "description": "Makes a commit to data base. Based on the root hash and commit message a new\r{@link module:Storage.CommitObject} (with returned hash)\ris generated and insert together with the core objects to the database on the server.",
      "examples": [
        "var persisted = core.persist(rootNode);\r\rproject.makeCommit('master', ['#thePreviousCommitHash'], persisted.rootHash, persisted.objects, 'new commit')\r  .then(function (result) {\r    // result = {\r    //   status: 'SYNCED',\r    //   hash: '#thisCommitHash'\r    // }\r  })\r  .catch(function (error) {\r    // error.message = 'Not authorized to read project: guest+project'\r  });",
        "project.makeCommit('master', ['#notPreviousCommitHash'], persisted.rootHash, persisted.objects, 'new commit')\r  .then(function (result) {\r    // result = {\r    //   status: 'FORKED',\r    //   hash: '#thisCommitHash'\r    // }\r  })...",
        "project.makeCommit(null, ['#anExistingCommitHash'], persisted.rootHash, persisted.objects, 'new commit')\r  .then(function (result) {\r    // result = {\r    //   hash: '#thisCommitHash'\r    // }\r  })...",
        "project.makeCommit('master', ['#aPreviousCommitHash'], previousRootHash, {}, 'adding a commit to master')\r  .then(function (result) {\r    // result = {\r    //   status: 'SYNCED',\r    //   hash: '#thisCommitHash'\r    // }\r  })..."
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Name of branch to update (none if null).",
          "name": "branchName"
        },
        {
          "type": {
            "names": [
              "Array.<module:Storage~CommitHash>"
            ]
          },
          "description": "Parent commit hashes.",
          "name": "parents"
        },
        {
          "type": {
            "names": [
              "module:Core~ObjectHash"
            ]
          },
          "description": "Hash of root object.",
          "name": "rootHash"
        },
        {
          "type": {
            "names": [
              "module:Core~DataObject"
            ]
          },
          "description": "Core objects associated with the commit.",
          "name": "coreObjects"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "defaultvalue": "'n/a'",
          "description": "Commit message.",
          "name": "msg"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "If provided no promise will be returned.",
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "null",
              "Error"
            ]
          },
          "description": "The result of the execution.",
          "name": "callback.error"
        },
        {
          "type": {
            "names": [
              "module:Storage~CommitResult"
            ]
          },
          "description": "Status about the commit and branch update.",
          "name": "callback.result"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "external:Promise"
            ]
          },
          "description": "On success the promise will be resolved with\r{@link module:Storage~CommitResult} <b>result</b>.<br>\rOn error the promise will be rejected with {Error} <b>error</b>."
        }
      ],
      "name": "makeCommit",
      "longname": "ProjectInterface#makeCommit",
      "kind": "function",
      "memberof": "ProjectInterface",
      "scope": "instance",
      "___id": "T000002R000398",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Retrieves the metadata of the project.\r\n         * @example\r\n         * {\r\n         *  _id: 'guest+example',\r\n         *  owner: 'guest',\r\n         *  name: 'example',\r\n         *  info: {\r\n         *      createdAt: '2016-12-02T17:52:25.029Z',\r\n         *      viewedAt: '2017-01-30T22:45:15.269Z',\r\n         *      modifiedAt: '2017-01-20T00:15:34.593Z',\r\n         *      creator: 'guest',\r\n         *      viewer: 'guest',\r\n         *      modifier': 'guest'\r\n         *  },\r\n         *  hooks: {\r\n         *      ConstraintCheckerHook': {\r\n         *          url: 'http://127.0.0.1:8080/ConstraintCheckerHook',\r\n         *          description': 'Checks if there are any meta violations in the project',\r\n         *          events: ['COMMIT'],\r\n         *          active: true,\r\n         *          createdAt: '2017-01-19T23:22:46.834Z',\r\n         *          updatedAt: '2017-01-19T23:22:46.834Z'\r\n         *      }\r\n         *  },\r\n         *  rights: {\r\n         *      read: true,\r\n         *      write: true,\r\n         *      delete: true\r\n         *  },\r\n         *  branches: {\r\n         *      b1: '#998067142c7ff8067cd0c04a0ec4ef80d865606c',\r\n         *      master: '#36df6f8c17b2ccf4e35a2a75b1e0adb928f82a61'\r\n         *  }\r\n         * }\r\n         * @param {function} [callback] - If provided no promise will be returned.\r\n         * @param {null|Error} callback.error - The result of the execution.\r\n         * @param {object} callback.projectInfo - An object with info about the project.\r\n         *\r\n         * @return {external:Promise}  On success the promise will be resolved with\r\n         * {object} <b>projectInfo</b>.<br>\r\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n         */",
      "meta": {
        "range": [
          8702,
          8840
        ],
        "filename": "interface.js",
        "lineno": 215,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\storage\\project",
        "code": {
          "id": "astnode100008972",
          "name": "this.getProjectInfo",
          "type": "FunctionExpression",
          "paramnames": [
            "callback"
          ]
        }
      },
      "description": "Retrieves the metadata of the project.",
      "examples": [
        "{\r _id: 'guest+example',\r owner: 'guest',\r name: 'example',\r info: {\r     createdAt: '2016-12-02T17:52:25.029Z',\r     viewedAt: '2017-01-30T22:45:15.269Z',\r     modifiedAt: '2017-01-20T00:15:34.593Z',\r     creator: 'guest',\r     viewer: 'guest',\r     modifier': 'guest'\r },\r hooks: {\r     ConstraintCheckerHook': {\r         url: 'http://127.0.0.1:8080/ConstraintCheckerHook',\r         description': 'Checks if there are any meta violations in the project',\r         events: ['COMMIT'],\r         active: true,\r         createdAt: '2017-01-19T23:22:46.834Z',\r         updatedAt: '2017-01-19T23:22:46.834Z'\r     }\r },\r rights: {\r     read: true,\r     write: true,\r     delete: true\r },\r branches: {\r     b1: '#998067142c7ff8067cd0c04a0ec4ef80d865606c',\r     master: '#36df6f8c17b2ccf4e35a2a75b1e0adb928f82a61'\r }\r}"
      ],
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "If provided no promise will be returned.",
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "null",
              "Error"
            ]
          },
          "description": "The result of the execution.",
          "name": "callback.error"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "An object with info about the project.",
          "name": "callback.projectInfo"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "external:Promise"
            ]
          },
          "description": "On success the promise will be resolved with\r{object} <b>projectInfo</b>.<br>\rOn error the promise will be rejected with {@link Error} <b>error</b>."
        }
      ],
      "name": "getProjectInfo",
      "longname": "ProjectInterface#getProjectInfo",
      "kind": "function",
      "memberof": "ProjectInterface",
      "scope": "instance",
      "___id": "T000002R000399",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Updates the head of the branch.\r\n         * @param {string} branchName - Name of branch to update.\r\n         * @param {module:Storage~CommitHash} newHash - New commit hash for branch head.\r\n         * @param {module:Storage~CommitHash} oldHash - Current state of the branch head inside the database.\r\n         * @param {function} [callback] - If provided no promise will be returned.\r\n         * @param {null|Error} callback.error - The result of the execution.\r\n         * @param {module:Storage~CommitResult} callback.result - Status about the branch update.\r\n         *\r\n         * @return {external:Promise}  On success the promise will be resolved with\r\n         * {@link module:Storage~CommitResult} <b>result</b>.<br>\r\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n         */",
      "meta": {
        "range": [
          9699,
          9865
        ],
        "filename": "interface.js",
        "lineno": 232,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\storage\\project",
        "code": {
          "id": "astnode100008984",
          "name": "this.setBranchHash",
          "type": "FunctionExpression",
          "paramnames": [
            "branchName",
            "newHash",
            "oldHash",
            "callback"
          ]
        }
      },
      "description": "Updates the head of the branch.",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Name of branch to update.",
          "name": "branchName"
        },
        {
          "type": {
            "names": [
              "module:Storage~CommitHash"
            ]
          },
          "description": "New commit hash for branch head.",
          "name": "newHash"
        },
        {
          "type": {
            "names": [
              "module:Storage~CommitHash"
            ]
          },
          "description": "Current state of the branch head inside the database.",
          "name": "oldHash"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "If provided no promise will be returned.",
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "null",
              "Error"
            ]
          },
          "description": "The result of the execution.",
          "name": "callback.error"
        },
        {
          "type": {
            "names": [
              "module:Storage~CommitResult"
            ]
          },
          "description": "Status about the branch update.",
          "name": "callback.result"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "external:Promise"
            ]
          },
          "description": "On success the promise will be resolved with\r{@link module:Storage~CommitResult} <b>result</b>.<br>\rOn error the promise will be rejected with {@link Error} <b>error</b>."
        }
      ],
      "name": "setBranchHash",
      "longname": "ProjectInterface#setBranchHash",
      "kind": "function",
      "memberof": "ProjectInterface",
      "scope": "instance",
      "___id": "T000002R000400",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Retrieves the commit hash for the head of the branch.\r\n         * @param {string} branchName - Name of branch.\r\n         * @param {function} [callback] - If provided no promise will be returned.\r\n         * @param {null|Error} callback.error - The result of the execution.\r\n         * @param {module:Storage~CommitHash} callback.commitHash - The commit hash.\r\n         *\r\n         * @return {external:Promise}  On success the promise will be resolved with\r\n         * {@link module:Storage~CommitHash} <b>commitHash</b>.<br>\r\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n         */",
      "meta": {
        "range": [
          10524,
          10672
        ],
        "filename": "interface.js",
        "lineno": 247,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\storage\\project",
        "code": {
          "id": "astnode100008999",
          "name": "this.getBranchHash",
          "type": "FunctionExpression",
          "paramnames": [
            "branchName",
            "callback"
          ]
        }
      },
      "description": "Retrieves the commit hash for the head of the branch.",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Name of branch.",
          "name": "branchName"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "If provided no promise will be returned.",
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "null",
              "Error"
            ]
          },
          "description": "The result of the execution.",
          "name": "callback.error"
        },
        {
          "type": {
            "names": [
              "module:Storage~CommitHash"
            ]
          },
          "description": "The commit hash.",
          "name": "callback.commitHash"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "external:Promise"
            ]
          },
          "description": "On success the promise will be resolved with\r{@link module:Storage~CommitHash} <b>commitHash</b>.<br>\rOn error the promise will be rejected with {@link Error} <b>error</b>."
        }
      ],
      "name": "getBranchHash",
      "longname": "ProjectInterface#getBranchHash",
      "kind": "function",
      "memberof": "ProjectInterface",
      "scope": "instance",
      "___id": "T000002R000401",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Retrieves the root hash at the provided branch or commit-hash.\r\n         * @param {string} branchNameOrCommitHash - Name of branch or a commit-hash.\r\n         * @param {function} [callback] - If provided no promise will be returned.\r\n         * @param {null|Error} callback.error - The result of the execution.\r\n         * @param {module:Core~ObjectHash} callback.rootHash - The root hash.\r\n         *\r\n         * @return {external:Promise}  On success the promise will be resolved with\r\n         * {@link module:Core~ObjectHash} <b>rootHash</b>.<br>\r\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n         */",
      "meta": {
        "range": [
          11357,
          11644
        ],
        "filename": "interface.js",
        "lineno": 262,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\storage\\project",
        "code": {
          "id": "astnode100009012",
          "name": "this.getRootHash",
          "type": "FunctionExpression",
          "paramnames": [
            "branchNameOrCommitHash",
            "callback"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Retrieves the root hash at the provided branch or commit-hash.",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Name of branch or a commit-hash.",
          "name": "branchNameOrCommitHash"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "If provided no promise will be returned.",
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "null",
              "Error"
            ]
          },
          "description": "The result of the execution.",
          "name": "callback.error"
        },
        {
          "type": {
            "names": [
              "module:Core~ObjectHash"
            ]
          },
          "description": "The root hash.",
          "name": "callback.rootHash"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "external:Promise"
            ]
          },
          "description": "On success the promise will be resolved with\r{@link module:Core~ObjectHash} <b>rootHash</b>.<br>\rOn error the promise will be rejected with {@link Error} <b>error</b>."
        }
      ],
      "name": "getRootHash",
      "longname": "ProjectInterface#getRootHash",
      "kind": "function",
      "memberof": "ProjectInterface",
      "scope": "instance",
      "___id": "T000002R000402",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Creates a new branch with head pointing to the provided commit hash.\r\n         * @param {string} branchName - Name of branch to create.\r\n         * @param {module:Storage~CommitHash} newHash - New commit hash for branch head.\r\n         * @param {function} [callback] - If provided no promise will be returned.\r\n         * @param {null|Error} callback.error - The result of the execution.\r\n         * @param {module:Storage~CommitResult} callback.result - Status about the branch update.\r\n         *\r\n         * @return {external:Promise}  On success the promise will be resolved with\r\n         * {@link module:Storage~CommitResult} <b>result</b>.<br>\r\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n         */",
      "meta": {
        "range": [
          12429,
          12584
        ],
        "filename": "interface.js",
        "lineno": 282,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\storage\\project",
        "code": {
          "id": "astnode100009041",
          "name": "this.createBranch",
          "type": "FunctionExpression",
          "paramnames": [
            "branchName",
            "newHash",
            "callback"
          ]
        }
      },
      "description": "Creates a new branch with head pointing to the provided commit hash.",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Name of branch to create.",
          "name": "branchName"
        },
        {
          "type": {
            "names": [
              "module:Storage~CommitHash"
            ]
          },
          "description": "New commit hash for branch head.",
          "name": "newHash"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "If provided no promise will be returned.",
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "null",
              "Error"
            ]
          },
          "description": "The result of the execution.",
          "name": "callback.error"
        },
        {
          "type": {
            "names": [
              "module:Storage~CommitResult"
            ]
          },
          "description": "Status about the branch update.",
          "name": "callback.result"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "external:Promise"
            ]
          },
          "description": "On success the promise will be resolved with\r{@link module:Storage~CommitResult} <b>result</b>.<br>\rOn error the promise will be rejected with {@link Error} <b>error</b>."
        }
      ],
      "name": "createBranch",
      "longname": "ProjectInterface#createBranch",
      "kind": "function",
      "memberof": "ProjectInterface",
      "scope": "instance",
      "___id": "T000002R000403",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Deletes the branch.\r\n         * @param {string} branchName - Name of branch to create.\r\n         * @param {module:Storage~CommitHash} oldHash - Previous commit hash for branch head.\r\n         * @param {function} [callback] - If provided no promise will be returned.\r\n         * @param {null|Error} callback.error - The result of the execution.\r\n         * @param {module:Storage~CommitResult} callback.result - Status about the branch update.\r\n         *\r\n         * @return {external:Promise}  On success the promise will be resolved with\r\n         * {@link module:Storage~CommitResult} <b>result</b>.<br>\r\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n         */",
      "meta": {
        "range": [
          13325,
          13480
        ],
        "filename": "interface.js",
        "lineno": 298,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\storage\\project",
        "code": {
          "id": "astnode100009055",
          "name": "this.deleteBranch",
          "type": "FunctionExpression",
          "paramnames": [
            "branchName",
            "oldHash",
            "callback"
          ]
        }
      },
      "description": "Deletes the branch.",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Name of branch to create.",
          "name": "branchName"
        },
        {
          "type": {
            "names": [
              "module:Storage~CommitHash"
            ]
          },
          "description": "Previous commit hash for branch head.",
          "name": "oldHash"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "If provided no promise will be returned.",
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "null",
              "Error"
            ]
          },
          "description": "The result of the execution.",
          "name": "callback.error"
        },
        {
          "type": {
            "names": [
              "module:Storage~CommitResult"
            ]
          },
          "description": "Status about the branch update.",
          "name": "callback.result"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "external:Promise"
            ]
          },
          "description": "On success the promise will be resolved with\r{@link module:Storage~CommitResult} <b>result</b>.<br>\rOn error the promise will be rejected with {@link Error} <b>error</b>."
        }
      ],
      "name": "deleteBranch",
      "longname": "ProjectInterface#deleteBranch",
      "kind": "function",
      "memberof": "ProjectInterface",
      "scope": "instance",
      "___id": "T000002R000404",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Retrieves all branches and their current heads within the project.\r\n         * @param {function} [callback] - If provided no promise will be returned.\r\n         * @param {null|Error} callback.error - The result of the execution.\r\n         * @param {Object.<string, module:Storage~CommitHash>} callback.branches - An object with branch names as keys\r\n         * and their commit-hashes as values.\r\n         * @return {external:Promise}  On success the promise will be resolved with\r\n         * Object.<string, {@link module:Storage~CommitHash}> <b>branches</b>.<br>\r\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n         */",
      "meta": {
        "range": [
          14179,
          14311
        ],
        "filename": "interface.js",
        "lineno": 312,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\storage\\project",
        "code": {
          "id": "astnode100009069",
          "name": "this.getBranches",
          "type": "FunctionExpression",
          "paramnames": [
            "callback"
          ]
        }
      },
      "description": "Retrieves all branches and their current heads within the project.",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "If provided no promise will be returned.",
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "null",
              "Error"
            ]
          },
          "description": "The result of the execution.",
          "name": "callback.error"
        },
        {
          "type": {
            "names": [
              "Object.<string, module:Storage~CommitHash>"
            ]
          },
          "description": "An object with branch names as keys\rand their commit-hashes as values.",
          "name": "callback.branches"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "external:Promise"
            ]
          },
          "description": "On success the promise will be resolved with\rObject.<string, {@link module:Storage~CommitHash}> <b>branches</b>.<br>\rOn error the promise will be rejected with {@link Error} <b>error</b>."
        }
      ],
      "name": "getBranches",
      "longname": "ProjectInterface#getBranches",
      "kind": "function",
      "memberof": "ProjectInterface",
      "scope": "instance",
      "___id": "T000002R000405",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Retrieves the commit-object at the provided branch or commit-hash.\r\n         * @param {string} branchNameOrCommitHash - Name of branch or a commit-hash.\r\n         * @param {function} [callback] - If provided no promise will be returned.\r\n         * @param {null|Error} callback.error - The result of the execution.\r\n         * @param {module:Storage~CommitObject} callback.commit - The commit-object.\r\n         *\r\n         * @return {external:Promise}  On success the promise will be resolved with\r\n         * {@link module:Storage~CommitObject} <b>commitObject</b>.<br>\r\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n         */",
      "meta": {
        "range": [
          15016,
          15609
        ],
        "filename": "interface.js",
        "lineno": 327,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\storage\\project",
        "code": {
          "id": "astnode100009081",
          "name": "this.getCommitObject",
          "type": "FunctionExpression",
          "paramnames": [
            "branchNameOrCommitHash",
            "callback"
          ]
        },
        "vars": {
          "self": "ProjectInterface#getCommitObject~self",
          "commitDeferred": "ProjectInterface#getCommitObject~commitDeferred",
          "": null
        }
      },
      "description": "Retrieves the commit-object at the provided branch or commit-hash.",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Name of branch or a commit-hash.",
          "name": "branchNameOrCommitHash"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "If provided no promise will be returned.",
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "null",
              "Error"
            ]
          },
          "description": "The result of the execution.",
          "name": "callback.error"
        },
        {
          "type": {
            "names": [
              "module:Storage~CommitObject"
            ]
          },
          "description": "The commit-object.",
          "name": "callback.commit"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "external:Promise"
            ]
          },
          "description": "On success the promise will be resolved with\r{@link module:Storage~CommitObject} <b>commitObject</b>.<br>\rOn error the promise will be rejected with {@link Error} <b>error</b>."
        }
      ],
      "name": "getCommitObject",
      "longname": "ProjectInterface#getCommitObject",
      "kind": "function",
      "memberof": "ProjectInterface",
      "scope": "instance",
      "___id": "T000002R000406",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Retrieves an array of commits starting from a branch(es) and/or commitHash(es).\r\n         * <br> The result is ordered by the rules (applied in order)\r\n         * <br> 1. Descendants are always returned before their ancestors.\r\n         * <br> 2. By their timestamp.\r\n         * @param {string|module:Storage~CommitHash|string[]|module:Storage~CommitHash[]} start - Branch name,\r\n         * commit hash or array of these.\r\n         * @param {number} number - Number of commits to load.\r\n         * @param {function} [callback] - If provided no promise will be returned.\r\n         * @param {null|Error} callback.error - The result of the execution.\r\n         * @param {Array.<module:Storage~CommitObject>} callback.commits - The commits that match the input ordered\r\n         * as explained.\r\n         *\r\n         * @return {external:Promise}  On success the promise will be resolved with\r\n         * Array.<{@link module:Storage~CommitObject}> <b>commits</b>.<br>\r\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n         */",
      "meta": {
        "range": [
          16707,
          16852
        ],
        "filename": "interface.js",
        "lineno": 361,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\storage\\project",
        "code": {
          "id": "astnode100009140",
          "name": "this.getHistory",
          "type": "FunctionExpression",
          "paramnames": [
            "start",
            "number",
            "callback"
          ]
        }
      },
      "description": "Retrieves an array of commits starting from a branch(es) and/or commitHash(es).\r<br> The result is ordered by the rules (applied in order)\r<br> 1. Descendants are always returned before their ancestors.\r<br> 2. By their timestamp.",
      "params": [
        {
          "type": {
            "names": [
              "string",
              "module:Storage~CommitHash",
              "Array.<string>",
              "Array.<module:Storage~CommitHash>"
            ]
          },
          "description": "Branch name,\rcommit hash or array of these.",
          "name": "start"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Number of commits to load.",
          "name": "number"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "If provided no promise will be returned.",
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "null",
              "Error"
            ]
          },
          "description": "The result of the execution.",
          "name": "callback.error"
        },
        {
          "type": {
            "names": [
              "Array.<module:Storage~CommitObject>"
            ]
          },
          "description": "The commits that match the input ordered\ras explained.",
          "name": "callback.commits"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "external:Promise"
            ]
          },
          "description": "On success the promise will be resolved with\rArray.<{@link module:Storage~CommitObject}> <b>commits</b>.<br>\rOn error the promise will be rejected with {@link Error} <b>error</b>."
        }
      ],
      "name": "getHistory",
      "longname": "ProjectInterface#getHistory",
      "kind": "function",
      "memberof": "ProjectInterface",
      "scope": "instance",
      "___id": "T000002R000411",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Retrieves and array of the latest (sorted by timestamp) commits for the project.\r\n         * If timestamp is given it will get <b>number</b> of commits strictly before <b>before</b>.\r\n         * If commit hash is specified that commit will be included too.\r\n         * <br> N.B. due to slight time differences on different machines, ancestors may be returned before\r\n         * their descendants. Unless looking for 'headless' commits 'getHistory' is the preferred method.\r\n         * @param {number|module:Storage~CommitHash} before - Timestamp or commitHash to load history from.\r\n         * @param {number} number - Number of commits to load.\r\n         * @param {function} [callback] - If provided no promise will be returned.\r\n         * @param {null|Error} callback.error - The result of the execution.\r\n         * @param {Array.<module:Storage~CommitObject>} callback.commits - The commits that match the input, ordered\r\n         * by their time of insertion.\r\n         *\r\n         * @return {external:Promise}  On success the promise will be resolved with\r\n         * Array.<{@link module:Storage~CommitObject}> <b>commits</b>.<br>\r\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n         */",
      "meta": {
        "range": [
          18125,
          18271
        ],
        "filename": "interface.js",
        "lineno": 382,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\storage\\project",
        "code": {
          "id": "astnode100009154",
          "name": "this.getCommits",
          "type": "FunctionExpression",
          "paramnames": [
            "before",
            "number",
            "callback"
          ]
        }
      },
      "description": "Retrieves and array of the latest (sorted by timestamp) commits for the project.\rIf timestamp is given it will get <b>number</b> of commits strictly before <b>before</b>.\rIf commit hash is specified that commit will be included too.\r<br> N.B. due to slight time differences on different machines, ancestors may be returned before\rtheir descendants. Unless looking for 'headless' commits 'getHistory' is the preferred method.",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "module:Storage~CommitHash"
            ]
          },
          "description": "Timestamp or commitHash to load history from.",
          "name": "before"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Number of commits to load.",
          "name": "number"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "If provided no promise will be returned.",
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "null",
              "Error"
            ]
          },
          "description": "The result of the execution.",
          "name": "callback.error"
        },
        {
          "type": {
            "names": [
              "Array.<module:Storage~CommitObject>"
            ]
          },
          "description": "The commits that match the input, ordered\rby their time of insertion.",
          "name": "callback.commits"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "external:Promise"
            ]
          },
          "description": "On success the promise will be resolved with\rArray.<{@link module:Storage~CommitObject}> <b>commits</b>.<br>\rOn error the promise will be rejected with {@link Error} <b>error</b>."
        }
      ],
      "name": "getCommits",
      "longname": "ProjectInterface#getCommits",
      "kind": "function",
      "memberof": "ProjectInterface",
      "scope": "instance",
      "___id": "T000002R000412",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Creates a new tag pointing to the provided commit hash.\r\n         * @param {string} tagName - Name of tag to create.\r\n         * @param {module:Storage~CommitHash} commitHash - Commit hash tag will point to.\r\n         * @param {function} [callback] - If provided no promise will be returned.\r\n         * @param {null|Error} callback.error - The result of the execution.\r\n         *\r\n         * @return {external:Promise}  On success the promise will be resolved with nothing.<br>\r\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n         */",
      "meta": {
        "range": [
          18885,
          19034
        ],
        "filename": "interface.js",
        "lineno": 396,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\storage\\project",
        "code": {
          "id": "astnode100009168",
          "name": "this.createTag",
          "type": "FunctionExpression",
          "paramnames": [
            "tagName",
            "commitHash",
            "callback"
          ]
        }
      },
      "description": "Creates a new tag pointing to the provided commit hash.",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Name of tag to create.",
          "name": "tagName"
        },
        {
          "type": {
            "names": [
              "module:Storage~CommitHash"
            ]
          },
          "description": "Commit hash tag will point to.",
          "name": "commitHash"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "If provided no promise will be returned.",
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "null",
              "Error"
            ]
          },
          "description": "The result of the execution.",
          "name": "callback.error"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "external:Promise"
            ]
          },
          "description": "On success the promise will be resolved with nothing.<br>\rOn error the promise will be rejected with {@link Error} <b>error</b>."
        }
      ],
      "name": "createTag",
      "longname": "ProjectInterface#createTag",
      "kind": "function",
      "memberof": "ProjectInterface",
      "scope": "instance",
      "___id": "T000002R000413",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Deletes the given tag.\r\n         * @param {string} tagName - Name of tag to delete.\r\n         * @param {function} [callback] - If provided no promise will be returned.\r\n         * @param {null|Error} callback.error - The result of the execution.\r\n         *\r\n         * @return {external:Promise}  On success the promise will be resolved with nothing.<br>\r\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n         */",
      "meta": {
        "range": [
          19524,
          19661
        ],
        "filename": "interface.js",
        "lineno": 409,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\storage\\project",
        "code": {
          "id": "astnode100009182",
          "name": "this.deleteTag",
          "type": "FunctionExpression",
          "paramnames": [
            "tagName",
            "callback"
          ]
        }
      },
      "description": "Deletes the given tag.",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Name of tag to delete.",
          "name": "tagName"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "If provided no promise will be returned.",
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "null",
              "Error"
            ]
          },
          "description": "The result of the execution.",
          "name": "callback.error"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "external:Promise"
            ]
          },
          "description": "On success the promise will be resolved with nothing.<br>\rOn error the promise will be rejected with {@link Error} <b>error</b>."
        }
      ],
      "name": "deleteTag",
      "longname": "ProjectInterface#deleteTag",
      "kind": "function",
      "memberof": "ProjectInterface",
      "scope": "instance",
      "___id": "T000002R000414",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Retrieves all tags and their commits hashes within the project.\r\n         * @param {function} [callback] - If provided no promise will be returned.\r\n         * @param {null|Error} callback.error - The result of the execution.\r\n         * @param {Object.<string, module:Storage~CommitHash>} callback.tags - An object with tag names as keys and\r\n         * their commit-hashes as values.\r\n         * @return {external:Promise}  On success the promise will be resolved with\r\n         * Object.<string, {@link module:Storage~CommitHash}> <b>tags</b>.<br>\r\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n         */",
      "meta": {
        "range": [
          20346,
          20470
        ],
        "filename": "interface.js",
        "lineno": 423,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\storage\\project",
        "code": {
          "id": "astnode100009195",
          "name": "this.getTags",
          "type": "FunctionExpression",
          "paramnames": [
            "callback"
          ]
        }
      },
      "description": "Retrieves all tags and their commits hashes within the project.",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "If provided no promise will be returned.",
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "null",
              "Error"
            ]
          },
          "description": "The result of the execution.",
          "name": "callback.error"
        },
        {
          "type": {
            "names": [
              "Object.<string, module:Storage~CommitHash>"
            ]
          },
          "description": "An object with tag names as keys and\rtheir commit-hashes as values.",
          "name": "callback.tags"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "external:Promise"
            ]
          },
          "description": "On success the promise will be resolved with\rObject.<string, {@link module:Storage~CommitHash}> <b>tags</b>.<br>\rOn error the promise will be rejected with {@link Error} <b>error</b>."
        }
      ],
      "name": "getTags",
      "longname": "ProjectInterface#getTags",
      "kind": "function",
      "memberof": "ProjectInterface",
      "scope": "instance",
      "___id": "T000002R000415",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Retrieves the common ancestor of two commits. If no ancestor exists it will result in an error.\r\n         *\r\n         * @param {module:Storage~CommitHash} commitA - Commit hash.\r\n         * @param {module:Storage~CommitHash} commitB - Commit hash.\r\n         * @param {function} [callback] - If provided no promise will be returned.\r\n         * @param {null|Error} callback.error - The result of the execution (will be non-null if e.g. the commits do\r\n         * not exist or have no common ancestor).\r\n         * @param {module:Storage~CommitHash} callback.commitHash - The commit hash of the common ancestor.\r\n         *\r\n         * @return {external:Promise}  On success the promise will be resolved with\r\n         * {@link module:Storage~CommitHash} <b>commitHash</b>.<br>\r\n         * On error the promise will be rejected with {@link Error} <b>error</b>.\r\n         */",
      "meta": {
        "range": [
          21380,
          21554
        ],
        "filename": "interface.js",
        "lineno": 441,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\storage\\project",
        "code": {
          "id": "astnode100009207",
          "name": "this.getCommonAncestorCommit",
          "type": "FunctionExpression",
          "paramnames": [
            "commitA",
            "commitB",
            "callback"
          ]
        }
      },
      "description": "Retrieves the common ancestor of two commits. If no ancestor exists it will result in an error.",
      "params": [
        {
          "type": {
            "names": [
              "module:Storage~CommitHash"
            ]
          },
          "description": "Commit hash.",
          "name": "commitA"
        },
        {
          "type": {
            "names": [
              "module:Storage~CommitHash"
            ]
          },
          "description": "Commit hash.",
          "name": "commitB"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "If provided no promise will be returned.",
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "null",
              "Error"
            ]
          },
          "description": "The result of the execution (will be non-null if e.g. the commits do\rnot exist or have no common ancestor).",
          "name": "callback.error"
        },
        {
          "type": {
            "names": [
              "module:Storage~CommitHash"
            ]
          },
          "description": "The commit hash of the common ancestor.",
          "name": "callback.commitHash"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "external:Promise"
            ]
          },
          "description": "On success the promise will be resolved with\r{@link module:Storage~CommitHash} <b>commitHash</b>.<br>\rOn error the promise will be rejected with {@link Error} <b>error</b>."
        }
      ],
      "name": "getCommonAncestorCommit",
      "longname": "ProjectInterface#getCommonAncestorCommit",
      "kind": "function",
      "memberof": "ProjectInterface",
      "scope": "instance",
      "___id": "T000002R000416",
      "___s": true
    },
    {
      "comment": "/**\r\n         * Return the identity of the current user of this project.\r\n         * @return {string} the userId\r\n         */",
      "meta": {
        "range": [
          21702,
          21822
        ],
        "filename": "interface.js",
        "lineno": 449,
        "columnno": 8,
        "path": "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\storage\\project",
        "code": {
          "id": "astnode100009221",
          "name": "this.getUserId",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "Return the identity of the current user of this project.",
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the userId"
        }
      ],
      "name": "getUserId",
      "longname": "ProjectInterface#getUserId",
      "kind": "function",
      "memberof": "ProjectInterface",
      "scope": "instance",
      "___id": "T000002R000417",
      "___s": true
    },
    {
      "kind": "package",
      "longname": "package:undefined",
      "files": [
        "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\core\\core.js",
        "C:\\Users\\patrik85\\GIT\\webgme-core-bindings\\node_modules\\webgme-engine\\src\\common\\storage\\project\\interface.js"
      ],
      "___id": "T000002R000418",
      "___s": true
    }
  ]
}