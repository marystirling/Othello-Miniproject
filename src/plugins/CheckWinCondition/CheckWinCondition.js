/*globals define*/
/*eslint-env node, browser*/

/**
 * Generated by PluginGenerator 2.20.5 from webgme on Fri Jul 21 2023 23:41:07 GMT-0500 (Central Daylight Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase',
    'Othello-Miniproject/utils',
    'Othello-Miniproject/constants'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase,
    UTILS,
    CONSTANTS) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of CheckWinCondition.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin CheckWinCondition.
     * @constructor
     */
    function CheckWinCondition() {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    }

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructure etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    CheckWinCondition.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    CheckWinCondition.prototype = Object.create(PluginBase.prototype);
    CheckWinCondition.prototype.constructor = CheckWinCondition;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(Error|null, plugin.PluginResult)} callback - the result callback
     */
    CheckWinCondition.prototype.main = function (callback) {
        // Use this to access core, project, result, logger etc from PluginBase.
        const { core, META, logger, activeNode, result } = this;

        // Load the sub-tree of the activeNode
        core.loadSubTree(activeNode)
            .then(nodes => {
                const nodeHash = {};
                nodes.forEach(node => {
                    nodeHash[core.getPath(node)] = node;
                });

                let boardNode = null;
                core.getChildrenPaths(activeNode).forEach(playerOrBoard => {
                    const node = nodeHash[playerOrBoard];
                    if (core.isInstanceOf(node, META.Board)) {
                        boardNode = node;
                    }
                });

                // Invoke the ValidTiles plugin
                const validTilesResult = this.invokePlugin('ValidTiles', { pluginConfig: {} });

                return Promise.all([validTilesResult, boardNode]);
            })
            .then(([validTilesResult, boardNode]) => {
                const validTiles = validTilesResult.messages[0].message;
                const board = UTILS.getBoardDescriptor(core, META, boardNode, nodeHash);

                let winner = null;

                if (validTiles.length === 0) {
                    // Invoke the CountingPieces plugin
                    const countingPiecesResult = this.invokePlugin('CountingPieces', { pluginConfig: {} });
                    const whiteCount = countingPiecesResult.messages[0].message.totalWhites;
                    const blackCount = countingPiecesResult.messages[0].message.totalBlacks;

                    // Determine the winner based on the count
                    if (whiteCount > blackCount) {
                        winner = { player: CONSTANTS.PLAYER.WHITE, count: whiteCount };
                    } else if (blackCount > whiteCount) {
                        winner = { player: CONSTANTS.PLAYER.BLACK, count: blackCount };
                    } else {
                        winner = { player: CONSTANTS.PLAYER.EMPTY, count: whiteCount };  // It's a draw
                    }
                }

                this.createMessage(activeNode, JSON.stringify(winner));

                result.setSuccess(true);
                callback(null, result);
            })
            .catch(e => {
                logger.error(e);
                result.setSuccess(false);
                callback(e, null);
            });
    };

    return CheckWinCondition;
});
